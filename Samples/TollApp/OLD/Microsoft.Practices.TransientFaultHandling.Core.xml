<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.TransientFaultHandling.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.TransientFaultHandling.AsyncExecution`1">
            <summary>
            Handles the execution and retries of the user initiated task.
            </summary>
            <typeparam name="TResult">The result type of the user initiated task.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.AsyncExecution">
            <summary>
            Provides a wrapper of a non generic <see cref="T:System.Threading.Tasks.Task"/> and calls in to the pipeline
            for retrying that supports only the generic verion of <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.AsyncExecution.StartAsGenericTask(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Wraps the non generic <see cref="T:System.Threading.Tasks.Task"/> into a generic <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="taskAction">The task to wrap.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task"/> that wraps the non generic <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.Guard">
            <summary>
            Implements the common guard methods.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Guard.ArgumentNotNullOrEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't null or empty.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
            <returns>The return value should be ignored. It is intended to be used only when validating arguments during instance creation (e.g. when calling base constructor).</returns>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
            /// <returns>The return value should be ignored. It is intended to be used only when validating arguments during instance creation (e.g. when calling base constructor).</returns>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Guard.ArgumentNotDefaultValue``1(``0,System.String)">
            <summary>
            Checks an argument to ensure that its value is not the default value for its type.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="argumentValue">The value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Guard.ArgumentNotZeroOrNegativeValue(System.Int32,System.String)">
            <summary>
            Checks an argument to ensure that its value is not zero or negative.
            </summary>
            <param name="argumentValue">The value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Guard.ArgumentNotNegativeValue(System.Int32,System.String)">
            <summary>
            Checks an argument to ensure that its value is not negative.
            </summary>
            <param name="argumentValue">The <see cref="T:System.Int32"/> value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Guard.ArgumentNotNegativeValue(System.Int64,System.String)">
            <summary>
            Checks an argument to ensure that its value is not negative.
            </summary>
            <param name="argumentValue">The <see cref="T:System.Int64"/> value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Guard.ArgumentNotGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Checks an argument to ensure that its value doesn't exceed the specified ceiling baseline.
            </summary>
            <param name="argumentValue">The <see cref="T:System.Double"/> value of the argument.</param>
            <param name="ceilingValue">The <see cref="T:System.Double"/> ceiling value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Guard.EnumValueIsDefined(System.Type,System.Object,System.String)">
            <summary>
            Checks an Enum argument to ensure that its value is defined by the specified Enum type.
            </summary>
            <param name="enumType">The Enum type the value should correspond to.</param>
            <param name="value">The value to check for.</param>
            <param name="argumentName">The name of the argument holding the value.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Guard.TypeIsAssignableFromType(System.Type,System.Type,System.String)">
            <summary>
            Verifies that an argument type is assignable from the provided type (meaning
            interfaces are implemented, or classes exist in the base class hierarchy).
            </summary>
            <param name="assignee">The argument type.</param>
            <param name="providedType">The type it must be assignable from.</param>
            <param name="argumentName">The argument name.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Guard.IsValueDefined``1(``0)">
            <summary>
            Checks the specified value to ensure that its value is defined, i.e. not null and not default value.
            </summary>
            <typeparam name="T">The type of the value to be checked.</typeparam>
            <param name="value">The value to be checked.</param>
            <returns>True if the value is defined or false if it's null or represents a default value for its type.</returns>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy">
            <summary>
            Defines an interface which must be implemented by custom components responsible for detecting specific transient conditions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy.IsTransient(System.Exception)">
            <summary>
            Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
            <param name="ex">The exception object to be verified.</param>
            <returns>True if the specified exception is considered as transient, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages.ArgumentCannotBeDefault">
            <summary>
              Looks up a localized string similar to The specified argument {0} cannot be initialized with its default value..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages.ArgumentCannotBeGreaterThanBaseline">
            <summary>
              Looks up a localized string similar to The specified argument {0} cannot be greater than its ceiling value of {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages.ArgumentCannotBeNegative">
            <summary>
              Looks up a localized string similar to The specified argument {0} cannot be initialized with a negative value..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages.ArgumentCannotBeZeroOrNegative">
            <summary>
              Looks up a localized string similar to The specified argument {0} cannot be initialized with a zero or negative value..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages.InvalidEnumValue">
            <summary>
              Looks up a localized string similar to The value of the argument {0} provided for the enumeration {1} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages.RetryLimitExceeded">
            <summary>
              Looks up a localized string similar to The action has exceeded its defined retry limit..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages.StringCannotBeEmpty">
            <summary>
              Looks up a localized string similar to The specified string argument {0} must not be empty..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages.TaskCannotBeNull">
            <summary>
              Looks up a localized string similar to The specified argument &apos;{0}&apos; cannot return a null task when invoked..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages.TaskMustBeScheduled">
            <summary>
              Looks up a localized string similar to The specified argument &apos;{0}&apos; must return a scheduled task (also known as &quot;hot&quot; task) when invoked..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages.TypeNotCompatible">
            <summary>
              Looks up a localized string similar to The specified type {0} is not compatible with {1}..
            </summary>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.RetryingEventArgs">
            <summary>
            Contains information required for the <see cref="E:Microsoft.Practices.TransientFaultHandling.RetryPolicy.Retrying"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryingEventArgs.#ctor(System.Int32,System.TimeSpan,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.RetryingEventArgs"/> class.
            </summary>
            <param name="currentRetryCount">The current retry attempt count.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
            <param name="lastException">The exception which caused the retry conditions to occur.</param>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.RetryingEventArgs.CurrentRetryCount">
            <summary>
            Gets the current retry count.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.RetryingEventArgs.Delay">
            <summary>
            Gets the delay indicating how long the current thread will be suspended for before the next iteration will be invoked.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.RetryingEventArgs.LastException">
            <summary>
            Gets the exception which caused the retry conditions to occur.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.RetryLimitExceededException">
            <summary>
            The special type of exception that provides managed exit from a retry loop. The user code can use this
            exception to notify the retry policy that no further retry attempts are required.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryLimitExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.RetryLimitExceededException"/> class with a default error message.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryLimitExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.RetryLimitExceededException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryLimitExceededException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.RetryLimitExceededException"/> class with a reference to the inner exception
            that is the cause of this exception.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryLimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.RetryLimitExceededException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryLimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.RetryLimitExceededException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.RetryPolicy">
            <summary>
            Provides the base implementation of the retry mechanism for unreliable actions and transient conditions.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryPolicy.NoRetry">
            <summary>
            Returns a default policy that does no retries, it just invokes action exactly once.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultFixed">
            <summary>
            Returns a default policy that implements a fixed retry interval configured with the default <see cref="T:Microsoft.Practices.TransientFaultHandling.FixedInterval"/> retry strategy.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultProgressive">
            <summary>
            Returns a default policy that implements a progressive retry interval configured with the default <see cref="T:Microsoft.Practices.TransientFaultHandling.Incremental"/> retry strategy.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultExponential">
            <summary>
            Returns a default policy that implements a random exponential retry interval configured with the default <see cref="T:Microsoft.Practices.TransientFaultHandling.FixedInterval"/> retry strategy.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,Microsoft.Practices.TransientFaultHandling.RetryStrategy)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryStrategy">The retry strategy to use for this retry policy.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and default fixed time interval between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and fixed time interval between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The interval between retries.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and back-off parameters for calculating the exponential delay between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time.</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The time value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action)">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <param name="action">A delegate representing the executable action which doesn't return any results.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <typeparam name="TResult">The type of result expected from the executable action.</typeparam>
            <param name="func">A delegate representing the executable action which returns the result of type R.</param>
            <returns>The result from the action.</returns>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Repetitively executes the specified asynchronous task while it satisfies the current retry policy.
            </summary>
            <param name="taskAction">A function that returns a started task (also refered as "hot" task).</param>
            <returns>
            Returns a task that will run to completion if the original task completes successfully (either the
            first time or after retrying transient failures). If the task fails with a non-transient error or
            the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Repetitively executes the specified asynchronous task while it satisfies the current retry policy.
            </summary>
            <param name="taskAction">A function that returns a started task (also refered as "hot" task).</param>
            <param name="cancellationToken">To cancel the retry operation, but not operations that are already in flight or that already completed successfully.</param>
            <returns>
            Returns a task that will run to completion if the original task completes successfully (either the
            first time or after retrying transient failures). If the task fails with a non-transient error or
            the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Repeatedly executes the specified asynchronous task while it satisfies the current retry policy.
            </summary>
            <param name="taskFunc">A function that returns a started task (also refered as "hot" task).</param>
            <returns>
            Returns a task that will run to completion if the original task completes successfully (either the
            first time or after retrying transient failures). If the task fails with a non-transient error or
            the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Repeatedly executes the specified asynchronous task while it satisfies the current retry policy.
            </summary>
            <param name="taskFunc">A function that returns a started task (also refered as "hot" task).</param>
            <param name="cancellationToken">To cancel the retry operation, but not operations that are already in flight or that already completed successfully.</param>
            <returns>
            Returns a task that will run to completion if the original task completes successfully (either the
            first time or after retrying transient failures). If the task fails with a non-transient error or
            the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action{System.AsyncCallback},System.Action{System.IAsyncResult},System.Action,System.Action{System.Exception})">
            <summary>
            Repeatedly executes the specified asynchronous action while it satisfies the current retry policy.
            </summary>
            <param name="beginAction">The begin method of the async pattern.</param>
            <param name="endAction">The end method of the async pattern.</param>
            <param name="successHandler">The action to perform when the async operation is done.</param>
            <param name="faultHandler">The fault handler delegate that will be triggered if the operation cannot be successfully invoked despite retry attempts.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Repeatedly executes the specified asynchronous action while it satisfies the current retry policy.
            </summary>
            <typeparam name="TResult">The type of the object returned by the async operation.</typeparam>
            <param name="beginAction">The begin method of the async pattern.</param>
            <param name="endAction">The end method of the async pattern.</param>
            <param name="successHandler">The action to perform when the async operation is done.</param>
            <param name="faultHandler">The fault handler delegate that will be triggered if the operation cannot be successfully invoked despite retry attempts.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)">
            <summary>
            Notifies the subscribers whenever a retry condition is encountered.
            </summary>
            <param name="retryCount">The current retry attempt count.</param>
            <param name="lastError">The exception which caused the retry conditions to occur.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
        </member>
        <member name="E:Microsoft.Practices.TransientFaultHandling.RetryPolicy.Retrying">
            <summary>
            An instance of a callback delegate that will be invoked whenever a retry condition is encountered.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.RetryPolicy.RetryStrategy">
            <summary>
            Gets the retry strategy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy">
            <summary>
            Gets the instance of the error detection strategy.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.RetryPolicy.TransientErrorIgnoreStrategy">
            <summary>
            Implements a strategy that ignores any transient errors.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.TransientErrorIgnoreStrategy.IsTransient(System.Exception)">
            <summary>
            Always return false.
            </summary>
            <param name="ex">The exception.</param>
            <returns>Returns false.</returns>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.RetryPolicy.TransientErrorCatchAllStrategy">
            <summary>
            Implements a strategy that treats all exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.TransientErrorCatchAllStrategy.IsTransient(System.Exception)">
            <summary>
            Always return true.
            </summary>
            <param name="ex">The exception.</param>
            <returns>Returns true.</returns>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.RetryPolicy`1">
            <summary>
            Provides a generic version of the <see cref="T:Microsoft.Practices.TransientFaultHandling.RetryPolicy"/> class.
            </summary>
            <typeparam name="T">The type implementing the <see cref="T:Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy"/> interface that is responsible for detecting transient conditions.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy`1.#ctor(Microsoft.Practices.TransientFaultHandling.RetryStrategy)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="retryStrategy">The retry strategy to use for this retry policy.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and default fixed time interval between retries.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy`1.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and fixed time interval between retries.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The interval between retries.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy`1.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and back-off parameters for calculating the exponential delay between retries.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time.</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The time value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryPolicy`1.#ctor(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.ExponentialBackoff">
            <summary>
            A retry strategy with back-off parameters for calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.RetryStrategy">
            <summary>
            Represents a retry strategy that determines how many times should be retried and the interval between retries.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultClientRetryCount">
            <summary>
            The default number of retry attempts.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultClientBackoff">
            <summary>
            The default amount of time used when calculating a random delta in the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultMaxBackoff">
            <summary>
            The default maximum amount of time used when calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultMinBackoff">
            <summary>
            The default minimum amount of time used when calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultRetryInterval">
            <summary>
            The default amount of time defining an interval between retries.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultRetryIncrement">
            <summary>
            The default amount of time defining a time increment between retry attempts in the progressive delay policy.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultFirstFastRetry">
            <summary>
            The default flag indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.NoRetry">
            <summary>
            Returns a default policy that does no retries, it just invokes action exactly once.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultFixed">
            <summary>
            Returns a default policy that implements a fixed retry interval configured with <see cref="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultClientRetryCount"/> and <see cref="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultRetryInterval"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultProgressive">
            <summary>
            Returns a default policy that implements a progressive retry interval configured with <see cref="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultClientRetryCount"/>, <see cref="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultRetryInterval"/> and <see cref="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultRetryIncrement"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultExponential">
            <summary>
            Returns a default policy that implements a random exponential retry interval configured with <see cref="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultClientRetryCount"/>, <see cref="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultMinBackoff"/>, <see cref="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultMaxBackoff"/> and <see cref="F:Microsoft.Practices.TransientFaultHandling.RetryStrategy.DefaultClientBackoff"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryStrategy.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.RetryStrategy"/> class. 
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.RetryStrategy.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.RetryStrategy.FastFirstRetry">
            <summary>
            Gets or sets a value indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.TransientFaultHandling.RetryStrategy.Name">
            <summary>
            Gets the name of the retry strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.ExponentialBackoff.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.ExponentialBackoff"/> class. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.ExponentialBackoff.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.ExponentialBackoff"/> class. 
            </summary>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.ExponentialBackoff.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.ExponentialBackoff"/> class. 
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.ExponentialBackoff.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.ExponentialBackoff"/> class. 
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value that will be used for calculating a random delta in the exponential delay between retries.</param>
            <param name="firstFastRetry">
            Indicates whether or not the very first retry attempt will be made immediately 
            whereas the subsequent retries will remain subject to retry interval.
            </param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.ExponentialBackoff.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.FixedInterval">
            <summary>
            A retry strategy with a specified number of retry attempts and a default fixed time interval between retries.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.FixedInterval.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.FixedInterval"/> class. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.FixedInterval.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.FixedInterval"/> class. 
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.FixedInterval.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.FixedInterval"/> class. 
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.FixedInterval.#ctor(System.String,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.FixedInterval"/> class. 
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.FixedInterval.#ctor(System.String,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.FixedInterval"/> class. 
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.FixedInterval.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.Incremental">
            <summary>
            A retry strategy with a specified number of retry attempts and an incremental time interval between retries.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Incremental.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.Incremental"/> class. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Incremental.#ctor(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.Incremental"/> class. 
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Incremental.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.Incremental"/> class. 
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Incremental.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.TransientFaultHandling.Incremental"/> class. 
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.Incremental.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Microsoft.Practices.TransientFaultHandling.ShouldRetry">
            <summary>
            Defines a callback delegate that will be invoked whenever a retry condition is encountered.
            </summary>
            <param name="retryCount">The current retry attempt count.</param>
            <param name="lastException">The exception which caused the retry conditions to occur.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
            <returns>Returns a callback delegate that will be invoked whenever to retry should be attempt.</returns>
        </member>
        <member name="M:Microsoft.Practices.TransientFaultHandling.TaskEx.Delay(System.TimeSpan)">
            <summary>
            Starts a Task that will complete after the specified due time.
            </summary>
            <param name="dueTime">The delay before the returned task completes.</param>
            <returns>
            The timed Task.
            </returns>
        </member>
    </members>
</doc>
