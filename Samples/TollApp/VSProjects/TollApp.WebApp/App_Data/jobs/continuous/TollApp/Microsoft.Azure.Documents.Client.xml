<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Azure.Documents.Client</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Azure.Documents.Client.AccessCondition">
            <summary>
            Represents a set of access conditions to be used for operations in the Azure DocumentDB database service.
            </summary>
            <example>
            The following example shows how to use AccessCondition with DocumentClient.
            <code language="c#">
            <![CDATA[
            // If ETag is current, then this will succeed. Otherwise the request will fail with HTTP 412 Precondition Failure
            await client.ReplaceDocumentAsync(
                readCopyOfBook.SelfLink, 
                new Book { Title = "Moby Dick", Price = 14.99 },
                new RequestOptions 
                { 
                    AccessCondition = new AccessCondition 
                    { 
                        Condition = readCopyOfBook.ETag, 
                        Type = AccessConditionType.IfMatch 
                    } 
                 });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Client.AccessConditionType"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Resource"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.AccessCondition.Type">
            <summary>
            Gets or sets the condition type in the Azure DocumentDB database service.
            </summary>
            <value>
            The condition type. Can be IfMatch or IfNoneMatch.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.AccessCondition.Condition">
            <summary>
            Gets or sets the value of the condition in the Azure DocumentDB database service.
            </summary>
            <value>
            The value of the condition. For <see cref="T:Microsoft.Azure.Documents.Client.AccessConditionType"/> IfMatch and IfNotMatch, this is the ETag that has to be compared to.
            </value>
            <seealso cref="T:Microsoft.Azure.Documents.Resource"/>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.AccessConditionType">
            <summary>
            Specifies the set of <see cref="T:Microsoft.Azure.Documents.Client.AccessCondition"/> types that can be used for operations in the Azure DocumentDB database service. 
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Client.AccessCondition"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.AccessConditionType.IfMatch">
            <summary>
            Check if the resource's ETag value matches the ETag value performed.
            </summary>
            <remarks>
            Used for optimistic concurrency control, e.g., replace the document only if the ETag is identical to the one 
            included in the request to avoid lost updates.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.AccessConditionType.IfNoneMatch">
            <summary>
            Check if the resource's ETag value does not match ETag value performed.
            </summary>
            <remarks>
            Used for caching scenarios to reduce network traffic, e.g., return the document in the payload only if the ETag 
            has changed from the one in the request.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Resource">
            <summary> 
             Represents an abstract resource type in the Azure DocumentDB database service.
             All Azure DocumentDB resources, such as <see cref="T:Microsoft.Azure.Documents.Database"/>, <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/>, and <see cref="T:Microsoft.Azure.Documents.Document"/> extend this abstract type.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.JsonSerializable">
            <summary>
            Represents the base class for Azure DocumentDB database objects and provides methods for serializing and deserializing from JSON.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.SaveTo(System.IO.Stream,Microsoft.Azure.Documents.SerializationFormattingPolicy)">
            <summary> 
            Saves the object to the specified stream in the Azure DocumentDB database service.
            </summary>
            <param name="stream">Saves the object to this output stream.</param>
            <param name="formattingPolicy">Uses an optional serialization formatting policy when saving the object. The default policy is set to None.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.SaveTo(System.IO.Stream,Microsoft.Azure.Documents.SerializationFormattingPolicy,Newtonsoft.Json.JsonSerializerSettings)">
            <summary> 
            Saves the object to the specified stream in the Azure DocumentDB database service.
            </summary>
            <param name="stream">Saves the object to this output stream.</param>
            <param name="formattingPolicy">Uses a custom serialization formatting policy when saving the object.</param>
            <param name="settings">The serializer settings to use.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.SaveTo(System.Text.StringBuilder,Microsoft.Azure.Documents.SerializationFormattingPolicy)">
            <summary> 
            Saves the object to the specified string builder
            </summary>
            <param name="stringBuilder">Saves the object to this output string builder.</param>
            <param name="formattingPolicy">Uses an optional serialization formatting policy when saving the object. The default policy is set to None.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.LoadFrom(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads the object from the specified JSON reader in the Azure DocumentDB database service.
            </summary>
            <param name="reader">Loads the object from this JSON reader.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.LoadFrom(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Loads the object from the specified JSON reader in the Azure DocumentDB database service.
            </summary>
            <param name="reader">Loads the object from this JSON reader.</param>
            <param name="serializerSettings">The JsonSerializerSettings to be used.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.LoadFrom``1(System.IO.Stream)">
            <summary>
            Loads the object from the specified stream in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of the returning object.</typeparam>
            <param name="stream">The stream to load from.</param>
            <returns>The object loaded from the specified stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.LoadFrom``1(System.IO.Stream,Microsoft.Azure.Documents.ITypeResolver{``0},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Loads the object from the specified stream.
            </summary>
            <typeparam name="T">The type of the returning object.</typeparam>
            <param name="stream">The stream to load from.</param>
            <param name="typeResolver">Used to get a correct object from a stream.</param>
            <param name="settings">The JsonSerializerSettings to be used</param>
            <returns>The object loaded from the specified stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.LoadFromWithConstructor``1(System.IO.Stream,System.Func{``0})">
            <summary>
            Deserializes the specified stream using the given constructor in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="stream">The stream to load from.</param>
            <param name="constructorFunction">The constructor used for the returning object.</param>
            <returns>The object loaded from the specified stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.LoadFromWithConstructor``1(System.IO.Stream,System.Func{``0},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the specified stream using the given constructor in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="stream">The stream to load from.</param>
            <param name="constructorFunction">The constructor used for the returning object.</param>
            <param name="settings">The JsonSerializerSettings to be used.</param>
            <returns>The object loaded from the specified stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.ToString">
            <summary>
            Returns the string representation of the object in the Azure DocumentDB database service.
            </summary>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.GetValue``1(System.String)">
            <summary>
            Get the value associated with the specified property name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.GetValue``1(System.String,``0)">
            <summary>
            Get the value associated with the specified property name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.GetValueByPath``1(System.String[],``0)">
            <summary>
            Get the value associated with the specified property name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldNames">Field names which compose a path to the property to be retrieved.</param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.SetValue(System.String,System.Object)">
            <summary>
            Set the value associated with the specified name.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.SetValueByPath``1(System.String[],``0)">
            <summary>
            Set the value associated with the specified property name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldNames">Field names which compose a path to the property to be retrieved.</param>
            <param name="value"></param>
            <returns></returns>
            <remarks>This will overwrite the existing properties</remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Resource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Resource"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Resource.#ctor(Microsoft.Azure.Documents.Resource)">
            <summary>
            Copy constructor for a <see cref="T:Microsoft.Azure.Documents.Resource"/> used in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Resource.SetPropertyValue(System.String,System.Object)">
            <summary>
            Sets property value associated with the specified property name in the Azure DocumentDB database service.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyValue">The property value.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Resource.GetPropertyValue``1(System.String)">
            <summary>
            Gets property value associated with the specified property name from the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Resource.ToByteArray">
            <summary>
            Serialize to a byte array via SaveTo for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Resource.Id">
            <summary>
            Gets or sets the Id of the resource in the Azure DocumentDB database service.
            </summary>
            <value>The Id associated with the resource.</value>
            <remarks>
            <para>
            Every resource within an Azure DocumentDB database account needs to have a unique identifier. 
            Unlike <see cref="P:Microsoft.Azure.Documents.Resource.ResourceId"/>, which is set internally, this Id is settable by the user and is not immutable.
            </para>
            <para>
            When working with document resources, they too have this settable Id property. 
            If an Id is not supplied by the user the SDK will automatically generate a new GUID and assign its value to this property before
            persisting the document in the database. 
            You can override this auto Id generation by setting the disableAutomaticIdGeneration parameter on the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance to true.
            This will prevent the SDK from generating new Ids. 
            </para>
            <para>
            The following characters are restricted and cannot be used in the Id property:
             '/', '\\', '?', '#'
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Resource.ResourceId">
            <summary>
            Gets or sets the Resource Id associated with the resource in the Azure DocumentDB database service.
            </summary>
            <value>
            The Resource Id associated with the resource.
            </value>
            <remarks>
            A Resource Id is the unique, immutable, identifier assigned to each DocumentDB 
            resource whether that is a database, a collection or a document.
            These resource ids are used when building up SelfLinks, a static addressable Uri for each resource within a database account.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Resource.SelfLink">
            <summary>
            Gets the self-link associated with the resource from the Azure DocumentDB database service.
            </summary>
            <value>The self-link associated with the resource.</value> 
            <remarks>
            A self-link is a static addressable Uri for each resource within a database account and follows the Azure DocumentDB resource model.
            E.g. a self-link for a document could be dbs/db_resourceid/colls/coll_resourceid/documents/doc_resourceid
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Resource.AltLink">
            <summary>
            Gets the alt-link associated with the resource from the Azure DocumentDB database service.
            </summary>
            <value>The alt-link associated with the resource.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Resource.Timestamp">
            <summary>
            Gets the last modified timestamp associated with the resource from the Azure DocumentDB database service.
            </summary>
            <value>The last modified timestamp associated with the resource.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Resource.ETag">
            <summary>
            Gets the entity tag associated with the resource from the Azure DocumentDB database service.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources. 
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Common.AsyncCache`2">
            <summary>
            Cache which supports asynchronous value initialization.
            It ensures that for given key only single inintialization funtion is running at any point in time.
            </summary>
            <typeparam name="TKey">Type of keys.</typeparam>
            <typeparam name="TValue">Type of values.</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Documents.Common.AsyncCache`2.GetAsync(`0,`1,System.Func{System.Threading.Tasks.Task{`1}},System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets value corresponding to <paramref name="key"/>.
            </para>
            <para>
            If another initialization function is already running, new initialization function will not be started.
            The result will be result of currently running initialization function.
            </para>
            <para>
            If previous initialization function is successfully completed - value returned by it will be returned unless
            it is equal to <paramref name="obsoleteValue"/>, in which case new initialization function will be started.
            </para>
            <para>
            If previous initialization function failed - new one will be launched.
            </para>
            </summary>
            <param name="key">Key for which to get a value.</param>
            <param name="obsoleteValue">Value which is obsolete and needs to be refreshed.</param>
            <param name="singleValueInitFunc">Initialization function.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Cached value or value returned by initialization function.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Common.AsyncCache`2.RemoveAsync(`0)">
            <summary>
            Remove value from cache and return it if present
            </summary>
            <param name="key"></param>
            <returns>Value if present, default value if not present</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Common.AsyncCache`2.Refresh(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Threading.CancellationToken)">
            <summary>
            Forces refresh of the cached item if it is not being refreshed at the moment.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Common.AsyncLazy`1.IsFaultedOrCancelled">
            <summary>
            True if value initialization failed or was cancelled.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Common.AsyncLazy`1.IsCompleted">
            <summary>
            True if value is initialized - either successfully or unsuccessfully.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Attachment">
            <summary>
            Represents a document attachment in the Azure DocumentDB database service.
            </summary>
            <remarks>
            Each document may contain zero or more attachments containing data of arbitrary formats like images, binary or large text blobs. 
            The Attachment class represents the DocumentDB resource used to store information about the attachment like its location and 
            MIME content type. The payload itself ("Media") is referenced through the MediaLink property. The Attachment class is a DynamicObject 
            and can contain any custom metadata to be persisted. 
            
            Attachments can be created as managed or unmanaged. If attachments are created as managed through DocumentDB, then it is assigned a system 
            generated mediaLink. DocumentDB then automatically performs garbage collection on the media when parent document is deleted.
            
            You can reuse the mediaLink property to store an external location e.g., a file share or an Azure Blob Storage URI. 
            DocumentDB will not perform garbage collection on mediaLinks for external locations.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Attachment.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:Microsoft.Azure.Documents.Attachment"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Attachment.ContentType">
            <summary>
            Gets or sets the MIME content type of the attachment in the Azure DocumentDB database service.
            </summary>
            <value>
            The MIME content type of the attachment.
            </value>
            <remarks>For example, set to "text/plain" for text files, "image/jpeg" for images.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Attachment.MediaLink">
            <summary>
            Gets or sets the media link associated with the attachment content in the Azure DocumentDB database service.
            </summary>
            <value>
            The media link associated with the attachment content.
            </value>
            <remarks>DocumentDB supports both managed and unmanaged attachments.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.DocumentClientException">
            <summary>
            The base class for client exceptions in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.Error">
            <summary>
            Gets the error code associated with the exception in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.ActivityId">
            <summary>
            Gets the activity ID associated with the request from the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.RetryAfter">
            <summary>
            Gets the recommended time interval after which the client can retry failed requests from the Azure DocumentDB database service
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.ResponseHeaders">
            <summary>
            Gets the headers associated with the response from the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.StatusCode">
            <summary>
            Gets or sets the request status code in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.StatusDescription">
            <summary>
            Gets the textual description of request completion status.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.RequestCharge">
            <summary>
            Cost of the request in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.Message">
            <summary>
            Gets a message that describes the current exception from the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.RequestUri">
            <summary>
            Gets the request uri from the current exception from the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Base64Helper.SecureStringToNativeBytes(System.Security.SecureString,System.Int32,System.IntPtr@,System.UInt32@)">
            <summary>
            Interprets <paramref name="secureString"/> as a Base64 string, and decodes it into a native byte array,
            which it returns.
            Avoids loading either the original Base64 or decoded binary into managed heap.
            </summary>
            <param name="secureString">Base64 string to decode</param>
            <param name="secureStringLength">Length of the Base64 string to decode</param>
            <param name="bytes">
              An IntPtr allocated with Marshal.AllocCoTaskMem, which, when the user is done, 
              MUST be zeroed out and then freed with Marshal.FreeCoTaskMem by the caller.
            </param>
            <param name="bytesLength">Number of bytes in the decoded binary currentCharacter</param>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.ChangeFeedOptions">
            <summary>
            Specifies the options associated with change feed methods (enumeration operations) in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ChangeFeedOptions.MaxItemCount">
            <summary>
            Gets or sets the maximum number of items to be returned in the enumeration operation in the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum number of items to be returned in the enumeration operation.
            </value> 
            <remarks>
            Used for query pagination.
            '-1' Used for dynamic page size.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ChangeFeedOptions.RequestContinuation">
            <summary>
            Gets or sets the request continuation token in the Azure DocumentDB database service.
            </summary>
            <value>
            The request continuation token.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ChangeFeedOptions.SessionToken">
            <summary>
            Gets or sets the session token for use with session consistency in the Azure DocumentDB database service.
            </summary>
            <value>
            The session token for use with session consistency.
            </value>
            <remarks>
            Useful for applications that are load balanced across multiple Microsoft.Azure.Documents.Client.DocumentClient instances. 
            In this case, round-trip the token from end user to the application and then back to DocumentDB so that a session
            can be preserved across servers.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ChangeFeedOptions.PartitionKeyRangeId">
            <summary>
            Gets or sets the partition key range id for the current request in the Azure DocumentDB database service.
            </summary>
            <remarks>
            ChangeFeed requests can be executed against specific partition key ranges. 
            This is used to process the change feed in parallel across multiple consumers.
            </remarks>
            <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/>
            <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPartitionKeyRangeFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ChangeFeedOptions.StartFromBeginning">
            <summary>
            Gets or sets whether change feed in the Azure DocumentDB database service 
            should start from beginning (true) or from current (false).
            By default it's start from current (false).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ChangeFeedOptions.StartTime">
            <summary>
            Gets or sets the time (exclusive) to start looking for changes after.
            If this is specified, StartFromBeginning is ignored.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Conflict">
            <summary>
            This is the conflicting resource resulting from a concurrent async operation in the Azure DocumentDB database service.
            </summary> 
            <remarks>
            On rare occasions, during an async operation (insert, replace and delete), a version conflict may occur on a resource.
            The conflicting resource is persisted as a Conflict resource.  
            Inspecting Conflict resources will allow you to determine which operations and resources resulted in conflicts.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Conflict.#ctor">
            <summary>
            Initialize a new instance of a Conflict class in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Conflict.GetResource``1">
            <summary>
            Gets the conflicting resource in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The returned type of conflicting resource.</typeparam>
            <returns>The conflicting resource.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Conflict.SourceResourceId">
            <summary>
            Gets the resource ID for the conflict in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Conflict.OperationKind">
            <summary>
            Gets the operation that resulted in the conflict in the Azure DocumentDB database service.
            </summary>
            <value>
            One of the values of the <see cref="P:Microsoft.Azure.Documents.Conflict.OperationKind"/> enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Conflict.ResourceType">
            <summary>
            Gets the type of the conflicting resource in the Azure DocumentDB database service.
            </summary>
            <value>
            The type of the resource.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.ConsistencyLevel">
            <summary> 
            These are the consistency levels supported by the Azure DocumentDB database service.
            </summary>
            <remarks>
            The requested Consistency Level must match or be weaker than that provisioned for the database account.
            For more information on consistency levels, please see <see>http://azure.microsoft.com/documentation/articles/documentdb-consistency-levels/"</see> Consistency Levels article.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.ConsistencyLevel.Strong">
            <summary>
            Strong Consistency guarantees that read operations always return the value that was last written.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.ConsistencyLevel.BoundedStaleness">
            <summary>
            Bounded Staleness guarantees that reads are not too out-of-date. This can be configured based on number of operations (MaxStalenessPrefix) 
            or time (MaxStalenessIntervalInSeconds).  For more information on MaxStalenessPrefix and MaxStalenessIntervalInSeconds, please see <see cref="T:Microsoft.Azure.Documents.ConsistencyPolicy"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.ConsistencyLevel.Session">
            <summary>
            Session Consistency guarantees monotonic reads (you never read old data, then new, then old again), monotonic writes (writes are ordered) 
            and read your writes (your writes are immediately visible to your reads) within any single session. 
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.ConsistencyLevel.Eventual">
            <summary>
            Eventual Consistency guarantees that reads will return a subset of writes. All writes 
            will be eventually be available for reads.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.ConsistencyLevel.ConsistentPrefix">
            <summary>
            ConsistentPrefix Consistency guarantees that reads will return some prefix of all writes with no gaps.
            All writes will be eventually be available for reads.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.ConsistencyPolicy">
            <summary>
            Represents the consistency policy of a database account of the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.ConsistencyPolicy.#ctor">
            <summary>
            Default constructor for ConsistencyPolicy class in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ConsistencyPolicy.DefaultConsistencyLevel">
            <summary>
            Get or set the default consistency level in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ConsistencyPolicy.MaxStalenessPrefix">
            <summary>
            For bounded staleness consistency, the maximum allowed staleness
            in terms difference in sequence numbers (aka version) in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ConsistencyPolicy.MaxStalenessIntervalInSeconds">
            <summary>
            For bounded staleness consistency, the maximum allowed staleness
            in terms time interval in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.ConsistencyReader">
            <summary>
            ConsistencyReader has a dependency on both StoreReader and QuorumReader. For Bounded Staleness and Strong Consistency, it uses the Quorum Reader
            to converge on a read from read quorum number of replicas. 
            For Session and Eventual Consistency, it directly uses the store reader.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Database">
            <summary>
            Represents a database in the Azure DocumentDB account.
            </summary>
            <remarks>
            Each Azure DocumentDB database account can have zero or more databases. A database in Azure DocumentDB is a logical container for 
            document collections and users.
            Refer to <see>http://azure.microsoft.com/documentation/articles/documentdb-resources/#databases</see> for more details on databases.
            </remarks>
            <example>
            The example below creates a new Database with an Id property of 'MyDatabase'.
            <code language="c#">
            <![CDATA[ 
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            </example>
            <example> 
            The example below creates a collection within this database with OfferThroughput set to 10000.
            <code language="c#">
            <![CDATA[
            DocumentCollection coll = await client.CreateDocumentCollectionAsync(db.SelfLink,
                new DocumentCollection { Id = "MyCollection" }, 
                new RequestOptions { OfferThroughput = 10000} );
            ]]>
            </code>
            </example>
            <example>
            The example below queries for a Database by Id to retrieve the SelfLink.
            <code language="c#">
            <![CDATA[
            using Microsoft.Azure.Documents.Linq;
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "MyDatabase").AsEnumerable().FirstOrDefault();
            string databaseLink = database.SelfLink;
            ]]>
            </code>
            </example>    
            <example>
            The example below deletes the database using its SelfLink property.
            <code language="c#">
            <![CDATA[
            await client.DeleteDatabaseAsync(db.SelfLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Database.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Database"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Database.CollectionsLink">
            <summary>
            Gets the self-link for collections from the Azure DocumentDB database service.
            </summary>
            <value>
            The self-link for collections in the database.
            </value>
            <remarks>
            Every Azure DocumentDB resource has a static, immutable, addressable URI. 
            For collections, this takes the form of;
            /dbs/db_rid/colls/ where db_rid represents the value of the database's resource id.
            A resource id is not the id given to a database on creation, but an internally generated immutable id.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Database.UsersLink">
            <summary>
            Gets the self-link for users from the Azure DocumentDB database service.
            </summary>
            <value>
            The self-link for users in the database.
            </value>
            <remarks>
            Every Azure DocumentDB resource has a static, immutable, addressable URI. 
            For users, this takes the form of;
            /dbs/db_rid/users/ where db_rid represents the value of the database's resource id.
            A resource id is not the id given to a database on creation, but an internally generated immutable id.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.DatabaseAccount">
            <summary> 
            Represents a DatabaseAccount. A DatabaseAccount is the container for databases in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.DatabaseAccount.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.DatabaseAccount"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.DatabasesLink">
            <summary>
            Gets the self-link for Databases in the databaseAccount from the Azure DocumentDB database service.
            </summary>
            <value>
            The self-link for Databases in the databaseAccount.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.MediaLink">
            <summary>
            Gets the self-link for Media in the databaseAccount from the Azure DocumentDB database service.
            </summary>
            <value>
            The self-link for Media in the databaseAccount.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.WritableLocations">
            <summary>
            Gets the list of locations reprsenting the writable regions of
            this database account from the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.ReadableLocations">
            <summary>
            Gets the list of locations reprsenting the readable regions of
            this database account from the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.MaxMediaStorageUsageInMB">
            <summary>
            Gets the storage quota for media storage in the databaseAccount from the Azure DocumentDB database service.
            </summary>
            <value>
            The storage quota in measured MBs.
            </value>
            <remarks>
            This value is retrieved from the gateway.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.MediaStorageUsageInMB">
            <summary>
            Gets the current attachment content (media) usage in MBs from the Azure DocumentDB database service.
            </summary>
            <value>
            The attachment content (media) usage in MBs.
            </value>
            <remarks>
            The value is retrieved from the gateway. The value is returned from cached information updated periodically 
            and is not guaranteed to be real time.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.ConsumedDocumentStorageInMB">
            <summary>
            The cumulative sum of current sizes of created collection in MB
            Value is returned from cached information which is updated periodically and is not guaranteed to be real time
            TODO remove this property tfs 4442779
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.ReservedDocumentStorageInMB">
            <summary>
            The cumulative sum of maximum sizes of created collection in MB
            Value is returned from cached information which is updated periodically and is not guaranteed to be real time
            TODO remove this property tfs 4442779
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.ProvisionedDocumentStorageInMB">
            <summary>
            The provisioned documented storage capacity for the database account
            Value is returned from cached information which is updated periodically and is not guaranteed to be real time
            TODO remove this property tfs 4442779
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.ConsistencyPolicy">
            <summary>
            Gets the <see cref="P:Microsoft.Azure.Documents.DatabaseAccount.ConsistencyPolicy"/> settings from the Azure DocumentDB database service.
            </summary>
            <value>
            The ConsistencyPolicy settings.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.AddressesLink">
            <summary>
            Gets the self-link for Address Routing Table in the databaseAccount
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.ReplicationPolicy">
            <summary>
            Gets the ReplicationPolicy settings
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.SystemReplicationPolicy">
            <summary>
            Gets the SystemReplicationPolicy settings
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.DataType">
            <summary>
            Defines the target data type of an index path specification in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.DataType.Number">
            <summary>
            Represents a numeric data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.DataType.String">
            <summary>
            Represents a string data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.DataType.Point">
            <summary>
            Represent a point data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.DataType.LineString">
            <summary>
            Represent a line string data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.DataType.Polygon">
            <summary>
            Represent a polygon data type.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.DefaultTrace.InitEventListener">
            <summary>
            Only client need to init this listener
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.DefaultTrace.TraceMetrics(System.String,System.Object[])">
             <summary>
             Emit a trace for a set of metric values.
             
             This is intended to be used next to MDM metrics
             
             Details:
             Produce a semi-typed trace format as a pipe delimited list of metrics values.
             
             'TraceMetrics' prefix provides a search term for indexing.
             
             'name' is an identifier to correlate to call site
            
             Example: TraceMetric|LogServicePoolInfo|0|123|1
             
             </summary>
             <param name="name">metric name</param>
             <param name="values">sequence of values to be emitted in the trace</param>
        </member>
        <member name="T:Microsoft.Azure.Documents.DelayTaskTimer">
            <summary>
            This class is an optimized version of Task.Delay for performance which uses System Timer for keeping track of the specified timeout 
            and returns a Task that you can await on. This is preferred over using CancellationTokenSource with Task.Delay since this implementation doesn't 
            throws any exception if the Task is cancelled which is much cleaner approach since we don't see any first chance exceptions being thrown 
            whenever a timer task is cancelled. Marking it sealed as it will boost the performance by some factor.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.DelayTaskTimer.#ctor(System.Double)">
            <summary>
            Constructor that takes in the specified timeout for the delay task
            </summary>
            <param name="timeoutInSeconds"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.DelayTaskTimer.StartTimer">
            <summary>
            Starts the timer for the timeout period
            </summary>
            <returns>Returns the Task upon which you can await on until completion</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.DelayTaskTimer.CancelTimer">
            <summary>
            Cancels the timer
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.PooledTimer.beginTicks">
            <summary>
            keeps track of the timer was started, timeout time is calculated using this
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.PooledTimer.timeoutPeriod">
            <summary>
            TimeSpan to timeout
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.PooledTimer.timerPool">
            <summary>
            PooledTimer subscribes to the TimerPool to get notified when the timeout has expired
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.PooledTimer.tcs">
            <summary>
            tcs is set to completed state if the timeout occurs else its set to cancelled state 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PooledTimer.StartTimerAsync">
            <summary>
            Starts the timer for the timeout period specfied in constructor
            </summary>
            <returns>Returns the Task upon which you can await on until completion</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.PooledTimer.CancelTimer">
            <summary>
            Cancels the timer by setting the tcs state to cancelled
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PooledTimer.FireTimeout">
            <summary>
            Invoked by the TimerPool when the timeout period has elapsed
            If the state is already cancelled, its a noop else it changes the state to completed
            signalling a timeout on the TaskWaiter
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.PooledTimer.TimeoutTicks">
            <summary>
            this is the expected ticks when this timer should be fired
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.PooledTimer.Timeout">
            <summary>
            amount of time in seconds after which the timeout should be fired
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.TimerPool">
            <summary>
            This class reduces the overhead associated with creating and disposing timers created for shortlived activities
            It creates a PooledTimer which when started, returns a Task that you can await on and which will complete if the timeout expires
            This is preferred over DelayTaskTimer since it only creates a single timer which is used for the lifetime of the pool.
            It can *only* fire the timers at the minimum granularity configured.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.TimerPool.GetPooledTimer(System.Int32)">
            <summary>
            get a timer with timeout specified in seconds
            </summary>
            <param name="timeoutInSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.TimerPool.SubscribeForTimeouts(Microsoft.Azure.Documents.PooledTimer)">
            <summary>
            Start the countdown for timeout
            </summary>
            <param name="pooledTimer"></param>
        </member>
        <member name="T:Microsoft.Azure.Documents.Document">
            <summary>
            Represents a document in the Azure DocumentDB database service.
            </summary>
            <remarks> 
            A document is a structured JSON document. There is no set schema for the JSON documents, and a document may contain any 
            number of custom properties as well as an optional list of attachments. Document is an application resource and can be
            authorized using the master key or resource keys.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Document"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Document.AttachmentsLink">
            <summary>
            Gets the self-link corresponding to attachments of the document from the Azure DocumentDB database service.
            </summary>
            <value>
            The self-link corresponding to attachments of the document.
            </value>
            <remarks>
            Every document can have between zero and many attachments. The attachments link contains a feed of attachments that belong to 
            the document.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Document.TimeToLive">
            <summary>
            Gets or sets the time to live in seconds of the document in the Azure DocumentDB database service.
            </summary>
            <value>
            It is an optional property. 
            A valid value must be either a nonzero positive integer, '-1', or <c>null</c>.
            By default, TimeToLive is set to null meaning the document inherits the collection's <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/>.
            The unit of measurement is seconds. The maximum allowed value is 2147483647.
            When the value is '-1', it means never expire regardless of the collection's <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> value.
            </value>
            <remarks>
            <para>
            The final time-to-live policy of a document is evaluated after consulting the collection's
            <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/>.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> is <c>null</c>, the document inherits the collection's
            <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/>.
            If the collection's <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> is a nonzero positive integer,
            then the document will inherit that value as its time-to-live in seconds, and will be expired
            after the default time-to-live in seconds since its last write time. The expired documents will be deleted in background.
            Otherwise, the document will never expire.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> is '-1', the document will never expire regardless of the collection's
            <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> value.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> is a nonzero positive integer, need to check the collection's
            <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/>.
            If the collection's <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> is <c>null</c>, which means the time-to-live
            has been turned off on the collection, and the document's <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> should be disregarded and the document
            will never expire.
            Otherwise, the document's <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> will be honored. The document will be expired
            after the default time-to-live in seconds since its last write time. The expired documents will be deleted in background.
            </para>
            <para>
            The table below shows an example of the matrix to evaluate the final time-to-live policy given a collection's
            <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> and a document's <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/>.
            </para>
            <list type="table">
            <listheader>
            <term>Collection</term>
            <description>Matrix</description>
            </listheader>
            <item>
            <term>DefaultTimeToLive = null</term>
            <description>
            <list type="table">
            <listheader>
            <term>Document</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>TimeToLive = null</term>
            <description>TTL is disabled. The document will never expire (default).</description>
            </item>
            <item>
            <term>TimeToLive = -1</term>
            <description>TTL is disabled. The document will never expire.</description>
            </item>
            <item>
            <term>TimeToLive = 2000</term>
            <description>TTL is disabled. The document will never expire.</description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>DefaultTimeToLive = -1</term>
            <description>
            <list type="table">
            <listheader>
            <term>Document</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>TimeToLive = null</term>
            <description>TTL is enabled. The document will never expire (default).</description>
            </item>
            <item>
            <term>TimeToLive = -1</term>
            <description>TTL is enabled. The document will never expire.</description>
            </item>
            <item>
            <term>TimeToLive = 2000</term>
            <description>TTL is enabled. The document will expire after 2000 seconds.</description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>DefaultTimeToLive = 1000</term>
            <description>
            <list type="table">
            <listheader>
            <term>Document</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>TimeToLive = null</term>
            <description>TTL is enabled. The document will expire after 1000 seconds (default).</description>
            </item>
            <item>
            <term>TimeToLive = -1</term>
            <description>TTL is enabled. The document will never expire.</description>
            </item>
            <item>
            <term>TimeToLive = 2000</term>
            <description>TTL is enabled. The document will expire after 2000 seconds.</description>
            </item>
            </list>
            </description>
            </item>
            </list>
            </remarks>
            <example>
            The example below removes 'ttl' from document content.
            The document will inherit the collection's <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> as its time-to-live value.
            <code language="c#">
            <![CDATA[
                document.TimeToLive = null;
            ]]>
            </code>
            </example>
            <example>
            The example below ensures that the document should never expire regardless.
            <code language="c#">
            <![CDATA[
                document.TimeToLive = -1;
            ]]>
            </code>
            </example>
            <example>
            The example below sets the time-to-live in seconds on a document.
            The document will expire after 1000 seconds since its last write time when the collection's <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/>
            is not <c>null</c>.
            <code language="c#">
            <![CDATA[
                document.TimeToLive = 1000;
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>     
        </member>
        <member name="T:Microsoft.Azure.Documents.DocumentCollection">
            <summary>
            Represents a document collection in the Azure DocumentDB database service. A collection is a named logical container for documents. 
            </summary>
            <remarks>
            A database may contain zero or more named collections and each collection consists of zero or more JSON documents. 
            Being schema-free, the documents in a collection do not need to share the same structure or fields. Since collections are application resources, 
            they can be authorized using either the master key or resource keys.
            Refer to <see>http://azure.microsoft.com/documentation/articles/documentdb-resources/#collections</see> for more details on collections.
            </remarks>
            <example>
            The example below creates a new partitioned collection with 50000 Request-per-Unit throughput.
            The partition key is the first level 'country' property in all the documents within this collection.
            <code language="c#">
            <![CDATA[
            DocumentCollection collection = await client.CreateDocumentCollectionAsync(
                databaseLink,
                new DocumentCollection 
                { 
                    Id = "MyCollection",
                    PartitionKey = new PartitionKeyDefinition
                    {
                        Paths = new Collection<string> { "/country" }
                    }
                }, 
                new RequestOptions { OfferThroughput = 50000} ).Result;
            ]]>
            </code>
            </example>
            <example>
            The example below creates a new collection with OfferThroughput set to 10000.
            <code language="c#">
            <![CDATA[
            DocumentCollection collection = await client.CreateDocumentCollectionAsync(
                databaseLink,
                new DocumentCollection { Id = "MyCollection" }, 
                new RequestOptions { OfferThroughput = 10000} ).Result;
            ]]>
            </code>
            </example>
            <example>
            The example below creates a new collection with a custom indexing policy.
            <code language="c#">
            <![CDATA[
            DocumentCollection collectionSpec = new DocumentCollection { Id ="MyCollection" };
            collectionSpec.IndexingPolicy.Automatic = true;
            collectionSpec.IndexingPolicy.IndexingMode = IndexingMode.Consistent;
            collection = await client.CreateDocumentCollectionAsync(database.SelfLink, collectionSpec);
            ]]>
            </code>
            </example>
            <example>
            The example below creates a document of type Book inside this collection.
            <code language="c#">
            <![CDATA[
            Document doc = await client.CreateDocumentAsync(collection.SelfLink, new Book { Title = "War and Peace" });
            ]]>
            </code>
            </example>
            <example>
            The example below queries for a Database by Id to retrieve the SelfLink.
            <code language="c#">
            <![CDATA[
            using Microsoft.Azure.Documents.Linq;
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink).Where(c => c.Id == "myColl").AsEnumerable().FirstOrDefault();
            string collectionLink = collection.SelfLink;
            ]]>
            </code>
            </example>
            <example>
            The example below deletes this collection.
            <code language="c#">
            <![CDATA[
            await client.DeleteDocumentCollectionAsync(collection.SelfLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.IndexingPolicy"/>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.DocumentCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.IndexingPolicy">
            <summary>
            Gets the <see cref="P:Microsoft.Azure.Documents.DocumentCollection.IndexingPolicy"/> associated with the collection from the Azure DocumentDB database service. 
            </summary>
            <value>
            The indexing policy associated with the collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.DocumentsLink">
            <summary>
            Gets the self-link for documents in a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            The self-link for documents in a collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.StoredProceduresLink">
            <summary>
            Gets the self-link for stored procedures in a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            The self-link for stored procedures in a collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.TriggersLink">
            <summary>
            Gets the self-link for triggers in a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            The self-link for triggers in a collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.UserDefinedFunctionsLink">
            <summary>
            Gets the self-link for user defined functions in a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            The self-link for user defined functions in a collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.ConflictsLink">
            <summary>
            Gets the self-link for conflicts in a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            The self-link for conflicts in a collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.OfferResourceLink">
            <summary>
            Gets the self-link for the effective offer resource for the collection from the Azure DocumentDB database service.
            </summary>
            <value>
            The self-link for the effective offer resource for the collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.IndexingSchemeVersion">
            <summary>
            Gets the indexing scheme version of the collection.
            </summary>
            <value>
            The indexing scheme version of the collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.PartitionKey">
            <summary>
            Gets or sets <see cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/> object in the Azure DocumentDB database service.
            </summary>
            <value>
            <see cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/> object.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive">
            <summary>
            Gets the default time to live in seconds for documents in a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            It is an optional property.
            A valid value must be either a nonzero positive integer, '-1', or <c>null</c>.
            By default, DefaultTimeToLive is set to null meaning the time to live is turned off for the collection.
            The unit of measurement is seconds. The maximum allowed value is 2147483647.
            </value>
            <remarks>
            <para>
            The <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> will be applied to all the documents in the collection as the default time-to-live policy.
            The individual document could override the default time-to-live policy by setting its <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/>.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> is <c>null</c>, the time-to-live will be turned off for the collection.
            It means all the documents will never expire. The individual document's <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> will be disregarded.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> is '-1', the time-to-live will be turned on for the collection.
            By default, all the documents will never expire. The individual document could be given a specific time-to-live value by setting its
            <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/>. The document's <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> will be honored, and the expired documents
            will be deleted in background.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> is a nonzero positive integer, the time-to-live will be turned on for the collection.
            And a default time-to-live in seconds will be applied to all the documents. A document will be expired after the
            specified <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> value in seconds since its last write time.
            The individual document could override the default time-to-live policy by setting its <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/>.
            Please refer to the <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> for more details about evaluating the final time-to-live policy of a document.
            </para>
            </remarks>
            <example>
            The example below disables time-to-live on a collection.
            <code language="c#">
            <![CDATA[
                collection.DefaultTimeToLive = null;
            ]]>
            </code>
            </example>
            <example>
            The example below enables time-to-live on a collection. By default, all the documents never expire.
            <code language="c#">
            <![CDATA[
                collection.DefaultTimeToLive = -1;
            ]]>
            </code>
            </example>
            <example>
            The example below enables time-to-live on a collection. By default, the document will expire after 1000 seconds
            since its last write time.
            <code language="c#">
            <![CDATA[
                collection.DefaultTimeToLive = 1000;
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.SchemaDiscoveryPolicy">
            <summary>
            Gets the <see cref="P:Microsoft.Azure.Documents.DocumentCollection.SchemaDiscoveryPolicy"/> associated with the collection. 
            </summary>
            <value>
            The schema discovery policy associated with the collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.UniqueKeyPolicy">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Azure.Documents.DocumentCollection.UniqueKeyPolicy"/> that guarantee uniqueness of documents in collection in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.Statistics">
            <summary>
            Gets a collection of <see cref="T:Microsoft.Azure.Documents.PartitionStatistics"/> object in the Azure DocumentDB database service.
            </summary>
            <value>
            <see cref="T:Microsoft.Azure.Documents.PartitionStatistics"/> object.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.DocumentResponse`1">
            <summary>
            Represents the template class used by methods returning single objects in the Azure DocumentDB database service.
            </summary> 
            <typeparam name="TDocument">the document type.</typeparam>
            <remarks>
            Response from type-specific read of Document resource(ReadDocumentAsync{TDocument}) returns the response wrapped in a 
            DocumentResponse object. This contains the metadata from the response headers from the Azure DocumentDB call including
            the request units (RequestCharge), activity ID, quotas/usage of resources and the typed document object(TDocument).
            </remarks>
            <example>
            The following example extracts the CustomerName property, request units consumed, activity ID and StatusCode from a ReadDocumentAsync{Customer} call.
            <code language="c#">
            <![CDATA[
            DocumentResponse<Customer> response = await client.ReadDocumentAsync<Customer>(documentLink);
            Console.WriteLine(response.Document.CustomerName);
            Console.WriteLine(response.RequestCharge);
            Console.WriteLine(response.ActivityId); 
            Console.WriteLine(response.StatusCode); // HttpStatusCode.Created or 201
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.ResourceResponseBase">
            <summary>
            Represents the non-resource specific service response headers returned by any request in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.IResourceResponseBase">
            <summary>
            Represents the non-resource specific service response headers returned by any request in the Azure DocumentDB database service.
            </summary>
            <remarks>
            Interface exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.DatabaseQuota">
            <summary>
            Gets the maximum quota for database resources within the account. 
            </summary>
            <value>
            The maximum quota for the account.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.DatabaseUsage">
            <summary>
            The current number of database resources within the account.
            </summary>
            <value>
            The number of databases.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.CollectionQuota">
            <summary>
            Gets the maximum quota for collection resources within an account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.CollectionUsage">
            <summary>
            The current number of collection resources within the account.
            </summary>
            <value>
            The number of collections.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.UserQuota">
            <summary>
            Gets the maximum quota for user resources within an account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.UserUsage">
            <summary>
            The current number of user resources within the account.
            </summary>
            <value>
            The number of users.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.PermissionQuota">
            <summary>
            Gets the maximum quota for permission resources within an account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.PermissionUsage">
            <summary>
            The current number of permission resources within the account. 
            </summary>
            <value>
            The number of permissions.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.CollectionSizeQuota">
            <summary>
            Maximum size of a collection in kilobytes.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.CollectionSizeUsage">
            <summary>
            Current size of a collection in kilobytes. 
            </summary>
            <value>
            Current collection size in kilobytes.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.DocumentQuota">
            <summary>
            Maximum size of a documents within a collection in kilobytes.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.DocumentUsage">
            <summary>
            Current size of documents within a collection in kilobytes. 
            </summary>
            <value>
            Current documents size in kilobytes.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.StoredProceduresQuota">
            <summary>
            Gets the maximum quota of stored procedures for a collection.
            </summary>
            <value>
            The maximum quota.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.StoredProceduresUsage">
            <summary>
            The current number of stored procedures for a collection.
            </summary>
            <value>
            Current number of stored procedures.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.TriggersQuota">
            <summary>
            Gets the maximum quota of triggers for a collection. 
            </summary>
            <value>
            The maximum quota.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.TriggersUsage">
            <summary>
            The current number of triggers for a collection.
            </summary>
            <value>
            Current number of triggers.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.UserDefinedFunctionsQuota">
            <summary>
            Gets the maximum quota of user defined functions for a collection. 
            </summary>
            <value>
            Maximum quota.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.UserDefinedFunctionsUsage">
            <summary>
            The current number of user defined functions for a collection.
            </summary>
            <value>
            Current number of user defined functions.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.ActivityId">
            <summary>
            Gets the activity ID for the request.
            </summary>
            <value>
            The activity ID for the request.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.SessionToken">
            <summary>
            Gets the session token for use in sesssion consistency reads.
            </summary>
            <value>
            The session token for use in session consistency.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.StatusCode">
            <summary>
            Gets the HTTP status code associated with the response.
            </summary>
            <value>
            The HTTP status code associated with the response.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.MaxResourceQuota">
            <summary>
            Gets the maximum size limit for this entity.
            </summary>
            <value>
            The maximum size limit for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.CurrentResourceQuotaUsage">
            <summary>
            Gets the current size of this entity.
            </summary>
            <value>
            The current size for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.ResponseStream">
            <summary>
            Gets the underlying stream of the response.
            </summary>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.RequestCharge">
            <summary>
            Gets the request charge for this request.
            </summary>
            <value>
            The request charge measured in reqest units.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.ResponseHeaders">
            <summary>
            Gets the response headers.
            </summary>
            <value>
            The response headers.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.ContentLocation">
            <summary>
            The content parent location, for example, dbs/foo/colls/bar
            </summary>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.IndexTransformationProgress">
            <summary>
            Gets the progress of an index transformation, if one is underway.
            </summary>
            <value>
            An integer from 0 to 100 representing percentage completion of the index transformation process.
            Returns -1 if the index transformation progress header could not be found.
            </value>
            <remarks>
            An index will be rebuilt when the IndexPolicy of a collection is updated.
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponseBase.LazyIndexingProgress">
            <summary>
            Gets the progress of lazy indexing.
            </summary>
            <value>
            An integer from 0 to 100 representing percentage completion of the lazy indexing process.
            Returns -1 if the lazy indexing progress header could not be found.
            </value>
            <remarks>
            Lazy indexing progress only applies to the collection with indexing mode Lazy.
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceResponseBase.#ctor">
            <summary>
            Constructor exposed for mocking purposes for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.DatabaseQuota">
            <summary>
            Gets the maximum quota for database resources within the account from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.DatabaseUsage">
            <summary>
            Gets the current number of database resources within the account from the Azure DocumentDB database service.
            </summary>
            <value>
            The number of databases.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.CollectionQuota">
            <summary>
            Gets the maximum quota for collection resources within an account from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.CollectionUsage">
            <summary>
            Gets the current number of collection resources within the account from the Azure DocumentDB database service.
            </summary>
            <value>
            The number of collections.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.UserQuota">
            <summary>
            Gets the maximum quota for user resources within an account from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.UserUsage">
            <summary>
            Gets the current number of user resources within the account from the Azure DocumentDB database service.
            </summary>
            <value>
            The number of users.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.PermissionQuota">
            <summary>
            Gets the maximum quota for permission resources within an account from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.PermissionUsage">
            <summary>
            Gets the current number of permission resources within the account from the Azure DocumentDB database service.
            </summary>
            <value>
            The number of permissions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.CollectionSizeQuota">
            <summary>
            Gets the maximum size of a collection in kilobytes from the Azure DocumentDB database service.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.CollectionSizeUsage">
            <summary>
            Gets the current size of a collection in kilobytes from the Azure DocumentDB database service.
            </summary>
            <value>
            Current collection size in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.DocumentQuota">
            <summary>
            Gets the maximum size of a documents within a collection in kilobytes from the Azure DocumentDB database service.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.DocumentUsage">
            <summary>
            Gets the current size of documents within a collection in kilobytes from the Azure DocumentDB database service.
            </summary>
            <value>
            Current documents size in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.StoredProceduresQuota">
            <summary>
            Gets the maximum quota of stored procedures for a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.StoredProceduresUsage">
            <summary>
            Gets the current number of stored procedures for a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            Current number of stored procedures.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.TriggersQuota">
            <summary>
            Gets the maximum quota of triggers for a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.TriggersUsage">
            <summary>
            Gets the current number of triggers for a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            Current number of triggers.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.UserDefinedFunctionsQuota">
            <summary>
            Gets the maximum quota of user defined functions for a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.UserDefinedFunctionsUsage">
            <summary>
            Gets the current number of user defined functions for a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            Current number of user defined functions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.DocumentCount">
            <summary>
            Gets the current count of documents within a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            Current count of documents.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.ActivityId">
            <summary>
            Gets the activity ID for the request from the Azure DocumentDB database service.
            </summary>
            <value>
            The activity ID for the request.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.SessionToken">
            <summary>
            Gets the session token for use in sesssion consistency reads from the Azure DocumentDB database service.
            </summary>
            <value>
            The session token for use in session consistency.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.StatusCode">
            <summary>
            Gets the HTTP status code associated with the response from the Azure DocumentDB database service.
            </summary>
            <value>
            The HTTP status code associated with the response.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.MaxResourceQuota">
            <summary>
            Gets the maximum size limit for this entity from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum size limit for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.CurrentResourceQuotaUsage">
            <summary>
            Gets the current size of this entity from the Azure DocumentDB database service.
            </summary>
            <value>
            The current size for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.ResponseStream">
            <summary>
            Gets the underlying stream of the response from the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.RequestCharge">
            <summary>
            Gets the request charge for this request from the Azure DocumentDB database service.
            </summary>
            <value>
            The request charge measured in reqest units.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.IsRUPerMinuteUsed">
            <summary>
            Gets the flag associated with the response from the Azure DocumentDB database service whether this request is served from Request Units(RUs)/minute capacity or not.
            </summary>
            <value>
            True if this request is served from RUs/minute capacity. Otherwise, false.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.ResponseHeaders">
            <summary>
            Gets the response headers from the Azure DocumentDB database service.
            </summary>
            <value>
            The response headers.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.ContentLocation">
            <summary>
            The content parent location, for example, dbs/foo/colls/bar in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.IndexTransformationProgress">
            <summary>
            Gets the progress of an index transformation, if one is underway from the Azure DocumentDB database service.
            </summary>
            <value>
            An integer from 0 to 100 representing percentage completion of the index transformation process.
            Returns -1 if the index transformation progress header could not be found.
            </value>
            <remarks>
            An index will be rebuilt when the IndexPolicy of a collection is updated.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponseBase.LazyIndexingProgress">
            <summary>
            Gets the progress of lazy indexing from the Azure DocumentDB database service.
            </summary>
            <value>
            An integer from 0 to 100 representing percentage completion of the lazy indexing process.
            Returns -1 if the lazy indexing progress header could not be found.
            </value>
            <remarks>
            Lazy indexing progress only applies to the collection with indexing mode Lazy.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.IDocumentResponse`1">
            <summary>
            Interface exposed for mocking purposes for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IDocumentResponse`1.Document">
            <summary>
            Gets the document returned in the response.
            </summary>
            <value>
            The document returned in the response.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentResponse`1.#ctor">
            <summary>
            Constructor exposed for mocking purposes for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentResponse`1.#ctor(`0)">
            <summary>
            Constructor exposed for mocking purposes for the Azure DocumentDB database service.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentResponse`1.op_Implicit(Microsoft.Azure.Documents.Client.DocumentResponse{`0})~`0">
            <summary>
            Returns the document in the response implicitly from the Azure DocumentDB database service.
            </summary>
            <param name="source">The DocumentResponse source.</param>
            <returns>The document object.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentResponse`1.Document">
            <summary>
            Gets the document returned in the response from the Azure DocumentDB database service.
            </summary>
            <value>
            The document returned in the response.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Documents.DocumentServiceRequest.#ctor(Microsoft.Azure.Documents.OperationType,System.String,Microsoft.Azure.Documents.ResourceType,System.IO.Stream,System.Collections.Specialized.NameValueCollection,System.Boolean,Microsoft.Azure.Documents.AuthorizationTokenType)">
            <summary>
            This is constructed from the existing request, either RId based or name based.
            resourceIdOrFullName can be either: (trimmed, RemoveTrailingSlashes, RemoveLeadingSlashes, urldecoded)
            1. wo1ZAP7zFQA=
            2. dbs/dbName/colls/collectionName/docs/documentName
            </summary>
            <param name="operationType"></param>
            <param name="resourceIdOrFullName"></param>
            <param name="resourceType"></param>
            <param name="body"></param>
            <param name="headers"></param>
            <param name="isNameBased">resourceIdOrFullName is resourceId or fullName</param>
            <param name="readAuthorizationTokenType"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.DocumentServiceRequest.#ctor(Microsoft.Azure.Documents.OperationType,Microsoft.Azure.Documents.ResourceType,System.String,System.IO.Stream,System.Collections.Specialized.NameValueCollection,Microsoft.Azure.Documents.AuthorizationTokenType)">
            <summary>
             The path is the incoming Uri.PathAndQuery, it can be:  (the name is url encoded).
             1. 	dbs/dbName/colls/collectionName/docs/documentName/attachments/  
             2.     dbs/wo1ZAA==/colls/wo1ZAP7zFQA=/
            </summary>
            <param name="operationType"></param>
            <param name="resourceType"></param>
            <param name="path"></param>
            <param name="body"></param>
            <param name="headers"></param>
            <param name="readAuthorizationTokenType"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.DocumentServiceRequest.IsValidAddress(Microsoft.Azure.Documents.ResourceType)">
            <summary>
            Verify the address is same as claimed resourceType
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequest.UseGatewayMode">
            <summary>
            This is currently used to force non-Windows .NET Core target platforms(Linux and OSX)
            and on 32-bit host process on Windows for NETFX, to always use Gateway mode for sending 
            cross partition query requests to get partition execution info as that logic is there in 
            ServiceInterop native dll which we haven't ported to Linux and OSX yet and it exists only 
            in 64 bit version on Windows.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequest.ServiceIdentity">
            <summary>
            ServiceIdentity of the target service where this request should reach
            Only valid for gateway
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequest.ResourceAddress">
            <summary>
            Normalized resourcePath, for both Name based and Rid based.
            This is the string passed for AuthZ. 
            It is resourceId in Rid case passed for AuthZ
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequest.ReadRequestAuthorizationTokenType">
            <summary>
            Authorization token used for the read request.
            This will be used to generate any child requests that are needed to process the read.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.StoreResponses">
            <summary>
            Cache the string representation of last returned store responses when exercising QuorumReader logic
            At the time of introducing this, this is purely for logging purposes and
            has not effect on correctness.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.TargetIdentity">
            <summary>
            Unique Identity that represents the target partition where the request should reach.
            In gateway it is same as ServiceIdentity. 
            In client it is a string that represents the partition and service index
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.PerformLocalRefreshOnGoneException">
            <summary>
            If the StoreReader should perform the local refresh for GoneException instead of 
            throwing is back to retry policy. This is done to avoid losing the state (response + LSN)
            while executing quorum read logic
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.EffectivePartitionKey">
            <summary>
            Effective partition key value to be used for routing.
            For server resources either this, or PartitionKeyRangeId header must be specified.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.ResolvedPartitionKeyRange">
            <summary>
            Is used to figure out which part of global session token is relevant
            for the partition to which request is sent.
            It is set automatically by address cache.
            Is set as part of address resolution.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.SessionLsn">
            <summary>
            LSN which was used in session token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.PreformedBackgroundAddressRefresh">
            <summary>
            If the background refresh has been performed for this request to eliminate the 
            extra replica that is not participating in quorum but causes Gone
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Error">
            <summary> 
            Encapsulates error related details in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Error.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Error"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Error.Code">
            <summary>
            Gets or sets the textual description of error code in the Azure DocumentDB database service.
            </summary>
            <value>The textual description of error code.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Error.Message">
            <summary>
            Gets or sets the error message in the Azure DocumentDB database service.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:Microsoft.Azure.Documents.ExcludedPath">
            <summary> 
            Specifies a path within a JSON document to be excluded while indexing data for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.ExcludedPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.ExcludedPath"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.ExcludedPath.Clone">
            <summary>
            Creates a copy of the excluded path in the Azure DocumentDB database service.
            </summary>
            <returns>A clone of the excluded path.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.ExcludedPath.Path">
            <summary>
            Gets or sets the path to be excluded from indexing in the Azure DocumentDB database service.
            </summary>
            <value>
            The path to be excluded from indexing.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.FeedOptions">
            <summary>
            Specifies the options associated with feed methods (enumeration operations) in the Azure DocumentDB database service.
            </summary>
            <remarks>
            Used to manage query and ReadFeed execution. Can use FeedOptions to set page size (MaxItemCount)
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.FeedOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.MaxItemCount">
            <summary>
            Gets or sets the maximum number of items to be returned in the enumeration operation in the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum number of items to be returned in the enumeration operation.
            </value> 
            <remarks>
            Used for query pagination.
            '-1' Used for dynamic page size.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            // Fetch query results 10 at a time.
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, new FeedOptions { MaxItemCount = 10 }))
            {
                while (queryable.HasResults)
                {
                    FeedResponse<Book> response = await queryable.ExecuteNext<Book>();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.RequestContinuation">
            <summary>
            Gets or sets the request continuation token in the Azure DocumentDB database service.
            </summary>
            <value>
            The request continuation token.
            </value>
            <example>
            <code language="c#">
            <![CDATA[
            // Resume query execution using the continuation from the previous query
            var queryable = client.CreateDocumentQuery<Book>(collectionLink, new FeedOptions { RequestContinuation = prevQuery.ResponseContinuation });
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.SessionToken">
            <summary>
            Gets or sets the session token for use with session consistency in the Azure DocumentDB database service.
            </summary>
            <value>
            The session token for use with session consistency.
            </value>
            <remarks>
            Useful for applications that are load balanced across multiple Microsoft.Azure.Documents.Client.DocumentClient instances. 
            In this case, round-trip the token from end user to the application and then back to DocumentDB so that a session
            can be preserved across servers.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            var queryable = client.CreateDocumentQuery<Book>(
                collectionLink, new FeedOptions { SessionToken = lastSessionToken });
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.EnableScanInQuery">
            <summary>
            Gets or sets the option to enable scans on the queries which couldn't be served
            as indexing was opted out on the requested paths in the Azure DocumentDB database service.
            </summary>
            <value>
            Option is true if scan on queries is enabled; otherwise, false.
            </value>
            <example>
            <code language="c#">
            <![CDATA[
            // Enable scan when Range index is not specified.
            var queryable = client.CreateDocumentQuery<Book>(
                collectionLink, new FeedOptions { EnableScanInQuery = true }).Where(b => b.Price > 1000);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.EnableCrossPartitionQuery">
            <summary>
            Gets or sets a value indicating whether users are enabled to send more than one request to execute
            the query in the Azure DocumentDB database service. More than one request is necessary if the query 
            is not scoped to single partition key value.
            </summary>
            <value>
            Option is true if cross-partition query execution is enabled; otherwise, false.
            </value>
            <remarks>
            <para>
            This option only applies to queries on documents and document attachments.
            </para>
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            // Enable cross partition query.
            var queryable = client.CreateDocumentQuery<Book>(
                collectionLink, new FeedOptions { EnableCrossPartitionQuery = true }).Where(b => b.Price > 1000);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.EnableLowPrecisionOrderBy">
            <summary>
            Gets or sets the option to enable low precision order by in the Azure DocumentDB database service.
            </summary>
            <value>
            The option to enable low-precision order by.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.PartitionKey">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.FeedOptions.PartitionKey"/> for the current request in the Azure DocumentDB database service.
            </summary>
            <remarks>
            <para>
            Partition key is required when read documents or attachments feed in a partitioned collection. 
            Specifically Partition key is required for :
                <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)"/>,
                <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)"/> and 
                <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)"/>.  
            Only documents in partitions containing the <see cref="P:Microsoft.Azure.Documents.Client.FeedOptions.PartitionKey"/> is returned in the result.
            </para>
            </remarks>
            <example>
            The following example shows how to read a document feed in a partitioned collection using <see cref="P:Microsoft.Azure.Documents.Client.FeedOptions.PartitionKey"/>.
            The example assumes the collection is created with a <see cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/> on the 'country' property in all the documents.
            <code language="c#">
            <![CDATA[
            await client.ReadDocumentFeedAsync(
                collection.SelfLink, 
                new RequestOptions { PartitionKey = new PartitionKey("USA") } );
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.PartitionKeyRangeId">
            <summary>
            Gets or sets the partition key range id for the current request.
            </summary>
            <remarks>
            <para>
            ReadFeed requests can use this to forward request to specific range.
            This is usefull in case of bulk export scenarios.
            </para>
            </remarks>
            <example>
            The following example shows how to read a document feed in a partitioned collection from partition key range "20".
            <code language="c#">
            <![CDATA[
            await client.ReadDocumentFeedAsync(
                collection.SelfLink, 
                new RequestOptions { PartitionKeyRangeId = "20" } );
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.MaxDegreeOfParallelism">
            <summary>
            Gets or sets the number of concurrent operations run client side during 
            parallel query execution in the Azure DocumentDB database service. 
            A positive property value limits the number of 
            concurrent operations to the set value. If it is set to less than 0, the 
            system automatically decides the number of concurrent operations to run.
            </summary>
            <value>
            The maximum number of concurrent operations during parallel execution. Defaults to 0.
            </value> 
            <example>
            <code language="c#">
            <![CDATA[
            var queryable = client.CreateDocumentQuery<Book>(collectionLink, new FeedOptions { 
            MaxDegreeOfParallelism = 5});
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.MaxBufferedItemCount">
            <summary>
            Gets or sets the maximum number of items that can be buffered client side during 
            parallel query execution in the Azure DocumentDB database service. 
            A positive property value limits the number of buffered 
            items to the set value. If it is set to less than 0, the system automatically 
            decides the number of items to buffer.
            </summary>
            <value>
            The maximum count of items that can be buffered during parallel query execution.
            </value> 
            <remarks>
            This is only suggestive and cannot be abided by in certain cases.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            var queryable = client.CreateDocumentQuery<Book>(collectionLink, new FeedOptions { 
            MaximumBufferSize = 10, MaxDegreeOfParallelism = 2 });
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.EmitVerboseTracesInQuery">
            <summary>
            Gets or sets the option to allow queries to emit out verbose traces 
            for investigation in the Azure DocumentDB database service.
            </summary>
            <value>
            Option is true if query tracing is enabled; otherwise, false.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.FilterBySchemaResourceId">
            <summary>
            Gets or sets the schema rid which could be used to filter the document feed response
            in order to focus on the documents for a particular schema.
            </summary>
            <value>
            By default, it is <c>null</c> which means no filtering will be applied.
            Otherwise, it must be a valid resource id of Schema resource.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.PopulateQueryMetrics">
            <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.FeedOptions.PopulateQueryMetrics"/> request option for document query requests in the Azure DocumentDB database service.
            </summary>
            <remarks>
            <para> 
            PopulateQueryMetrics is used to enable/disable getting metrics relating to query execution on document query requests.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.ResponseContinuationTokenLimitInKb">
            <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.FeedOptions.ResponseContinuationTokenLimitInKb"/> request option for document query requests in the Azure DocumentDB database service.
            </summary>
            <remarks>
            <para> 
            ResponseContinuationTokenLimitInKb is used to limit the length of continuation token in the query response. Valid values are &gt;= 0.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.DisableRUPerMinuteUsage">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.FeedOptions.DisableRUPerMinuteUsage"/> option for the current query in the Azure DocumentDB database service.
            </summary>
            <remarks>
            <para> 
            DisableRUPerMinuteUsage is used to enable/disable Request Units(RUs)/minute capacity to serve the query if regular provisioned RUs/second is exhausted.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.FeedResponse`1">
            <summary>
            Represents the template class used by feed methods (enumeration operations) for the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The feed type.</typeparam>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.IFeedResponse`1">
            <summary>
            Captures APIs for responses associated with feed methods (enumeration operations) in the Azure DocumentDB database service.
            Interface exposed for mocking purposes.
            </summary>
            <typeparam name="T">The feed type.</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.IFeedResponse`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection in the Azure DocumentDB database service.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.DatabaseQuota">
            <summary>
            Gets the maximum quota for database resources within the Azure DocumentDB database account. 
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.DatabaseUsage">
            <summary>
            The current number of database resources within the Azure DocumentDB database account.
            </summary>
            <value>
            The number of databases.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.CollectionQuota">
            <summary>
            Gets the maximum quota for collection resources within the Azure DocumentDB database account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.CollectionUsage">
            <summary>
            The current number of collection resources within the Azure DocumentDB database account.
            </summary>
            <value>
            The number of collections.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.UserQuota">
            <summary>
            Gets the maximum quota for user resources within the Azure DocumentDB database account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.UserUsage">
            <summary>
            The current number of user resources within the Azure DocumentDB database account.
            </summary>
            <value>
            The number of users.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.PermissionQuota">
            <summary>
            Gets the maximum quota for permission resources within the Azure DocumentDB database account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.PermissionUsage">
            <summary>
            The current number of permission resources within the Azure DocumentDB database account. 
            </summary>
            <value>
            The number of permissions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.CollectionSizeQuota">
            <summary>
            Maximum size of a collection in the Azure DocumentDB database in kilobytes.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.CollectionSizeUsage">
            <summary>
            Current size of a collection in the Azure DocumentDB database in kilobytes. 
            </summary>
            <vallue>
            Current collection size in kilobytes.
            </vallue>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.StoredProceduresQuota">
            <summary>
            Gets the maximum quota of stored procedures for a collection in the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.StoredProceduresUsage">
            <summary>
            The current number of stored procedures for a collection in the Azure DocumentDB database service.
            </summary>
            <value>
            Current number of stored procedures.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.TriggersQuota">
            <summary>
            Gets the maximum quota of triggers for a collection in the Azure DocumentDB database service. 
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.TriggersUsage">
            <summary>
            The current number of triggers for a collection in the Azure DocumentDB database service.
            </summary>
            <value>
            Current number of triggers.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.UserDefinedFunctionsQuota">
            <summary>
            Gets the maximum quota of user defined functions for a collection in the Azure DocumentDB database service. 
            </summary>
            <value>
            Maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.UserDefinedFunctionsUsage">
            <summary>
            The current number of user defined functions for a collection in the Azure DocumentDB database service.
            </summary>
            <value>
            Current number of user defined functions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.Count">
            <summary>
            Gets the number of items returned in the response associated with the feed operations for the Azure DocumentDB database service.
            </summary>
            <value>
            Count of items in the response.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.MaxResourceQuota">
            <summary>
            Gets the maximum size limit for this entity in the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum size limit for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.CurrentResourceQuotaUsage">
            <summary>
            Gets the current size of this entity in the Azure DocumentDB database service.
            </summary>
            <value>
            The current size for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.RequestCharge">
            <summary>
            Gets the request charge for the Azure DocumentDB database account for this request
            </summary>
            <value>
            The request charge measured in reqest units.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.ActivityId">
            <summary>
            Gets the activity ID for the request in the Azure DocumentDB database service.
            </summary>
            <value>
            The activity ID for the request.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.ResponseContinuation">
            <summary>
            Gets the continuation token to be used for continuing enumeration in the Azure DocumentDB database service.
            </summary>
            <value>
            The continuation token to be used for continuing enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.SessionToken">
            <summary>
            Gets the session token for use in sesssion consistency reads in the Azure DocumentDB database service.
            </summary>
            <value>
            The session token for use in session consistency.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.ContentLocation">
            <summary>
            The content parent location in the Azure DocumentDB database, for example, dbs/foo/colls/bar
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IFeedResponse`1.ResponseHeaders">
            <summary>
            Gets the response headers.
            </summary>
            <value>
            The response headers.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.FeedResponse`1.#ctor">
            <summary>
            Constructor exposed for mocking purposes.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.FeedResponse`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor exposed for mocking purposes.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.FeedResponse`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection from the Azure DocumentDB database service.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.ResponseLengthBytes">
            <summary>
            Gets the response length in bytes
            </summary>
            <remarks>
            This value is only set within Mongo stack.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.DatabaseQuota">
            <summary>
            Gets the maximum quota for database resources within the account from the Azure DocumentDB database service. 
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.DatabaseUsage">
            <summary>
            Gets the current number of database resources within the account from the Azure DocumentDB database service.
            </summary>
            <value>
            The number of databases.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.CollectionQuota">
            <summary>
            Gets the maximum quota for collection resources within an account from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.CollectionUsage">
            <summary>
            Gets the current number of collection resources within the account from the Azure DocumentDB database service.
            </summary>
            <value>
            The number of collections.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.UserQuota">
            <summary>
            Gets the maximum quota for user resources within an account from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.UserUsage">
            <summary>
            Gets the current number of user resources within the account from the Azure DocumentDB database service.
            </summary>
            <value>
            The number of users.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.PermissionQuota">
            <summary>
            Gets the maximum quota for permission resources within an account from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.PermissionUsage">
            <summary>
            Gets the current number of permission resources within the account from the Azure DocumentDB database service. 
            </summary>
            <value>
            The number of permissions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.CollectionSizeQuota">
            <summary>
            Gets the maximum size of a collection in kilobytes from the Azure DocumentDB database service.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.CollectionSizeUsage">
            <summary>
            Gets the current size of a collection in kilobytes from the Azure DocumentDB database service. 
            </summary>
            <vallue>
            Current collection size in kilobytes.
            </vallue>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.StoredProceduresQuota">
            <summary>
            Gets the maximum quota of stored procedures for a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.StoredProceduresUsage">
            <summary>
            Gets the current number of stored procedures for a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            Current number of stored procedures.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.TriggersQuota">
            <summary>
            Gets the maximum quota of triggers for a collection from the Azure DocumentDB database service. 
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.TriggersUsage">
            <summary>
            Get the current number of triggers for a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            Current number of triggers.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.UserDefinedFunctionsQuota">
            <summary>
            Gets the maximum quota of user defined functions for a collection from the Azure DocumentDB database service. 
            </summary>
            <value>
            Maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.UserDefinedFunctionsUsage">
            <summary>
            Gets the current number of user defined functions for a collection from the Azure DocumentDB database service.
            </summary>
            <value>
            Current number of user defined functions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.Count">
            <summary>
            Gets the number of items returned in the response from the Azure DocumentDB database service.
            </summary>
            <value>
            Count of items in the response.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.MaxResourceQuota">
            <summary>
            Gets the maximum size limit for this entity from the Azure DocumentDB database service.
            </summary>
            <value>
            The maximum size limit for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.CurrentResourceQuotaUsage">
            <summary>
            Gets the current size of this entity from the Azure DocumentDB database service.
            </summary>
            <value>
            The current size for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.RequestCharge">
            <summary>
            Gets the request charge for this request from the Azure DocumentDB database service.
            </summary>
            <value>
            The request charge measured in reqest units.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.ActivityId">
            <summary>
            Gets the activity ID for the request from the Azure DocumentDB database service.
            </summary>
            <value>
            The activity ID for the request.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.ResponseContinuation">
            <summary>
            Gets the continuation token to be used for continuing enumeration of the Azure DocumentDB database service.
            </summary>
            <value>
            The continuation token to be used for continuing enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.SessionToken">
            <summary>
            Gets the session token for use in sesssion consistency reads from the Azure DocumentDB database service.
            </summary>
            <value>
            The session token for use in session consistency.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.ContentLocation">
            <summary>
            Gets the content parent location, for example, dbs/foo/colls/bar, from the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.ETag">
            <summary>
            Gets the entity tag associated with last transaction in the Azure DocumentDB database service,
            which can be used as If-Non-Match Access condition for ReadFeed REST request or 
            ContinuationToken property of <see cref="T:Microsoft.Azure.Documents.Client.ChangeFeedOptions"/> parameter for
            <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentChangeFeedQuery(System.String,Microsoft.Azure.Documents.Client.ChangeFeedOptions)"/> 
            to get feed changes since the transaction specified by this entity tag.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.ResponseHeaders">
            <summary>
            Gets the response headers from the Azure DocumentDB database service.
            </summary>
            <value>
            The response headers.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.QueryMetrics">
            <summary>
            Get <see cref="T:Microsoft.Azure.Documents.QueryMetrics"/> for each individual partition in the Azure DocumentDB database service
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.IsRUPerMinuteUsed">
            <summary>
            Gets the flag associated with the response from the Azure DocumentDB database service whether this feed request is served from Request Units(RUs)/minute capacity or not.
            </summary>
            <value>
            True if this request is served from RUs/minute capacity. Otherwise, false.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.GoneAndRetryWithRetryPolicy">
            <summary>
            Policy to perform backoff retry on GoneException, InvalidPartitionException and RetryWithException
            TArg1: Perform force refresh.
            TArg2: TimeSpan for completing the work in the callback
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IRetryPolicy`1.ShouldRetryAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>
            Method that is called to determine from the policy that needs to retry on the exception
            </summary>
            <param name="exception">Exception during the callback method invocation</param>
            <param name="cancellationToken"></param>
            <returns>If the retry needs to be attempted or not</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IRetryPolicy`1.InitialArgumentValue">
            <summary>
            Initial value of the template argument
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.GoneAndRetryWithRetryPolicy.Microsoft#Azure#Documents#IRetryPolicy{System#Boolean}#ShouldRetryAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>
            ShouldRetry method
            </summary>
            <param name="exception">Exception thrown by callback</param>
            <param name="cancellationToken"></param>
            <returns>Is the retry helper should retry</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.GoneAndRetryWithRetryPolicy.Microsoft#Azure#Documents#IRetryPolicy{System#Tuple{System#Boolean@System#Boolean@System#TimeSpan}}#ShouldRetryAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>
            ShouldRetry method
            </summary>
            <param name="exception">Exception thrown by callback</param>
            <param name="cancellationToken"></param>
            <returns>Is the retry helper should retry</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.GoneException.Message">
             <summary>
            
             Summary:
                 Gets a message that describes the current exception.
            
             </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.HashIndex">
            <summary>
            Represents details of the hash index setting in an Azure DocumentDB database service.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop = 5.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Index">
            <summary>
            Base class for IndexingPolicy Indexes in the Azure DocumentDB database service, you should use a concrete Index like HashIndex or RangeIndex.
            </summary> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Index.#ctor(Microsoft.Azure.Documents.IndexKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Index"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Index.Range(Microsoft.Azure.Documents.DataType)">
            <summary>
            Returns an instance of the <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> class with specified DataType for the Azure DocumentDB database service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.DataType"/>
            <example>
            Here is an example to create RangeIndex instance passing in the DataType:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndex = Index.Range(DataType.Number);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Index.Range(Microsoft.Azure.Documents.DataType,System.Int16)">
            <summary>
            Returns an instance of the <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> class with specified DataType and precision for the Azure DocumentDB database service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <param name="precision">Specifies the precision to be used for the data type associated with this index.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.DataType"/>
            <example>
            Here is an example to create RangeIndex instance passing in the DataType and precision:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndex = Index.Range(DataType.Number, -1);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Index.Hash(Microsoft.Azure.Documents.DataType)">
            <summary>
            Returns an instance of the <see cref="T:Microsoft.Azure.Documents.HashIndex"/> class with specified DataType for the Azure DocumentDB database service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Documents.HashIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.DataType"/>
            <example>
            Here is an example to create HashIndex instance passing in the DataType:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndex = Index.Hash(DataType.String);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Index.Hash(Microsoft.Azure.Documents.DataType,System.Int16)">
            <summary>
            Returns an instance of the <see cref="T:Microsoft.Azure.Documents.HashIndex"/> class with specified DataType and precision for the Azure DocumentDB database service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <param name="precision">Specifies the precision to be used for the data type associated with this index.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Documents.HashIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.DataType"/>
            <example>
            Here is an example to create HashIndex instance passing in the DataType and precision:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndex = Index.Hash(DataType.String, 3);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Index.Spatial(Microsoft.Azure.Documents.DataType)">
            <summary>
            Returns an instance of the <see cref="T:Microsoft.Azure.Documents.SpatialIndex"/> class with specified DataType for the Azure DocumentDB database service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Documents.SpatialIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.DataType"/>
            <example>
            Here is an example to create SpatialIndex instance passing in the DataType:
            <code language="c#">
            <![CDATA[
            SpatialIndex spatialIndex = Index.Spatial(DataType.Point);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Index.Kind">
            <summary>
            Gets or sets the kind of indexing to be applied in the Azure DocumentDB database service.
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.IndexKind"/> enumeration.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Documents.HashIndex.#ctor(Microsoft.Azure.Documents.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.HashIndex"/> class with specified DataType for the Azure DocumentDB database service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <seealso cref="P:Microsoft.Azure.Documents.HashIndex.DataType"/>
            <example>
            Here is an example to instantiate HashIndex class passing in the DataType:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndex = new HashIndex(DataType.String);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.HashIndex.#ctor(Microsoft.Azure.Documents.DataType,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.HashIndex"/> class with specified DataType and precision for the Azure DocumentDB database service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <param name="precision">Specifies the precision to be used for the data type associated with this index.</param>
            <seealso cref="P:Microsoft.Azure.Documents.HashIndex.DataType"/>
            <example>
            Here is an example to instantiate HashIndex class passing in the DataType and precision:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndex = new HashIndex(DataType.String, 3);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.HashIndex.Clone">
            <summary>
            Creates a copy of the hash index for the Azure DocumentDB database service.
            </summary>
            <returns>A clone of the hash index.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.HashIndex.DataType">
            <summary>
            Gets or sets the data type for which this index should be applied in the Azure DocumentDB database service.
            </summary>
            <value>
            The data type for which this index should be applied.
            </value>
            <remarks>Refer to <a href="http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy">Customizing the indexing policy of a collection</a> for valid ranges of values.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.HashIndex.Precision">
            <summary>
            Gets or sets the precision for this particular index in the Azure DocumentDB database service.
            </summary>
            <value>
            The precision for this particular index. Returns null, if not set.
            </value>
            <remarks>Refer to <a href="http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy">Customizing the indexing policy of a collection</a> for valid ranges of values.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Helpers.GetHeaderValueByte(System.Collections.Specialized.NameValueCollection,System.String,System.Byte)">
            <summary>
            Gets the byte value for a header. If header not present, returns the defaultValue.
            </summary>
            <param name="headerValues"></param>
            <param name="headerName"></param>
            <param name="defaultValue">Pls do not set defaultValue to MinValue as MinValue carries valid meaning in some place</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Helpers.GetAppSpecificUserAgentSuffix(System.String,System.String)">
            <summary>
            Helper method to set application specific user agent suffix for internal telemetry purposes
            </summary>
            <param name="appName"></param>
            <param name="appVersion"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.IDocumentClient">
            <summary>
            The IDocumentClient interface captures the API signatures of the Azure DocumentDB database service .NET SDK.
            See <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> for implementation details.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates an attachment as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentLink">The link of the parent document for this new attachment. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="attachment">The attachment object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentAsync(System.String,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates an attachment with the contents of the provided <paramref name="mediaStream"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentLink">The link of the parent document for this new attachment. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="mediaStream">The <see cref="T:System.IO.Stream"/> of the attachment media.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions"/> for the request.</param>
            <param name="requestOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="documentLink"/> or <paramref name="mediaStream"/> is not set.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDatabaseAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a database resource as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="database">The specification for the <see cref="T:Microsoft.Azure.Documents.Database"/> to create.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.Database"/> that was created within a task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a collection as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseLink">The link of the database to create the collection in. E.g. dbs/db_rid/</param>
            <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput=400. </param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)">
            <summary>
            Creates a Document as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the document in. E.g. dbs/db_rid/colls/coll_rid/ </param>
            <param name="document">The document object to create.</param>
            <param name="options">(Optional) The request options you wish to set. E.g. Specifying a Trigger to execute when creating the document. <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/></param>
            <param name="disableAutomaticIdGeneration">(Optional) Disables the automatic id generation, If this is True the system will throw an exception if the id property is missing from the Document.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureAsync(System.String,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a stored procedure as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the collection to create the stored procedure in. E.g. dbs/db_rid/colls/col_rid/</param>
            <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object to create.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateTriggerAsync(System.String,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a trigger as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the trigger in. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object to create.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user defined function as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the user defined function in. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object to create.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserAsync(System.String,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user object as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseLink">The link of the database to create the user in. E.g. dbs/db_rid/ </param>
            <param name="user">The <see cref="T:Microsoft.Azure.Documents.User"/> object to create.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation which contains the created <see cref="T:Microsoft.Azure.Documents.User"/> object.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreatePermissionAsync(System.String,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a permission on a user object as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userLink">The link of the user to create the permission for. E.g. dbs/db_rid/users/user_rid/ </param>
            <param name="permission">The <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation which contains the created <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteAttachmentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete an <see cref="T:Microsoft.Azure.Documents.Attachment"/> from the database as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentLink">The link of the <see cref="T:Microsoft.Azure.Documents.Attachment"/> to delete. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/attachments/attachment_rid/ </param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteDatabaseAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Database"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseLink">The link of the <see cref="T:Microsoft.Azure.Documents.Database"/> to delete. E.g. dbs/db_rid/ </param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.Document"/> to delete. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentLink">The link of the <see cref="T:Microsoft.Azure.Documents.Document"/> to delete. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteStoredProcedureAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="storedProcedureLink">The link of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> to delete. E.g. dbs/db_rid/colls/col_rid/sprocs/sproc_rid/ </param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteTriggerAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Trigger"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="triggerLink">The link of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> to delete. E.g. dbs/db_rid/colls/col_rid/triggers/trigger_rid/ </param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="functionLink">The link of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> to delete. E.g. dbs/db_rid/colls/col_rid/udfs/udf_rid/ </param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteUserAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.User"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userLink">The link of the <see cref="T:Microsoft.Azure.Documents.User"/> to delete. E.g. dbs/db_rid/users/user_rid/ </param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeletePermissionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Permission"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="permissionLink">The link of the <see cref="T:Microsoft.Azure.Documents.Permission"/> to delete. E.g. dbs/db_rid/users/user_rid/permissions/permission_rid/ </param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteConflictAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Conflict"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="conflictLink">The link of the <see cref="T:Microsoft.Azure.Documents.Conflict"/> to delete. E.g. dbs/db_rid/colls/coll_rid/conflicts/ </param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceAttachmentAsync(Microsoft.Azure.Documents.Attachment,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Attachment"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="attachment">The updated <see cref="T:Microsoft.Azure.Documents.Attachment"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Attachment"/> containing the updated resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceDocumentCollectionAsync(Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollection">The updated document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentLink">The link of the document to be updated. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="document">The updated <see cref="T:Microsoft.Azure.Documents.Document"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the updated resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceDocumentAsync(Microsoft.Azure.Documents.Document,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="document">The updated <see cref="T:Microsoft.Azure.Documents.Document"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the updated resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceStoredProcedureAsync(Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="storedProcedure">The updated <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the updated resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceTriggerAsync(Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Trigger"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="trigger">The updated <see cref="T:Microsoft.Azure.Documents.Trigger"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the updated resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceUserDefinedFunctionAsync(Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="function">The updated <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the updated resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplacePermissionAsync(Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Permission"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="permission">The updated <see cref="T:Microsoft.Azure.Documents.Permission"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission"/> containing the updated resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceUserAsync(Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.User"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="user">The updated <see cref="T:Microsoft.Azure.Documents.User"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.User"/> containing the updated resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceOfferAsync(Microsoft.Azure.Documents.Offer)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Offer"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="offer">The updated <see cref="T:Microsoft.Azure.Documents.Offer"/> to replace the existing resource with.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the updated resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpdateMediaAsync(System.String,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions)">
            <summary>
            Replaces the specified media's content as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="mediaLink">The link for the media to be updated. /medias/media_rid </param>
            <param name="mediaStream">The <see cref="T:System.IO.Stream"/> of the attachment media.</param>
            <param name="options">The <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions"/> for the request.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="mediaLink"/> or <paramref name="mediaStream"/> is not set.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="mediaLink"/> is not in the form of /medias/{mediaId}.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadAttachmentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Attachment"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentLink">The link to the attachment to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Attachment"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadDatabaseAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Database"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseLink">The link of the Database resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionLink">The link for the DocumentCollection to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentLink">The link for the document to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadStoredProcedureAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="storedProcedureLink">The link of the stored procedure to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadTriggerAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Trigger"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="triggerLink">The link to the Trigger to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="functionLink">The link to the User Defined Function to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadPermissionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Permission"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="permissionLink">The link for the Permission resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadUserAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.User"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userLink">The link to the User resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.User"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadConflictAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Conflict"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="conflictLink">The link to the Conflict to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadOfferAsync(System.String)">
            <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Offer"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="offerLink">The link to the Offer to be read.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadMediaMetadataAsync(System.String)">
            <summary>
            Retrieves the metadata associated with the specified attachment content (aka media) as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="mediaLink">The link for the media to read metadata for. E.g. /medias/media_rid </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="mediaLink"/> is not set.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="mediaLink"/> is not in the form of /medias/{mediaId}.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadMediaAsync(System.String)">
            <summary>
            Retrieves the specified attachment content (aka media) in the Azure DocumentDB database service.
            </summary>
            <param name="mediaLink">The link for the media to read. E.g. /medias/media_rid</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="mediaLink"/> is not set.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="mediaLink"/> is not in the form of /medias/{mediaId}.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadAttachmentFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Attachment"/> for a document as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentLink">The link of the parent document resource.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Attachment"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadDatabaseFeedAsync(Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Database"/> for a database account as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadDocumentCollectionFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> for a database as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseLink">The link of the parent database resource.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadDocumentFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of documents for a specified collection in the Azure DocumentDB database service. This takes returns a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain an enumerable list of dynamic objects.
            </summary>
            <param name="collectionLink">The link of the parent document collection resource.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> containing dynamic objects representing the items in the feed.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadStoredProcedureFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> for a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the parent document collection resource.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadTriggerFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Trigger"/> for a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the parent document collection resource.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadUserDefinedFunctionFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> for a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the parent document collection resource.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadPermissionFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Permission"/> for a user as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userLink">The link of the parent user resource.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadUserFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.User"/> for a database as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseLink">The link of the parent database resource.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.User"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadConflictFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Conflict"/> for a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the parent document collection resource.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadOffersFeedAsync(Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Offer"/> for a database account as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>for this request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ExecuteStoredProcedureAsync``1(System.String,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureLink">The link to the stored procedure to execute.</param>
            <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ExecuteStoredProcedureAsync``1(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Object[])">
            <summary>
            Executes a stored procedure against a partitioned collection as an asynchronous operation in the Azure DocumentDB database service, specifiying a target partition.
            </summary>
            <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureLink">The link to the stored procedure to execute.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertAttachmentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts an attachment as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentLink">The link of the parent document for this new attachment. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="attachment">The attachment object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertAttachmentAsync(System.String,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts an attachment with the contents of the provided <paramref name="mediaStream"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentLink">The link of the parent document for this new attachment. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="mediaStream">The <see cref="T:System.IO.Stream"/> of the attachment media.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions"/> for the request.</param>
            <param name="requestOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)">
            <summary>
            Upserts a Document as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the document in. E.g. dbs/db_rid/colls/coll_rid/ </param>
            <param name="document">The document object to upsert.</param>
            <param name="options">(Optional) Any request options you wish to set. E.g. Specifying a Trigger to execute when creating the document. <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/></param>
            <param name="disableAutomaticIdGeneration">(Optional) Disables the automatic id generation, If this is True the system will throw an exception if the id property is missing from the Document.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.Document"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertStoredProcedureAsync(System.String,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a stored procedure as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the collection to upsert the stored procedure in. E.g. dbs/db_rid/colls/col_rid/</param>
            <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object to upsert.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertTriggerAsync(System.String,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a trigger as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the trigger in. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object to upsert.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a user defined function as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the user defined function in. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object to upsert.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertPermissionAsync(System.String,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a permission on a user object as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userLink">The link of the user to Upsert the permission for. E.g. dbs/db_rid/users/user_rid/ </param>
            <param name="permission">The <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation which contains the upserted <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertUserAsync(System.String,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a permission on a user object as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseLink">The link of the database to upsert the user in. E.g. dbs/db_rid/ </param>
            <param name="user">The <see cref="T:Microsoft.Azure.Documents.User"/> object to upsert.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation which contains the upserted <see cref="T:Microsoft.Azure.Documents.User"/> object.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.GetDatabaseAccountAsync">
            <summary>
            Read the <see cref="T:Microsoft.Azure.Documents.DatabaseAccount"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Azure.Documents.DatabaseAccount"/> wrapped in a <see cref="T:System.Threading.Tasks.Task"/> object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates an attachment as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">The URI of the document to create an attachment for.</param>
            <param name="attachment">The attachment object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentAsync(System.Uri,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates an attachment as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">The URI of the document to create an attachment for.</param>
            <param name="mediaStream">The stream of the attachment media.</param>
            <param name="options">The media options for the request.</param>
            <param name="requestOptions">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a collection as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">The URI of the database to create the collection in.</param>
            <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)">
            <summary>
            Creates a document as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to create the document in.</param>
            <param name="document">The document object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <param name="disableAutomaticIdGeneration">A flag to disable automatic id generation.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a stored procedure as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to create the stored procedure in.</param>
            <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a trigger as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to create the trigger in.</param>
            <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user defined function as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to create the user defined function in.</param>
            <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreatePermissionAsync(System.Uri,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a permission as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userUri">The URI of the user to create the permission for.</param>
            <param name="permission">The <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserAsync(System.Uri,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">The URI of the database to create the user in.</param>
            <param name="user">The <see cref="T:Microsoft.Azure.Documents.User"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertAttachmentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts an attachment as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">The URI of the document to upsert an attachment for.</param>
            <param name="attachment">The <see cref="T:Microsoft.Azure.Documents.Attachment"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertAttachmentAsync(System.Uri,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts an attachment as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">The URI of the document to upsert an attachment for.</param>
            <param name="mediaStream">The stream of the attachment media.</param>
            <param name="options">The <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions"/> for the request.</param>
            <param name="requestOptions">The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)">
            <summary>
            Upserts a document as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to upsert the document in.</param>
            <param name="document">The document object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <param name="disableAutomaticIdGeneration">A flag to disable the automatic id generation.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a stored procedure as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to upsert the stored procedure in.</param>
            <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a trigger as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to upsert the trigger in.</param>
            <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a user defined function as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to upsert the user defined function in.</param>
            <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertPermissionAsync(System.Uri,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a permission as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userUri">The URI of the user to upsert the permission for.</param>
            <param name="permission">The <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.UpsertUserAsync(System.Uri,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a user as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">The URI of the database to upsert the user in.</param>
            <param name="user">The <see cref="T:Microsoft.Azure.Documents.User"/> object.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteAttachmentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete an attachment as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentUri">The URI of the attachment to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteDatabaseAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a database as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">The URI of the database to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteDocumentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a document as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">The URI of the document to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a stored procedure as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="storedProcedureUri">The URI of the stored procedure to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteTriggerAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a trigger as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="triggerUri">The URI of the trigger to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a user defined function as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="functionUri">The URI of the user defined function to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeletePermissionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a permission as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="permissionUri">The URI of the permission to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteUserAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a user as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userUri">The URI of the user to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.DeleteConflictAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a conflict as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="conflictUri">The URI of the conflict to delete.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceAttachmentAsync(System.Uri,Microsoft.Azure.Documents.Attachment,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces an attachment as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentUri">The URI of the attachment to be updated.</param>
            <param name="attachment">The attachment resource.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection to be updated.</param>
            <param name="documentCollection">The updated document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">The URI of the document to be updated.</param>
            <param name="document">The updated document.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replace the specified stored procedure in the Azure DocumentDB database service.
            </summary>
            <param name="storedProcedureUri">The URI for the stored procedure to be updated.</param>
            <param name="storedProcedure">The updated stored procedure.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a trigger as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="triggerUri">The URI for the trigger to be updated.</param>
            <param name="trigger">The updated trigger.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a user defined function as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userDefinedFunctionUri">The URI for the user defined function to be updated.</param>
            <param name="function">The updated user defined function.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplacePermissionAsync(System.Uri,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a permission as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="permissionUri">The URI for the permission to be updated.</param>
            <param name="permission">The updated permission.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReplaceUserAsync(System.Uri,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a user as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userUri">The URI for the user to be updated.</param>
            <param name="user">The updated user.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadAttachmentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Attachment"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentUri">A URI to the Attachment resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps an <see cref="T:Microsoft.Azure.Documents.Attachment"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadDatabaseAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Database"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">A URI to the Database resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">A URI to the DocumentCollection resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadDocumentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">A URI to the Document resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="storedProcedureUri">A URI to the StoredProcedure resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadTriggerAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Trigger"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="triggerUri">A URI to the Trigger resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="functionUri">A URI to the User Defined Function resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadPermissionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Permission"/> resource as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="permissionUri">A URI to the Permission resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadUserAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.User"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userUri">A URI to the User resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.User"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadConflictAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Conflict"/> as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="conflictUri">A URI to the Conflict resource to be read.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadAttachmentFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of attachments for a document as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">The URI of the parent document.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadDocumentCollectionFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of collections for a database as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">The URI of the parent Database.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadDocumentFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of documents for a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadStoredProcedureFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of stored procedures for a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadTriggerFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of triggers for a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadUserDefinedFunctionFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of user defined functions for a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadPermissionFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of permissions for a user as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userUri">The URI of the parent user.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadUserFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of users for a database as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">The URI of the parent database.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ReadConflictFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of conflicts for a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureUri">The URI of the stored procedure to be executed.</param>
            <param name="procedureParams">The parameters for the stored procedure execution.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureUri">The URI of the stored procedure to be executed.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <param name="procedureParams">The parameters for the stored procedure execution.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery``1(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentUri">The URI of the parent document.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery``1(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">The URI of the parent document.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery``1(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">The URI of the parent document.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">The URI of the parent document.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">The URI of the parent document.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">The URI of the parent document.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for document collections in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">The URI of the parent database.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for document collections in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">The URI to the database.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for document collections in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">The URI to the database.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create query for stored procedures in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create query for stored procedures in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create query for stored procedures in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateTriggerQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create query for triggers in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateTriggerQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create query for triggers in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateTriggerQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create query for triggers in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for user-defined functions in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for user-defined functions in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for user-defined functions in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateConflictQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for conflicts in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateConflictQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for conflicts in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateConflictQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for conflicts in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery``1(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentCollectionUri">The URI of the document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentCollectionUri">The URI of the document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for users in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for users in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for users in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">The URI of the parent document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreatePermissionQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for permissions in the Azure DocumentDB database service.
            </summary>
            <param name="userUri">The URI of the parent user.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreatePermissionQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for permissions in the Azure DocumentDB database service.
            </summary>
            <param name="userUri">The URI of the parent user.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreatePermissionQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Method to create a query for permissions in the Azure DocumentDB database service.
            </summary>
            <param name="userUri">The URI of the parent user.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery``1(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for attachments in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentLink">The link of the parent document.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery``1(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for attachments by using a SQL statement in the Azure DocumentDB database service. 
            </summary>
            <param name="documentLink">The link of the parent document.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{T} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery``1(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
             Overloaded. This method creates a query for attachments by using a SQL statement with parameterized values in the Azure DocumentDB database service.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="documentLink">The link of the parent document.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{T} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for attachments in the Azure DocumentDB database service. It returns an IOrderedQueryable{Attachment}.
            </summary>
            <param name="documentLink">The link to the parent document</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Attachments} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for attachments by using a SQL statement in the Azure DocumentDB database service. It returns an IQueryable{dynamic}.
            </summary>
            <param name="documentLink">The link to the parent document.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
             Overloaded. This method creates a query for attachments by using a SQL statement with parameterized values in the Azure DocumentDB database service. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="documentLink">The link to the parent document resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDatabaseQuery(Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an account in the Azure DocumentDB database service. It returns An IOrderedQueryable{Database>.
            </summary>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Database} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDatabaseQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an account by using a SQL statement in the Azure DocumentDB database service. It returns an IQueryable{dynamic}.
            </summary>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDatabaseQuery(Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an account by using a SQL statement with parameterized values in the Azure DocumentDB database service. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for collections under an Azure DocumentDB database service. It returns An IOrderedQueryable{DocumentCollection>.
            </summary>
            <param name="databaseLink">The link to the parent database resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{DocumentCollection} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for collections under an Azure DocumentDB database using a SQL statement.   It returns an IQueryable{DocumentCollection}.
            </summary>
            <param name="databaseLink">The link to the parent database resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for collections under an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="databaseLink">The link to the parent database resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for stored procedures under a collection in the Azure DocumentDB database service. It returns An IOrderedQueryable{StoredProcedure>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{StoredProcedure} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for stored procedures under a collection in the Azure DocumentDB database service using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for stored procedures under a collection in the Azure DocumentDB database service using a SQL statement using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateTriggerQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for triggers under a collection in the Azure DocumentDB database service. It returns An IOrderedQueryable{Trigger>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Trigger} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateTriggerQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for triggers under a collection in the Azure DocumentDB database service. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateTriggerQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for triggers under a collection in the Azure DocumentDB database service using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{Trigger} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for udfs under a collection in the Azure DocumentDB database service. It returns An IOrderedQueryable{UserDefinedFunction>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{UserDefinedFunction} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for udfs under a collection in the Azure DocumentDB database service using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for udfs under a collection in the Azure DocumentDB database service with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM udfs u WHERE u.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "sqrt" }}));
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateConflictQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for conflicts under a collection in the Azure DocumentDB database service. It returns An IOrderedQueryable{Conflict}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Conflict} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateConflictQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for conflicts under a collection in the Azure DocumentDB database service. It returns an IQueryable{Conflict}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateConflictQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for conflicts under a collection in the Azure DocumentDB database service with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery``1(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in the Azure DocumentDB database service using a SQL statement. It returns an IQueryable{T}.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent collection.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in the Azure DocumentDB database service using a SQL statement with parameterized values. It returns an IQueryable{T}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in the Azure DocumentDB database service. It returns IOrderedQueryable{Document}.
            </summary>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Document} that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in the Azure DocumentDB database service using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic> that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in the Azure DocumentDB database service using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for users under an Azure DocumentDB database service. It returns IOrderedQueryable{User}.
            </summary>
            <param name="usersLink">The path link for the users under a database, e.g. dbs/db_rid/users/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{User} that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for users under an Azure DocumentDB database service. It returns IQueryable{dyanamic}.
            </summary>
            <param name="usersLink">The path link for the users under a database, e.g. dbs/db_rid/users/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateUserQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for users under an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="usersLink">The path link for the users under a database, e.g. dbs/db_rid/users/.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreatePermissionQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for permissions under a user in the Azure DocumentDB database service. It returns IOrderedQueryable{Permission}.
            </summary>
            <param name="permissionsLink">The path link for the persmissions under a user, e.g. dbs/db_rid/users/user_rid/permissions/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Permission} that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreatePermissionQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for permissions under a user in the Azure DocumentDB database service using a SQL statement. It returns IQueryable{dynamic}.
            </summary>
            <param name="permissionsLink">The path link for the persmissions under a user, e.g. dbs/db_rid/users/user_rid/permissions/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreatePermissionQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for permissions under a user in the Azure DocumentDB database service using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="permissionsLink">The path link for the persmissions under a user, e.g. dbs/db_rid/users/user_rid/permissions/.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateOfferQuery(Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an Azure DocumentDB database service account. It returns IOrderedQueryable{Offer}.
            </summary>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Offer} that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateOfferQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an Azure DocumentDB database service account using a SQL statement. It returns IQueryable{dynamic}.
            </summary>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClient.CreateOfferQuery(Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an Azure DocumentDB database service account using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IDocumentClient.Session">
            <summary>
            Gets or sets the session object used for session consistency version tracking in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.IDocumentClient.ServiceEndpoint">
            <summary>
            Gets the endpoint Uri for the service endpoint in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.IDocumentClient.WriteEndpoint">
            <summary>
            Gets the current write endpoint chosen based on availability and preference in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.IDocumentClient.ReadEndpoint">
            <summary>
            Gets the current read endpoint chosen based on availability and preference in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.IDocumentClient.ConnectionPolicy">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> used by the client in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.IDocumentClient.AuthKey">
            <summary>
            Gets the AuthKey used by the client in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.IDocumentClient.ConsistencyLevel">
            <summary>
            Gets the configured <see cref="T:Microsoft.Azure.Documents.ConsistencyLevel"/> of the client in the Azure DocumentDB database service. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IMediaHandler.HeadMediaAsync(System.String,System.Collections.Specialized.NameValueCollection)">
            <returns>
            ResponseHeaders,
            Media Attributes
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IMediaHandler.DownloadMediaAsync(System.String,System.Collections.Specialized.NameValueCollection,System.TimeSpan)">
            <returns>
            Stream,
            ResponseHeaders,
            Media Attributes
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.IMediaResponse">
            <summary>
            Captures the APIs for responses associated with media resource in the Azure DocumentDB database service.
            Interface exposed for mocking purposes.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IMediaResponse.ActivityId">
            <summary> 
            Gets the Activity ID for the request associated with the media resource in the Azure DocumentDB database service.
            </summary>
            <value>The Activity ID for the request.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IMediaResponse.ContentLength">
            <summary>
            Gets the HTTP ContentLength header value for the response associated with the media resource in the Azure DocumentDB database service.
            </summary>
            <value>The HTTP ContentLength header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IMediaResponse.ContentType">
            <summary>
            Gets the HTTP ContentType header value for the response associated with the media resource in the Azure DocumentDB database service.
            </summary>
            <value>The HTTP ContentType header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IMediaResponse.CurrentMediaStorageUsageInMB">
            <summary>
            Gets the current attachment content (media) usage in megabytes for the media resource in the Azure DocumentDB database service.
            </summary>
            <value>The current attachment content (media) usage in megabytes.</value>
            <remarks>This value is retrieved from the gateway. The value is returned from
            cached information updated periodically and is not guaranteed to be real time.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IMediaResponse.MaxMediaStorageUsageInMB">
            <summary>
            Gets the attachment content (media) storage quota in megabytes for the media resource in the Azure DocumentDB database service. Retrieved from gateway.
            </summary>
            <value>The attachment content (media) storage quota in megabytes.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IMediaResponse.Media">
            <summary>
            Gets the attachment content stream for the media resource in the Azure DocumentDB database service.
            </summary>
            <value>The attachment content stream.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IMediaResponse.ResponseHeaders">
            <summary>
            Gets the headers associated with the response associated with the media resource in the Azure DocumentDB database service.
            </summary>
            <value>The headers associated with the response.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IMediaResponse.Slug">
            <summary>
            Gets the HTTP slug header value for the response associcated with the media resource in the Azure DocumentDB database service.
            </summary>
            <value>The HTTP slug header value.</value>
        </member>
        <member name="T:Microsoft.Azure.Documents.IncludedPath">
            <summary> 
            Specifies a path within a JSON document to be included in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IncludedPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.IncludedPath"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IncludedPath.Clone">
            <summary>
            Creates a copy of the included path in the Azure DocumentDB database service. 
            </summary>
            <returns>A clone of the included path.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IncludedPath.Path">
            <summary>
            Gets or sets the path to be indexed in the Azure DocumentDB database service.
            </summary>
            <value>
            The path to be indexed.
            </value>
            <remarks>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for how to specify paths.
            Some valid examples: /"prop"/?, /"prop"/**, /"prop"/"subprop"/?, /"prop"/[]/?
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.IncludedPath.Indexes">
            <summary>
            Gets or sets the collection of <see cref="T:Microsoft.Azure.Documents.Index"/> objects to be applied for this included path in the Azure DocumentDB database service.
            </summary>
            <value>
            The collection of the <see cref="T:Microsoft.Azure.Documents.Index"/> objects to be applied for this included path.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexingDirective">
            <summary> 
            Specifies whether or not the resource in the Azure DocumentDB database is to be indexed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingDirective.Default">
            <summary>
            Use any pre-defined/pre-configured defaults.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingDirective.Include">
            <summary>
            Index the resource.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingDirective.Exclude">
            <summary>
             Do not index the resource.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexingMode">
            <summary> 
            Specifies the supported indexing modes in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingMode.Consistent">
            <summary>
            Index is updated synchronously with a create, update or delete operation.
            </summary>
            <remarks>
            With consistent indexing, query consistency is the same as the default consistency level for the database account. 
            The index is always kept up to date with the data.
            
            The default IndexingMode is Consistent.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingMode.Lazy">
            <summary>
            Index is updated asynchronously with respect to a create, update or delete operation.
            </summary>
            <remarks>
            With lazy indexing, queries are eventually consistent. 
            The index is updated when the collection is operating below full throughput capacity (Request units per second). 
            
            Write operations will consume fewer request units (RequestCharge) at the time of write.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingMode.None">
            <summary>
            No index is provided.
            </summary>
            <remarks>
            Setting IndexingMode to "None" drops the index. Use this if you don't want to maintain the index for a document collection, to save the storage cost or improve the write throughput. Your queries will degenerate to scans of the entire collection.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexingPath">
            <summary> 
            Specifies the indexing policy for a JSON path within documents in a DocumentDB collection.
            </summary>
            <remarks>
            Within documents, you can choose which paths must be included or excluded from indexing. This can offer improved write 
            performance and lower index storage for scenarios when the query patterns are known beforehand. Index paths start with 
            the root (/) and typically end with the ? wildcard operator, denoting that there are multiple possible values for the 
            prefix. 
            For e.g., to serve SELECT * FROM Families F WHERE F.familyName = "Andersen", you must include an index path 
            for /"familyName"/?in the collection’s index policy.
            
            Index paths can also use the * wildcard operator to specify the behavior for paths recursively under the prefix. 
            For e.g., /"payload"/* can be used to exclude everything under the payload property from indexing.
            
            For additional details, refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy
            </remarks>
            <example>
            The following example indexes a collection for queries like "SELECT * FROM docs d WHERE d.CreatedTimestamp &gt; 5555".
            <code language="c#">
            <![CDATA[
            var collection = new DocumentCollection { Id = "myCollection" };
            collection.IndexingPolicy.IncludedPaths.Add(
                new IndexingPath 
                {
                    IndexType = IndexType.Range,
                    Path = "/\"CreatedTimestamp\"/?",
                    NumericPrecision = 7
                });
            collection.IndexingPolicy.IncludedPaths.Add(
                new IndexingPath 
                {
                    Path = "/"
                });
                
            //create collection.
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.IndexingPolicy"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.IndexingPath"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPath.Clone">
            <summary>
            Creates a copy of the indexing path.
            </summary>
            <returns>A clone of the indexing path.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPath.Path">
            <summary>
            Gets or sets the path to be indexed.
            </summary>
            <value>
            The path to be indexed.
            </value>
            <remarks>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for how to specify paths.
            Some valid examples: /"prop"/?, /"prop"/**, /"prop"/"subprop"/?, /"prop"/[]/?
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPath.IndexType">
            <summary>
            Gets or sets the type of indexing to be applied.
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.IndexType"/> enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPath.NumericPrecision">
            <summary>
            Gets or sets the precision for this particular index path for numeric data.
            </summary>
            <value>
            The precision for this particular index path for numeric data.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPath.StringPrecision">
            <summary>
            Gets or sets the precision for this particular index path for string data.
            </summary>
            <value>
            The precision for this particular index path for string data.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexingPolicy">
            <summary>
            Represents the indexing policy configuration for a collection in the Azure DocumentDB database service.
            </summary> 
            <remarks>
            Indexing policies can used to configure which properties (JSON paths) are included/excluded, whether the index is updated consistently
            or offline (lazy), automatic vs. opt-in per-document, as well as the precision and type of index per path.
            <para>
            Refer to <see>http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/</see> for additional information on how to specify
            indexing policies.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.IndexingPolicy"/> class for the Azure DocumentDB database service.
            </summary>
            <remarks>
            Indexing mode is set to consistent.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPolicy.#ctor(Microsoft.Azure.Documents.Index[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.IndexingPolicy"/> class with the specified set of indexes as 
            default index specifications for the root path for the Azure DocumentDB database service.
            </summary>
            <param name="defaultIndexOverrides">Comma seperated set of indexes that serve as default index specifications for the root path.</param>
            <seealso cref="T:Microsoft.Azure.Documents.Index"/>
            <example>
            The following example shows how to override the default indexingPolicy for root path:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndexOverride = Index.Hash(DataType.String, 5);
            RangeIndex rangeIndexOverride = Index.Range(DataType.Number, 2);
            SpatialIndex spatialIndexOverride = Index.Spatial(DataType.Point);
            
            IndexingPolicy indexingPolicy = new IndexingPolicy(hashIndexOverride, rangeIndexOverride, spatialIndexOverride);
            ]]>
            </code>
            </example>
            <example>
            If you would like to just override the indexingPolicy for Numbers you can specify just that:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndexOverride = Index.Range(DataType.Number, 2);
            
            IndexingPolicy indexingPolicy = new IndexingPolicy(rangeIndexOverride);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPolicy.Clone">
            <summary>
            Performs a deep copy of the indexing policy for the Azure DocumentDB database service.
            </summary>
            <returns>
            A clone of the indexing policy.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicy.Automatic">
            <summary>
            Gets or sets a value that indicates whether automatic indexing is enabled for a collection in the Azure DocumentDB database service.
            </summary>
            <remarks>
            In automatic indexing, documents can be explicitly excluded from indexing using <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>.  
            In manual indexing, documents can be explicitly included.
            </remarks>
            <value>
            True, if automatic indexing is enabled; otherwise, false.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicy.IndexingMode">
            <summary>
            Gets or sets the indexing mode (consistent or lazy) in the Azure DocumentDB database service.
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.IndexingMode"/> enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicy.IncludedPaths">
            <summary>
            Gets or sets the collection containing <see cref="T:Microsoft.Azure.Documents.IncludedPath"/> objects in the Azure DocumentDB database service.
            </summary>
            <value>
            The collection containing <see cref="T:Microsoft.Azure.Documents.IncludedPath"/> objects.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicy.ExcludedPaths">
            <summary>
            Gets or sets the collection containing <see cref="T:Microsoft.Azure.Documents.ExcludedPath"/> objects in the Azure DocumentDB database service.
            </summary>
            <value>
            The collection containing <see cref="T:Microsoft.Azure.Documents.ExcludedPath"/> objects.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexingPolicyOld">
            <summary>
            Represents the indexing policy configuration for a collection.
            </summary> 
            <remarks>
            Indexing policies can used to configure which properties (JSON paths) are included/excluded, whether the index is updated consistently
            or offline (lazy), automatic vs. opt-in per-document, as well as the precision and type of index per path.
            
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/ for additional information on how to specify
            indexing policies.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPolicyOld.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.IndexingPolicyOld"/> class.
            </summary>
            <remarks>
            Indexing mode is set to consistent.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingPolicyOld.included">
            <summary>
            Gets or sets the path level configurations for indexing.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPolicyOld.Clone">
            <summary>
            Performs a deep copy of the indexing policy.
            </summary>
            <returns>
            A clone of the indexing policy.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicyOld.Automatic">
            <summary>
            Gets or sets a value that indicates whether automatic indexing is enabled for a collection.
            </summary>
            <remarks>
            In automatic indexing, documents can be explicitly excluded from indexing using <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>.  
            In manual indexing, documents can be explicitly included.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicyOld.IndexingMode">
            <summary>
            Gets or sets the indexing mode (consistent or lazy).
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.IndexingMode"/> enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicyOld.IncludedPaths">
            <summary>
            Gets or sets the list containing included paths.
            </summary>
            <value>
            The list containing included paths.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicyOld.ExcludedPaths">
            <summary>
            Gets or sets the list containing excluded paths.
            </summary>
            <value>
            The list containing excluded paths.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexKind">
            <summary>
            These are the indexing types available for indexing a path in the Azure DocumentDB database service.
            </summary> 
            <remarks>
            For additional details, refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexKind.Hash">
            <summary>
            The index entries are hashed to serve point look up queries.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop = 5
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexKind.Range">
            <summary>
            The index entries are ordered. Range indexes are optimized for inequality predicate queries with efficient range scans.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop > 5
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexKind.Spatial">
            <summary>
            The index entries are indexed to serve spatial queries.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM Root r WHERE ST_DISTANCE({"type":"Point","coordinates":[71.0589,42.3601]}, r.location) $LE 10000
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexType">
            <summary>
            These are the indexing types available for indexing a path in the Azure DocumentDB database service.
            </summary> 
            <remarks>
            For additional details, refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexType.Hash">
            <summary>
            The index entries are hashed to serve point look up queries.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop = 5
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexType.Range">
            <summary>
            The index entries are ordered. Range indexes are optimized for inequality predicate queries with efficient range scans.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop > 5
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.PartitionStatistics">
            <summary>
            Represents statistics for partition in the Azure DocumentDB database service.
            </summary> 
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionStatistics.PartitionKeyRangeId">
            <summary>
            Represents partition key range ID of a <see cref="T:Microsoft.Azure.Documents.PartitionStatistics"/> in the Azure DocumentDB database service.
            </summary> 
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionStatistics.SizeInKB">
            <summary>
            Represents partition size in KB in the Azure DocumentDB database service.
            </summary> 
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionStatistics.DocumentCount">
            <summary>
            Represents document counts in a partition in the Azure DocumentDB database service.
            </summary> 
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionStatistics.PartitionKeyStatistics">
            <summary>
            Represents partition key statistics of a partition in the Azure DocumentDB database service.
            </summary> 
        </member>
        <member name="T:Microsoft.Azure.Documents.PartitionKeyStatistic">
            <summary>
            Represents statistic for a partition key in the Azure DocumentDB database service.
            </summary> 
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionKeyStatistic.PartitionKey">
            <summary>
            Represents the partition key of a <see cref="T:Microsoft.Azure.Documents.PartitionKeyStatistic"/> in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionKeyStatistic.SizeInKB">
            <summary>
            Represents the percentage of the partition key in a particular partition in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.IResourceResponse`1">
            <summary>
            Interface exposed for mocking purposes for the Azure DocumentDB database service.
            </summary>
            <typeparam name="TResource">The resource type.</typeparam>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IResourceResponse`1.Resource">
            <summary>
            Gets the resource returned in the response.
            </summary>
            <value>
            The resource returned in the response.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.ShouldRetryResult.BackoffTime">
            <summary>
            How long to wait before next retry. 0 indicates retry immediately.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ShouldRetryResult.ExceptionToThrow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ShouldRetryResult`1.PolicyArg1">
            <summary>
            Argument to be passed to the callback method.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IRetryPolicy.ShouldRetryAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>
            Method that is called to determine from the policy that needs to retry on the exception
            </summary>
            <param name="exception">Exception during the callback method invocation</param>
            <param name="cancellationToken"></param>
            <returns>If the retry needs to be attempted or not</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IRetryPolicyFactory.GetRequestPolicy">
            <summary>
            Method that is called to get the retry policy for a non-query request.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IDocumentClientRetryPolicy.OnBeforeSendRequest(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            Method that is called before a request is sent to allow the retry policy implementation
            to modify the state of the request.
            </summary>
            <param name="request">The request being sent to the service.</param>
            <remarks>
            Currently only read operations will invoke this method. There is no scenario for write
            operations to modify requests before retrying.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.IServiceConfigurationReader">
            <summary>
            Interface for resolving the service settings.
            Implementations:
            NamingServiceConfigurationReader : Multi tenant Cloud implementation.
            GatewayServiceConfigurationReader: Client implementation.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.IStoredProcedureResponse`1">
            <summary>
            Interface exposed for mocking purposes for the Azure DocumentDB database service.
            </summary>
            <typeparam name="TValue">The returned value type of the stored procedure.</typeparam>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IStoredProcedureResponse`1.ActivityId">
            <summary>
            Gets the Activity ID of the request.
            </summary>
            <value>
            The Activity ID of the request.
            </value>
            <remarks>Every request is traced with a globally unique ID. 
            Include activity ID in tracing application failures and when contacting DocumentDB support.
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IStoredProcedureResponse`1.CurrentResourceQuotaUsage">
            <summary>
            Gets the delimited string containing the usage of each resource type within the collection.
            </summary>
            <value>The delimited string containing the number of used units per resource type within the collection.</value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IStoredProcedureResponse`1.MaxResourceQuota">
            <summary>
            Gets the delimited string containing the quota of each resource type within the collection.
            </summary>
            <value>The delimited string containing the number of used units per resource type within the collection.</value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IStoredProcedureResponse`1.RequestCharge">
            <summary>
            Gets the number of normalized request units (RUs) charged.
            </summary>
            <value>
            The number of normalized request units (RUs) charged.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IStoredProcedureResponse`1.Response">
            <summary>
            Gets the response of a stored procedure, serialized into the given type.
            </summary>
            <value>The response of a stored procedure, serialized into the given type.</value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IStoredProcedureResponse`1.ResponseHeaders">
            <summary>
            Gets the headers associated with the response.
            </summary>
            <value>
            Headers associated with the response.
            </value>
            <remarks>
            Provides access to all HTTP response headers returned from the 
            DocumentDB API.
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IStoredProcedureResponse`1.SessionToken">
            <summary>
            Gets the token for use with session consistency requests.
            </summary>
            <value>
            The token for use with session consistency requests.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IStoredProcedureResponse`1.ScriptLog">
            <summary>
            Gets the output from stored procedure console.log() statements.
            </summary>
            <value>
            Output from console.log() statements in a stored procedure.
            </value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.IStoredProcedureResponse`1.StatusCode">
            <summary>
            Gets the request completion status code.
            </summary>
            <value>The request completion status code</value>
            <remarks>
            This is exposed for mocking purposes for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.ITypeResolver`1">
            <summary>
            Type resolver based on an input
            </summary>
            <typeparam name="T">Type T for which the resolver returns correct object of T in T's hierarchy</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Documents.ITypeResolver`1.Resolve(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Returns a reference of an object in T's hierarchy based on a property bag.
            </summary>
            <param name="propertyBag">Property bag used to deserialize T</param>
            <returns>Object of type T</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.DatabaseAccountLocation">
            <summary>
            The DatabaseAccountLocation class represents an Azure DocumentDB database account in a specific region.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.DatabaseAccountLocation.#ctor">
            <summary>
            Creates a new instance of the DatabaseAccountLocation object in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccountLocation.Name">
            <summary>
            Gets the name of the database account location in the Azure DocumentDB database service. For example,
            "West US" as the name of the database account location in the West US region.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccountLocation.DatabaseAccountEndpoint">
            <summary>
            Gets the Url of the database account location in the Azure DocumentDB database service. For example,
            "https://contoso-WestUS.documents.azure.com:443/" as the Url of the 
            database account location in the West US region.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.MediaIdHelper">
            <summary>
            Helper class to generate and parse media id (only used in frontend)
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.MediaOptions">
            <summary> 
            Options used with attachment content (aka media) creation in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaOptions.Slug">
            <summary>
            Gets or sets the Slug header in the Azure DocumentDB database service.
            </summary>
            <value>
            The slug header.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaOptions.ContentType">
            <summary>
            Gets or sets the ContentType header in the Azure DocumentDB database service.
            </summary>
            <value>
            The ContentType header
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.MediaResponse">
            <summary>
            Represents the response associated with retrieving attachment content from the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.MediaResponse.#ctor">
            <summary>
            Constructor exposed for mocking purposes for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.ActivityId">
            <summary> 
            Gets or sets the Activity ID for the request in the Azure DocumentDB database service.
            </summary>
            <value>The Activity ID for the request.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.Media">
            <summary>
            Gets or sets the attachment content stream in the Azure DocumentDB database service.
            </summary>
            <value>The attachment content stream.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.Slug">
            <summary>
            Gets or sets the HTTP slug header value in the Azure DocumentDB database service.
            </summary>
            <value>The HTTP slug header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.ContentType">
            <summary>
            Gets or sets the HTTP ContentType header value in the Azure DocumentDB database service.
            </summary>
            <value>The HTTP ContentType header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.ContentLength">
            <summary>
            Gets or sets the HTTP ContentLength header value in the Azure DocumentDB database service.
            </summary>
            <value>The HTTP ContentLength header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.MaxMediaStorageUsageInMB">
            <summary>
            Gets the attachment content (media) storage quota in megabytes from the Azure DocumentDB database service.
            Retrieved from gateway.
            </summary>
            <value>The attachment content (media) storage quota in megabytes.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.CurrentMediaStorageUsageInMB">
            <summary>
            Gets the current attachment content (media) usage in megabytes from the Azure DocumentDB database service.
            </summary>
            <value>The current attachment content (media) usage in megabytes.</value>
            <remarks>This value is retrieved from the gateway.
            The value is returned from
            cached information updated periodically and is not guaranteed to be real time.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.ResponseHeaders">
            <summary>
            Gets the headers associated with the response from the Azure DocumentDB database service.
            </summary>
            <value>The headers associated with the response.</value>
        </member>
        <member name="T:Microsoft.Azure.Documents.MigrateCollectionDirective">
            <summary> 
            Specifies whether or not the resource is to be indexed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.MigrateCollectionDirective.Thaw">
            <summary>
             Move to SSD
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.MigrateCollectionDirective.Freeze">
            <summary>
            Move to HDD.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.NetUtil.GetNonLoopbackIpV4Address">
            <summary>
            Get a single non-loopback (i.e., not 127.0.0.0/8)
            IP address of the local machine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.NetUtil.GetLocalEmulatorIpV4Address">
            <summary>
            Get a single non-loopback (i.e., not 127.0.0.0/8)
            IP address of the local machine.  Similar to GetNonLoopbackIpV4Address but allows
            non-dns eligible adapters
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Offer">
            <summary>
            Represents the offer for a resource (collection) in the Azure DocumentDB database service.
            </summary>
            <remarks>
            Currently, offers are only bound to the collection resource.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Offer.#ctor">
            <summary>
            Initializes a Resource offer for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Offer.#ctor(Microsoft.Azure.Documents.Offer)">
            <summary>
            Initializes a Resource offer from another offer object for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Offer.OfferVersion">
            <summary>
            Gets or sets the version of this offer resource in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Offer.ResourceLink">
            <summary>
            Gets or sets the self-link of a resource to which the resource offer applies to in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Offer.OfferType">
            <summary>
            Gets or sets the OfferType for the resource offer in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Offer.OfferResourceId">
            <summary>
            Gets or sets the Id of the resource on which the Offer applies to in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.OfferContentV2">
            <summary>
            Represents content properties tied to the Standard pricing tier for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferContentV2.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Azure.Documents.OfferContentV2"/> class 
            represents content properties tied to the Standard pricing tier for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferContentV2.#ctor(System.Int32)">
            <summary>
            Constructor accepting offer throughput.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Azure.Documents.OfferContentV2"/> class 
            represents content properties tied to the Standard pricing tier for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferContentV2.#ctor(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Constructor accepting offer throughput and Request Units(RU)/Minute throughput is enabled or disabled.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Azure.Documents.OfferContentV2"/> class 
            represents content properties tied to the Standard pricing tier for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.OfferContentV2.OfferThroughput">
            <summary>
            Represents customizable throughput chosen by user for his collection in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.OfferContentV2.OfferIsRUPerMinuteThroughputEnabled">
            <summary>
            Represents Request Units(RU)/Minute throughput is enabled/disabled for collection in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.OfferContentV2.CollectionThroughputInfo">
            <summary>
            Represents throughput information relating to the collection that this offer is associated with.
            This is an internal attribute populated only for purposes of post-split throughput adjustments.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.CollectionThroughputInfo">
            <summary>
            Represents metadata relating to the collection's throughput characteristics.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.CollectionThroughputInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Azure.Documents.CollectionThroughputInfo"/> class 
            represents properties tied to the Standard pricing tier for the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.CollectionThroughputInfo.MinimumRUForCollection">
            <summary>
            Represents the minimum RUs possible for a collection in its current configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.CollectionThroughputInfo.NumberOfPhysicalPartitions">
            <summary>
            Represents the number of physical partitions in a collection.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.OfferTypeResolver">
            <summary>
            Offer resolver based on input.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferTypeResolver.#ctor(System.Boolean)">
            <summary>
            Constructor with a flag indicating whether this is invoked in response or request path.
            </summary>
            <param name="isResponse">True if invoked in response path</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferTypeResolver.Microsoft#Azure#Documents#ITypeResolver{Microsoft#Azure#Documents#Offer}#Resolve(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Returns a reference of an object in Offer's hierarchy based on a property bag.
            </summary>
            <param name="propertyBag">Property bag used to deserialize Offer object</param>
            <returns>Object of type Offer or OfferV2</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.OfferV2">
            <summary>
            Represents the Standard pricing offer for a resource in the Azure DocumentDB database service.
            </summary>
            <remarks>
            Currently, offers are only bound to the collection resource.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferV2.#ctor">
            <summary>
            Initializes a Resource offer with the Standard pricing tier for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferV2.#ctor(System.Int32)">
            <summary>
            Initializes a Resource offer with the Standard pricing tier for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferV2.#ctor(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Initializes a Resource offer with the Standard pricing tier for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferV2.#ctor(Microsoft.Azure.Documents.Offer,System.Int32)">
            <summary>
            Initializes a Resource offer with the Standard pricing tier, from a reference Offer object for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferV2.#ctor(Microsoft.Azure.Documents.Offer,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Initializes a Resource offer with the Standard pricing tier, from a reference Offer object for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.OfferV2.Content">
            <summary>
            Gets or sets the OfferContent for the resource offer in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.OperationKind">
            <summary>
            These are the operation types resulted in a version conflict on a resource. 
            </summary>
            <remarks>
            When a version conflict occurs during an async operation, retrieving the <see cref="T:Microsoft.Azure.Documents.Conflict"/> instance will allow you 
            to determine which resource and operation caause the conflict.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.OperationKind.Invalid">
            <summary>
            An invalid operation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.OperationKind.Create">
            <summary>
            A create operation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.OperationKind.Replace">
            <summary>
            An replace operation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.OperationKind.Delete">
            <summary>
            A delete operation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.OperationKind.Read">
            <summary>
            This operation does not apply to Conflict.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.PartitionKey">
            <summary>
            Represents a partition key value that identifies the target partition of a collection in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.#ctor">
            <summary>
            Instantiate a new instance of the <see cref="T:Microsoft.Azure.Documents.PartitionKey"/> object.
            </summary>
            <remarks>
            Private constructor used internal to create an instance from a JSON string.
            </remarks>
            <remarks>
            This class represents a partition key value that identifies the target partition of a collection in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.#ctor(System.Object)">
            <summary>
            Instantiate a new instance of the <see cref="T:Microsoft.Azure.Documents.PartitionKey"/> object.
            </summary>
            <param name="keyValue">
            The value of the document property that is specified as the partition key when a collection is created.
            </param>
            <remarks>
            This class represents a partition key value that identifies the target partition of a collection in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.FromJsonString(System.String)">
            <summary>
            Instantiate a new instance of the <see cref="T:Microsoft.Azure.Documents.PartitionKey"/> object.
            </summary>
            <param name="keyValue">
            The value of the document property that is specified as the partition key
            when a collection is created, in serialized JSON form.
            </param>
            <remarks>
            This class represents a partition key value that identifies the target partition of a collection in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.FromInternalKey(Microsoft.Azure.Documents.Routing.PartitionKeyInternal)">
            <summary>
            Instantiate a new instance of the <see cref="T:Microsoft.Azure.Documents.PartitionKey"/> object.
            </summary>
            <param name="keyValue">
            The value of the document property that is specified as the partition key
            when a collection is created, in PartitionKeyInternal format.
            </param>
            <remarks>
            This class represents a partition key value that identifies the target partition of a collection in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.ToString">
            <summary>
            Override the base ToString method to output the value of each key component, separated by a space.
            </summary>
            <returns>The string representation of all the key component values.</returns>
            <remarks>
            This class represents a partition key value that identifies the target partition of a collection in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.Equals(System.Object)">
            <summary>
            Overrides the Equal operator for object comparisons between two instances of <see cref="T:Microsoft.Azure.Documents.PartitionKey"/>.
            </summary>
            <param name="other">The object to compare with.</param>
            <returns>True if two object instance are considered equal.</returns>
            <remarks>
            This class represents a partition key value that identifies the target partition of a collection in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.GetHashCode">
            <summary>
            Hash function to return the hash code for the object.
            </summary>
            <returns>The hash code for this <see cref="T:Microsoft.Azure.Documents.PartitionKey"/> instance</returns>
            <remarks>
            This class represents a partition key value that identifies the target partition of a collection in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionKey.InternalKey">
            <summary>
            Gets the internal <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/> object;
            </summary>
            <remarks>
            This class represents a partition key value that identifies the target partition of a collection in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.PartitionKeyDefinition">
            <summary> 
            Specifies a partition key definition for a particular path in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionKeyDefinition.Paths">
            <summary>
            Gets or sets the paths to be partitioned in the Azure DocumentDB database service.
            </summary>
            <value>
            The path to be partitioned.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionKeyDefinition.Kind">
            <summary>
            Gets or sets the kind of partitioning to be applied in the Azure DocumentDB database service.
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.PartitionKind"/> enumeration.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.PartitionKeyRange">
            <summary>
            Represents a partition key range in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKeyRange.Equals(System.Object)">
            <summary>
            Determines whether this instance in the Azure DocumentDB database service and a specified object have the same value.
            </summary>
            <param name="obj">The object to compare to this instance</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKeyRange.GetHashCode">
            <summary>
            Returns the hash code for this instance in the Azure DocumentDB database service.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKeyRange.Equals(Microsoft.Azure.Documents.PartitionKeyRange)">
            <summary>
            Determines whether this instance in the Azure DocumentDB database service and a specified PartitionKeyRange object have the same value.
            </summary>
            <param name="other">The PartitionKeyRange object to compare to this instance</param>
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionKeyRange.MinInclusive">
            <summary>
            Represents the minimum possible value of a PartitionKeyRange in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionKeyRange.MaxExclusive">
            <summary>
            Represents maximum exclusive value of a PartitionKeyRange (the upper, but not including this value, boundary of PartitionKeyRange)
            in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionKeyRange.Parents">
            <summary>
            Contains ids or parent ranges in the Azure DocumentDB database service.
            For example if range with id '1' splits into '2' and '3',
            then Parents for ranges '2' and '3' will be ['1'].
            If range '3' splits into '4' and '5', then parents for ranges '4' and '5'
            will be ['1', '3'].
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKeyRangeIdentity.#ctor(System.String)">
            <summary>
            This should only be used for user provided partitionKeyRangeId, because in this case
            he knows what he is doing. If collection was deleted/created with same name - it is his responsibility.
            
            If our code infers partitionKeyRangeId automatically and uses collection information from collection cache,
            we need to ensure that request will reach correct collection. In this case constructor which takes collectionRid MUST
            be used.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.PartitionKind">
            <summary>
            These are the partitioning types available for a partition key definition in the Azure DocumentDB database service.
            </summary> 
            <remarks>Only PartitionKind.Hash is supported at this time.</remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.PartitionKind.Hash">
            <summary>
            The partition key definition path is hashed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.PartitionKind.Range">
            <summary>
            The partition key definition path is ordered.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PathsHelper.TryParsePathSegments(System.String,System.Boolean@,System.String@,System.String@,System.Boolean@,System.String)">
            <summary>
                The output resourceId can be 
                a: (Rid based) DgJ5AJeIfQABAAAAAAAAAPy3CWY= 
                b: (name based) dbs/dbName/colls/collectionName/docs/documentName/attachments/attachmentName",
                For name based, it always trimmed, RemoveTrailingSlashes, RemoveLeadingSlashes,  urldecoded
            </summary>
            <param name="resourceUrl"></param>
            <param name="isFeed"></param>
            <param name="resourcePath"> like dbs, colls</param>
            <param name="resourceIdOrFullName"></param>
            <param name="isNameBased"></param>
            <param name="clientVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.PerfCounters.InstallCounters">
            <summary>
            Creating performance counter category is a privileged operation and
            hence done in the WinFab service setup entrypoint that is invoked before
            the service is actually started.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PerfCounters.CreatePerfCounterCategory(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)">
             
             Create a perf counter category with the provided name and creates the provided list of perf counters inside
             the category.
            
        </member>
        <member name="F:Microsoft.Azure.Documents.PerformanceActivity.OperationDuration">
            <summary>
            The delegate is populated by the assembly that desires to trace the <see cref="T:Microsoft.Azure.Documents.PerformanceActivity"/>.
            Hence ignore the warning "CS0649: field is never assigned to, and will always have its default value null"
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Permission">
            <summary>
            Represents a per-User permission to access a specific resource in the Azure DocumentDB database service, for example Document or Collection.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Permission.ResourceLink">
            <summary> 
            Gets or sets the self-link of resource to which the permission applies in the Azure DocumentDB database service.
            </summary>
            <value>
            The self-link of the resource to which the permission applies.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Permission.ResourcePartitionKey">
            <summary>
            Gets or sets optional partition key value for the permission in the Azure DocumentDB database service.
            A permission applies to resources when two conditions are met:
                  1. <see cref="P:Microsoft.Azure.Documents.Permission.ResourceLink"/> is prefix of resource's link.
                        For example "/dbs/mydatabase/colls/mycollection" applies to "/dbs/mydatabase/colls/mycollection" and "/dbs/mydatabase/colls/mycollection/docs/mydocument"
                  2. <see cref="P:Microsoft.Azure.Documents.Permission.ResourcePartitionKey"/> is superset of resource's partition key.
                        For example absent/empty partition key is superset of all partition keys.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Permission.PermissionMode">
            <summary>
            Gets or sets the permission mode in the Azure DocumentDB database service.
            </summary>
            <value>
            The <see cref="P:Microsoft.Azure.Documents.Permission.PermissionMode"/> mode: Read or All.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Permission.Token">
            <summary>
            Gets the access token granting the defined permission from the Azure DocumentDB database service.
            </summary>
            <value>
            The access token granting the defined permission.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.PermissionMode">
            <summary> 
            These are the access permissions for creating or replacing a <see cref="T:Microsoft.Azure.Documents.Permission"/> resource in the Azure DocumentDB database service.
            </summary>
            <remarks>
            A Permission resource associates an access permission of a user on a particular resource.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.PermissionMode.Read">
            <summary>
            Read permission mode will provide the user with Read only access to a resource.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.PermissionMode.All">
            <summary>
            All permission mode will provide the user with full access(read, insert, replace and delete) to a resource.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.Protocol">
            <summary>
            Specifies the protocol to be used by DocumentClient for communicating to the Azure DocumentDB service.
            </summary>
            <example>
            <code language="c#">
            <![CDATA[
            DocumentClient client = new DocumentClient(endpointUri, masterKey, new ConnectionPolicy 
            { 
                ConnectionMode = ConnectionMode.Direct,
                ConnectionProtocol = Protocol.Tcp
            }); 
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ConnectionMode"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.Protocol.Https">
            <summary>
            Specifies the HTTPS protocol.
            </summary>
            <remarks>Default connectivity.</remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.Protocol.Tcp">
            <summary>
            Specifies a custom binary protocol on TCP.
            </summary>
            <remarks>Better for performance.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.QuorumReader">
            <summary>
            QuorumReader wraps the client side quorum logic on top of the StoreReader
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.QuorumReader.ReadPrimaryAsync(Microsoft.Azure.Documents.DocumentServiceRequest,System.Int32,System.Boolean)">
            <summary>
            Read and get response from Primary
            </summary>
            <param name="entity"></param>
            <param name="readQuorum"></param>
            <param name="useSessionToken"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.QuorumReader.ReadQuorumResult.SelectedResponse">
            <summary>
            Response selected to lock on the LSN. This is the response with the highest
            LSN
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QuorumReader.ReadQuorumResult.StoreResponses">
            <summary>
            All store responses from Quorum Read.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.RangeIndex">
            <summary>
            Specifies an instance of the <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> class in the Azure DocumentDB database service.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop &gt; 5.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.RangeIndex.#ctor(Microsoft.Azure.Documents.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> class with specified DataType for the Azure DocumentDB database service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <seealso cref="P:Microsoft.Azure.Documents.RangeIndex.DataType"/>
            <example>
            Here is an example to instantiate RangeIndex class passing in the DataType:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndex = new RangeIndex(DataType.Number);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.RangeIndex.#ctor(Microsoft.Azure.Documents.DataType,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> class with specified DataType and precision for the Azure DocumentDB database service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <param name="precision">Specifies the precision to be used for the data type associated with this index.</param>
            <seealso cref="P:Microsoft.Azure.Documents.RangeIndex.DataType"/>
            <example>
            Here is an example to instantiate RangeIndex class passing in the DataType and precision:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndex = new RangeIndex(DataType.Number, -1);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.RangeIndex.Clone">
            <summary>
            Creates a copy of the range index for the Azure DocumentDB database service.
            </summary>
            <returns>A clone of the range index.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.RangeIndex.DataType">
            <summary>
            Gets or sets the data type for which this index should be applied in the Azure DocumentDB database service.
            </summary>
            <value>
            The data type for which this index should be applied.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.RangeIndex.Precision">
            <summary>
            Gets or sets the precision for this particular index in the Azure DocumentDB database service.
            </summary>
            <value>
            The precision for this particular index. Returns null, if not set.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.ReadPolicy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ReadPolicy.PrimaryReadCoefficient">
            <summary>
            Relative weight of primary to serve read requests. Higher the value, it is preferred to issue reads to primary.
            Direct connectivity client can use this value to dynamically decide where to send reads to effectively use the service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ReadPolicy.SecondaryReadCoefficient">
            <summary>
            Relative weight of secondary to serve read requests. Higher the value, it is preferred to issue reads to secondary.
            Direct connectivity client can use this value to dynamically decide where to send reads to effectively use the service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.ReplicatedResourceClient">
            <summary>
            ReplicatedResourceClient uses the ConsistencyReader to make requests to backend
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.RequestChargeTracker.numberOfDecimalPointToReserveFactor">
            <summary>
            100 preserves 2 decimal points, 1000 3 and so on. This is because Interlocked operations are not supported for doubles.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.RequestChargeTracker.totalRUsNotServedToClient">
            <summary>
            Total accumulated Charge that would be presented to the client in the next FeedResponse
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.RequestChargeTracker.GetAndResetCharge">
            <summary>
            Gets the Charge incurred so far in a thread-safe manner, and resets the value to zero. The function effectively returns
            all charges accumulated so far, which will be returned to client as a part of the feedResponse. And the value is reset to 0 
            so that we can keep on accumulating any new charges incurred by any new backend calls which returened after the current feedreposnse 
            is served to the user. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.QueryMetrics">
            <summary>
            Query metrics in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.QueryMetrics.op_Addition(Microsoft.Azure.Documents.QueryMetrics,Microsoft.Azure.Documents.QueryMetrics)">
            <summary>
            Add two specified <see cref="T:Microsoft.Azure.Documents.QueryMetrics"/> instances
            </summary>
            <param name="m1">The first <see cref="T:Microsoft.Azure.Documents.QueryMetrics"/> instance</param>
            <param name="m2">The second <see cref="T:Microsoft.Azure.Documents.QueryMetrics"/> instance</param>
            <returns>A new <see cref="T:Microsoft.Azure.Documents.QueryMetrics"/> instance that is the sum of two <see cref="T:Microsoft.Azure.Documents.QueryMetrics"/> instances</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.QueryMetrics.ToString">
            <summary>
            Gets the stringified <see cref="T:Microsoft.Azure.Documents.QueryMetrics"/> instance in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryMetrics.TotalTime">
            <summary>
            Gets the total query time in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryMetrics.RetrievedDocumentCount">
            <summary>
            Gets the number of documents retrieved during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryMetrics.RetrievedDocumentSize">
            <summary>
            Gets the size of documents retrieved in bytes during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryMetrics.OutputDocumentCount">
            <summary>
            Gets the number of documents returned by query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryMetrics.IndexHitRatio">
            <summary>
            Gets the index hit ratio by query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryMetrics.QueryPreparationTimes">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Documents.QueryPreparationTimes"/> instance in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryMetrics.QueryEngineTimes">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Documents.QueryEngineTimes"/> instance in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryMetrics.Retries">
            <summary>
            Gets number of reties in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.QueryPreparationTimes">
            <summary>
            Query preparation metrics in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryPreparationTimes.CompileTime">
            <summary>
            Gets the query compile time in the Azure DocumentDB database service. 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryPreparationTimes.LogicalPlanBuildTime">
            <summary>
            Gets the query logical plan build time in the Azure DocumentDB database service. 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryPreparationTimes.PhysicalPlanBuildTime">
            <summary>
            Gets the query physical plan build time in the Azure DocumentDB database service. 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryPreparationTimes.QueryOptimizationTime">
            <summary>
            Gets the query optimization time in the Azure DocumentDB database service. 
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.QueryEngineTimes">
            <summary>
            Query engine time in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryEngineTimes.IndexLookupTime">
            <summary>
            Gets the query index lookup time in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryEngineTimes.DocumentLoadTime">
            <summary>
            Gets the document loading time during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryEngineTimes.WriteOutputTime">
            <summary>
            Gets the output writing/serializing time during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.QueryEngineTimes.RuntimeExecutionTimes">
            <summary>
            Gets the query runtime execution times during query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.RuntimeExecutionTimes">
            <summary>
            Query runtime execution times in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RuntimeExecutionTimes.TotalTime">
            <summary>
            Gets the total query runtime execution time in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RuntimeExecutionTimes.SystemFunctionExecutionTime">
            <summary>
            Gets the query system function execution time in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RuntimeExecutionTimes.UserDefinedFunctionExecutionTime">
            <summary>
            Gets the query user defined function execution time in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.RequestOptions">
            <summary>
            Encapsulates options that can be specified for different requests issued to the Azure DocumentDB database service.
            </summary>
            <remarks>
            Some of these options are valid for specific operations only. 
            For example, 
            <para>PreTriggerInclude can be used only on create, replace and delete operations on a <see cref="T:Microsoft.Azure.Documents.Document"/> or <see cref="T:Microsoft.Azure.Documents.Attachment"/>. </para>
            <para>ETag, while valid on Replace* and Delete* operations, would have no impact on a Read*, CreateQuery* or Create* operations.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.PreTriggerInclude">
            <summary>
            Gets or sets the trigger to be invoked before the operation in the Azure DocumentDB database service.
            </summary>
            <value> 
            The trigger to be invoked before the operation.
            </value>
            <remarks>
            Only valid when used with Create, Replace and Delete methods for documents.
            Currently only one PreTrigger is permitted per operation.
            </remarks>
            <example>
            The following example shows how to use RequestOptions to include a PreTrigger to execute before persisting the document.
            <code language="c#">
            <![CDATA[
            client.CreateDocumentAsync(collection.SelfLink, 
                new { id = "AndersenFamily", isRegistered = true },
                new RequestOptions { PreTriggerInclude = new List<string> { "validateDocumentContents" } });
            ]]>
            </code>
            </example>
            <see cref="T:Microsoft.Azure.Documents.Trigger"/>
            <see cref="T:System.Collections.Generic.IList`1"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.PostTriggerInclude">
            <summary>
            Gets or sets the trigger to be invoked after the operation in the Azure DocumentDB database service.
            </summary>
            <value>
            The trigger to be invoked after the operation.
            </value>
            <remarks>
            Only valid when used with Create, Replace and Delete methods for documents.
            Currently only one PreTrigger is permitted per operation.
            </remarks>
            <example>
            The following example shows how to use RequestOptions to include a PostTrigger to execute after persisting the document.
            <code language="c#">
            <![CDATA[
            client.CreateDocumentAsync(collection.SelfLink, 
            new { id = "AndersenFamily", isRegistered = true },
            new RequestOptions { PostTriggerInclude = new List<string> { "updateMetadata" } });
            ]]>
            </code>
            </example>
            <see cref="T:Microsoft.Azure.Documents.Trigger"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.AccessCondition">
            <summary>
            Gets or sets the condition (ETag) associated with the request in the Azure DocumentDB database service.
            </summary>
            <value>
            The condition (ETag) associated with the request.
            </value>
            <remarks>
            Most commonly used with the Delete* and Replace* methods of <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> such as <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(Microsoft.Azure.Documents.Document,Microsoft.Azure.Documents.Client.RequestOptions)"/> 
            or <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)"/> methods,
            but can be used with other methods like <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)"/> for caching scenarios. 
            </remarks>
            <example>
            The following example shows how to use RequestOptions with <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)"/> to 
            specify the set of <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.AccessCondition"/> to be used when updating a document
            <code language="c#">
            <![CDATA[
            // If ETag is current, then this will succeed. Otherwise the request will fail with HTTP 412 Precondition Failure
            await client.ReplaceDocumentAsync(
                readCopyOfBook.SelfLink, 
                new Book { Title = "Moby Dick", Price = 14.99 },
                new RequestOptions 
                { 
                    AccessCondition = new AccessCondition 
                    { 
                        Condition = readCopyOfBook.ETag, 
                        Type = AccessConditionType.IfMatch 
                    } 
                 });
            ]]>
            </code>
            </example>
            <see cref="T:Microsoft.Azure.Documents.Client.AccessCondition"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.IndexingDirective">
            <summary>
            Gets or sets the indexing directive (Include or Exclude) for the request in the Azure DocumentDB database service.
            </summary>
            <value>
            The indexing directive to use with a request.
            </value>
            <example>
            The following example shows how to explicitly index a document in a collection with 
            automatic indexing turned off.
            <code language="c#">
            <![CDATA[
            client.CreateDocumentAsync(defaultCollection.SelfLink,
                new { id = "AndersenFamily", isRegistered = true },
                new RequestOptions { IndexingDirective = IndexingDirective.Include });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.IndexingPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.RequestOptions.IndexingDirective"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.ConsistencyLevel">
            <summary>
            Gets or sets the consistency level required for the request in the Azure DocumentDB database service.
            </summary>
            <value>
            The consistency level required for the request.
            </value>
            <remarks>
            DocumentDB offers 4 different consistency levels. Strong, Bounded Staleness, Session and Eventual - in order of strongest to weakest consistency.
            <para>
            While this is set at a database account level, DocumentDB allows a developer to weaken the default consistency level
            for each individual request. 
            </para>
            </remarks>
            <example>
            This example uses RequestOptions to lower the consistency level to Eventual for this single Read operation. 
            <code language="c#">
            <![CDATA[
            Document doc = client.ReadDocumentAsync(documentLink, new RequestOptions { ConsistencyLevel = ConsistencyLevel.Eventual });
            ]]>
            </code>
            </example>
            <seealso cref="P:Microsoft.Azure.Documents.Client.RequestOptions.ConsistencyLevel"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.SessionToken">
             <summary>
             Gets or sets the token for use with session consistency in the Azure DocumentDB database service.
             </summary>
             <value>
             The token for use with session consistency.
             </value>
             
             <remarks>
             One of the <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.ConsistencyLevel"/> for Azure DocumentDB is Session. In fact, this is the deault level applied to accounts. 
             <para>
             When working with Session consistency, each new write request to Azure DocumentDB is assigned a new SessionToken.
             The DocumentClient will use this token internally with each read/query request to ensure that the set consistency level is maintained.
              
             <para>
             In some scenarios you need to manage this Session yourself; 
             Consider a web application with multiple nodes, each node will have its own instance of <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>
             If you wanted these nodes to participate in the same session (to be able read your own writes consistently across web tiers) 
             you would have to send the SessionToken from <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> of the write action on one node
             to the client tier, using a cookie or some other mechanism, and have that token flow back to the web tier for subsequent reads.
             If you are using a round-robin load balancer which does not maintain session affinity between requests, such as the Azure Load Balancer,  
             the read could potentially land on a different node to the write request, where the session was created. 
             </para>
             
             <para>
             If you do not flow the Azure DocumentDB SessionToken across as described above you could end up with inconsistent read results for a period of time.
             </para>
             
             </para>
             </remarks>
             
             <example>
             This example shows how you can retrieve the SessionToken from a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> 
             and then use it on a different instance of <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> within <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             This example assumes that the each instance of the client is running from code within a different AppDomain, such as on different nodes in the case of multiple node web application
             <code language="c#">
             <![CDATA[
             string sessionToken;
             string docSelfLink;
            
             using (DocumentClient client = new DocumentClient(new Uri(""), ""))
             {
                 ResourceResponse<Document> response = client.CreateDocumentAsync(collection.SelfLink, new { id = "an id", value = "some value" }).Result;
                 sessionToken = response.SessionToken;
                 Document created = response.Resource;
                 docSelfLink = created.SelfLink;
             }
                
             using (DocumentClient client = new DocumentClient(new Uri(""), ""))
             {
                 ResourceResponse<Document> read = client.ReadDocumentAsync(docSelfLink, new RequestOptions { SessionToken = sessionToken }).Result; 
             }
             ]]>
             </code>
             </example>
             <seealso cref="P:Microsoft.Azure.Documents.Client.RequestOptions.ConsistencyLevel"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.ResourceTokenExpirySeconds">
            <summary>
            Gets or sets the expiry time for resource token. Used when creating/updating/reading permissions in the Azure DocumentDB database service.
            </summary>
            <value>
            The expiry time in seconds for the resource token.
            </value>
            <remarks>
            When working with Azure DocumentDB Users and Permissions, the way to instantiate an instance of <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> is to 
            get the <see cref="P:Microsoft.Azure.Documents.Permission.Token"/> for the resource the <see cref="T:Microsoft.Azure.Documents.User"/> wants to access and pass this 
            to the authKeyOrResourceToken parameter of <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> constructor
            <para>
            When requesting this Token, a RequestOption for ResourceTokenExpirySeconds can be used to set the length of time to elapse before the token expires.
            This value can range from 10 seconds, to 5 hours (or 18,000 seconds)
            The default value for this, should none be supplied is 1 hour (or 3,600 seconds).
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>  
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>  
            <seealso cref="T:Microsoft.Azure.Documents.User"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.OfferType">
            <summary>
            Gets or sets the offer type for the resource in the Azure DocumentDB database service.
            </summary>
            <value>
            The offer type value.
            </value>
            <remarks>
            This option is only valid when creating a document collection.
            <para>
            Refer to http://azure.microsoft.comdocumentation/articles/documentdb-performance-levels/ for the list of valid
            offer types.
            </para>
            </remarks>
            <example>
            The followng example shows how to create a collection with the S2 offer.
            <code language="c#">
            <![CDATA[
            await client.CreateDocumentCollectionAsync(
                database.SelfLink, 
                new DocumentCollection { Id = "newcoll" }, 
                new RequestOptions { OfferType = "S2" });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.OfferThroughput">
            <summary>
            Gets or sets the offer throughput provisioned for a collection in measurement of Requests-per-Unit in the Azure DocumentDB database service.
            </summary>
            <value>
            The provisioned throughtput for this offer.
            </value>
            <remarks>
            This option is only valid when creating a document collection.
            <para>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-performance-levels/ for details on provision offer throughput.
            </para>
            </remarks>
            <example>
            The followng example shows how to create a collection with offer throughtput.
            <code language="c#">
            <![CDATA[
            await client.CreateDocumentCollectionAsync(
                database.SelfLink, 
                new DocumentCollection { Id = "newcoll" }, 
                new RequestOptions { OfferThroughput = 50000 });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.OfferV2"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.OfferEnableRUPerMinuteThroughput">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.OfferEnableRUPerMinuteThroughput"/> for a collection in the Azure DocumentDB database service
            </summary>
            <value>
            Represents Request Units(RU)/Minute throughput is enabled/disabled for a collection in the Azure DocumentDB database service.
            </value>
            <remarks>
            This option is only valid when creating a document collection.
            </remarks>
            <example>
            The followng example shows how to create a collection with RU/Minute throughput offer.
            <code language="c#">
            <![CDATA[
            await client.CreateDocumentCollectionAsync(
                database.SelfLink, 
                new DocumentCollection { Id = "newcoll" }, 
                new RequestOptions { OfferThroughput = 4000, OfferEnableRUPerMinuteThroughput  = true });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.OfferV2"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.PartitionKey">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.PartitionKey"/> for the current request in the Azure DocumentDB database service.
            </summary>
            <remarks>
            <para>
            Partition key is used to identify the target partition for this request.  It must be set on read and delete
            operations for all document requests; create, read, update and delete operations for all document attachment requests;
            and execute operation on stored producedures.
            
            For create and update operations on documents, the partition key is optional.  When absent, the client library will
            extract the partition key from the document before sending the request to the server.
            </para>
            </remarks>
            <example>
            The following example shows how to read a document in a partitioned collection using <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.PartitionKey"/>.
            The example assumes the collection is created with a <see cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/> of the 'id' property in all the documents.
            <code language="c#">
            <![CDATA[
            await client.ReadDocumentAsync(
                document.SelfLink, 
                new RequestOptions { PartitionKey = new PartitionKey(document.Id) } );
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.EnableScriptLogging">
            <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.EnableScriptLogging"/> for the current request in the Azure DocumentDB database service.
            </summary>
            <remarks>
            <para>
            EnableScriptLogging is used to enable/disable logging in JavaScript stored procedures.
            </para>
            </remarks>
            <example>
            The following example shows how to enable logging in stored procedures using <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.EnableScriptLogging"/>.
            <code language="c#">
            <![CDATA[
            await client.ExecuteStoredProcedureAsync(
                document.SelfLink,
                new RequestOptions { EnableScriptLogging = true } );
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.PopulateQuotaInfo">
            <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.PopulateQuotaInfo"/> for document collection read requests in the Azure DocumentDB database service.
            </summary>
            <remarks>
            <para> 
            PopulateQuotaInfo is used to enable/disable getting document collection quota related stats for document collection read requests.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.DisableRUPerMinuteUsage">
            <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.DisableRUPerMinuteUsage"/> for the current request in the Azure DocumentDB database service.
            </summary>
            <remarks>
            <para> 
            DisableRUPerMinuteUsage is used to enable/disable Request Units(RUs)/minute capacity to serve the request if regular provisioned RUs/second is exhausted.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.PopulatePartitionStatistics">
            <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.PopulatePartitionStatistics"/> for document collection read requests in the Azure DocumentDB database service.
            </summary>
            <remarks>
            <para> 
            PopulatePartitionStatistics is used to enable/disable getting partition statistics.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.UseRemoteStorage">
            <summary>
            Gets or sets the Remote storage enablement
            To be used along with Collection creation operation
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RequestTimeoutException.Message">
             <summary>
            
             Summary:
                 Gets a message that describes the current exception.
            
             </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ResourceId.UniqueDocumentCollectionId">
            <summary>
            Unique (across all databases) Id for the DocumentCollection.
            First 4 bytes are DatabaseId and next 4 bytes are CollectionId.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.ResourceResponse`1">
            <summary>
            Represents the template class used by methods returning single objects in the Azure DocumentDB database service.
            </summary> 
            <typeparam name="TResource">the resource type.</typeparam>
            <remarks>
            All responses from creates, reads, updates and deletes of Azure DocumentDB resources return the response wrapped in a 
            ResourceResponse object. This contains the metadata from the response headers from the Azure DocumentDB call including
            the request units (RequestCharge), activity ID and quotas/usage of resources.
            </remarks>
            <example>
            The following example extracts the request units consumed, activity ID and StatusCode from a CreateDocumentAsync call.
            <code language="c#">
            <![CDATA[
            ResourceResponse<Document> response = await client.CreateDocumentAsync(collectionLink, document);
            Console.WriteLine(response.RequestCharge);
            Console.WriteLine(response.ActivityId); 
            Console.WriteLine(response.StatusCode); // HttpStatusCode.Created or 201
            ]]>
            </code>
            </example>
            <seealso cref="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.Resource"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.FeedResponse`1"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceResponse`1.#ctor">
            <summary>
            Constructor exposed for mocking purposes for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceResponse`1.#ctor(`0)">
            <summary>
            Constructor exposed for mocking purposes for the Azure DocumentDB database service.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceResponse`1.op_Implicit(Microsoft.Azure.Documents.Client.ResourceResponse{`0})~`0">
            <summary>
            Returns the resource in the response implicitly from the Azure DocumentDB database service.
            </summary>
            <param name="source">The ResourceResponse source.</param>
            <returns>The resource object.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.Resource">
            <summary>
            Gets the resource returned in the response from the Azure DocumentDB database service.
            </summary>
            <value>
            The resource returned in the response.
            </value>
        </member>
        <member name="M:Microsoft.Azure.Documents.ResourceThrottleRetryPolicy.ShouldRetryAsync(System.Exception,System.Threading.CancellationToken)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="exception">Exception that occured when the operation was tried</param>
            <param name="cancellationToken"></param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.ResourceThrottleRetryPolicy.OnBeforeSendRequest(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            Method that is called before a request is sent to allow the retry policy implementation
            to modify the state of the request.
            </summary>
            <param name="request">The request being sent to the service.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.ResourceThrottleRetryPolicy.CheckIfRetryNeeded(System.Exception,System.TimeSpan@)">
            <summary>
            Returns True if the given exception <paramref name="exception"/> is retriable
            </summary>
            <param name="exception">Exception to examine</param>
            <param name="retryDelay">retryDelay</param>
            <returns>True if the exception is retriable; False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.ResourceTypeExtensions.IsPartitioned(Microsoft.Azure.Documents.ResourceType)">
            <summary>
            Resources for which this method returns true, are spread between multiple
            partitions.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.RMResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ArgumentRequired">
            <summary>
              Looks up a localized string similar to {0} should have {1} argument..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.BadGateway">
            <summary>
              Looks up a localized string similar to Invalid response from upstream server or upstream server request failed..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.BadRequest">
            <summary>
              Looks up a localized string similar to One of the input values is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.BadUrl">
            <summary>
              Looks up a localized string similar to Request url is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.CannotOfflineWriteRegionWithNoReadRegions">
            <summary>
              Looks up a localized string similar to Cannot offline a write region that has zero read regions configured. There needs to be atleast one read region to failover to..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ChangeFeedOptionsStartTimeWithUnspecifiedDateTimeKind">
            <summary>
              Looks up a localized string similar to StartTime cannot have DateTimeKind.Unspecified.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ChannelClosed">
            <summary>
              Looks up a localized string similar to Channel is closed.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.CollectionCreateTopologyConflict">
            <summary>
              Looks up a localized string similar to Collection create request conflicted with ongoing add region or failover operation. Ensure to complete region configuration before creating collection..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.CollectionThroughputCannotBeMoreThan">
            <summary>
              Looks up a localized string similar to Throughput of this collection cannot be more than {0}, as was provisioned during collection creation time..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.CorrelationIDNotFoundInResponse">
            <summary>
              Looks up a localized string similar to Correlation ID not found in response.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.CrossPartitionContinuationAndIndex">
            <summary>
              Looks up a localized string similar to Value specified in the &quot;{0}&quot; header is incompatible with value specified in the &quot;{1}&quot; header of the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.CrossPartitionQueryDisabled">
            <summary>
              Looks up a localized string similar to Cross partition query is required but disabled. Please set x-ms-documentdb-query-enablecrosspartition to true, specify x-ms-documentdb-partitionkey, or revise your query to avoid this exception..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DatabaseAccountNotFound">
            <summary>
              Looks up a localized string similar to Database Account {0} does not exist.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DateTimeConverterInvalidDateTime">
            <summary>
              Looks up a localized string similar to Expecting DateTime value..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DateTimeConverterInvalidReaderValue">
            <summary>
              Looks up a localized string similar to Expecting reader to read Integer.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DateTimeConveterInvalidReaderDoubleValue">
            <summary>
              Looks up a localized string similar to Expecting reader value to be compatible with double conversion..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DeserializationError">
            <summary>
              Looks up a localized string similar to Error occurred while deserializing content &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DocumentQueryExecutionContextIsDone">
            <summary>
              Looks up a localized string similar to Document Query Execution Context is done..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DocumentServiceUnavailable">
            <summary>
              Looks up a localized string similar to Service is currently unavailable, please retry after a while. If this problem persists please contact support..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DuplicateCorrelationIdGenerated">
            <summary>
              Looks up a localized string similar to Duplicate correlation id generated.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.EndpointNotFound">
            <summary>
              Looks up a localized string similar to Unable to retrieve address of endpoint &apos;{0}&apos; from the address &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.EntityAlreadyExists">
            <summary>
              Looks up a localized string similar to Entity with the specified id already exists in the system..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ExceptionMessage">
            <summary>
              Looks up a localized string similar to Message: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ExceptionMessageAddIpAddress">
            <summary>
              Looks up a localized string similar to {0}, Local IP: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ExceptionMessageAddRequestUri">
            <summary>
              Looks up a localized string similar to {0}, Request URI: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.FederationEntityNotFound">
            <summary>
              Looks up a localized string similar to Federation {0} in region {1} is not found.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.Forbidden">
            <summary>
              Looks up a localized string similar to Unable to proceed with the request. Please check the authorization claims to ensure the required permissions to process the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.GatewayTimedout">
            <summary>
              Looks up a localized string similar to Attempt to process the request timed out at remote server..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.Gone">
            <summary>
              Looks up a localized string similar to The requested resource is no longer available at the server..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.IdGenerationFailed">
            <summary>
              Looks up a localized string similar to Failed to generate id for resourceType = {0}, partitionIndex = {1}, serviceIndex = {2}, partitionCount = {3}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.IncompleteRoutingMap">
            <summary>
              Looks up a localized string similar to Routing map is not complete..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InsufficientPermissions">
            <summary>
              Looks up a localized string similar to Insufficient permissions provided in the authorization header for the corresponding request. Please retry with another authorization header..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InsufficientResourceTokens">
            <summary>
              Looks up a localized string similar to Unable to continue without atleast a single token in the resource tokens input collection..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InternalServerError">
            <summary>
              Looks up a localized string similar to Unknown server error occurred when processing this request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidAPIVersion">
            <summary>
              Looks up a localized string similar to Invalid API version. Ensure a valid x-ms-version header value is passed..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidAuthHeaderFormat">
            <summary>
              Looks up a localized string similar to Authorization header doesn&apos;t confirm to the required format. Please verify and try again..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidBackendResponse">
            <summary>
              Looks up a localized string similar to The backend response was not in the correct format..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidCharacterInResourceName">
            <summary>
              Looks up a localized string similar to The resource name presented contains invalid character &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidConsistencyLevel">
            <summary>
              Looks up a localized string similar to ConsistencyLevel {0} specified in the request is invalid when service is configured with consistency level {1}. Ensure the request consistency level is not stronger than the service consistency level..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidContinuationToken">
            <summary>
              Looks up a localized string similar to Invalid Continuation Token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidDateHeader">
            <summary>
              Looks up a localized string similar to The input date header is invalid format. Please pass in RFC 1123 style date format..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidDocumentCollection">
            <summary>
              Looks up a localized string similar to The specified document collection is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidEnumValue">
            <summary>
              Looks up a localized string similar to Invalid value {0} passed for enum {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidFailoverPriority">
            <summary>
              Looks up a localized string similar to Failover priority value {0} supplied for region {1} is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidHeaderValue">
            <summary>
              Looks up a localized string similar to Value &apos;{0}&apos; specified for the header &apos;{1}&apos; is invalid. .
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidIndexKindValue">
            <summary>
              Looks up a localized string similar to The specified value {0} of the index kind is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidIndexSpecFormat">
            <summary>
              Looks up a localized string similar to The index spec format is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidIndexTransformationProgressValues">
            <summary>
              Looks up a localized string similar to Received invalid index transformation progress values from all the replicas..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidLocations">
            <summary>
              Looks up a localized string similar to List of supplied locations is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidMaxStalenessInterval">
            <summary>
              Looks up a localized string similar to MaxStalenessInterval should be greater than or equal to {0} sec and less than or equal to {1} sec.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidMaxStalenessPrefix">
            <summary>
              Looks up a localized string similar to MaxStalenessPrefix should be greater than or equal to {0} and less than or equal to {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidOfferIsRUPerMinuteThroughputEnabled">
            <summary>
              Looks up a localized string similar to The value of offer IsRUPerMinuteThroughputEnabled specified is invalid. Please specify a boolean value..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidOfferThroughput">
            <summary>
              Looks up a localized string similar to The value of offer throughput specified is invalid. Please enter valid positive integer..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidOfferType">
            <summary>
              Looks up a localized string similar to OfferType {0} specified in the request is invalid. Please refer to offer documentation and specify a valid offer type..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidOfferV2Input">
            <summary>
              Looks up a localized string similar to The required field Content is missing in Offer version v2..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidOwnerResourceType">
            <summary>
              Looks up a localized string similar to Resource {0} is invalid for adding owner resource record.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidPageSize">
            <summary>
              Looks up a localized string similar to The input PageSize {0} is invalid. Ensure to pass a valid page size which must be a positive integer or -1 for a dynamic page size..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidPartitionKey">
            <summary>
              Looks up a localized string similar to Partition key {0} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidPartitionKeyRangeIdHeader">
            <summary>
              Looks up a localized string similar to x-ms-documentdb-partitionkeyrangeid header contains invalid value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidPermissionMode">
            <summary>
              Looks up a localized string similar to The permission mode provided in the authorization token doesn&apos;t provide sufficient permissions..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidProxyCommand">
            <summary>
              Looks up a localized string similar to Command is not supported by backend.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidQuery">
            <summary>
              Looks up a localized string similar to Query &apos;{0}&apos; specified is either invalid or unsupported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidQueryValue">
            <summary>
              Looks up a localized string similar to Value &apos;{0}&apos; specified for the query &apos;{1}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidReplicationAndConsistencyCombination">
            <summary>
              Looks up a localized string similar to Strong consistency level cannot be specified with async replication. Either change the replication policy &apos;AsyncReplication&apos; to false or relax the consistency level..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResourceID">
            <summary>
              Looks up a localized string similar to Failed to parse the value &apos;{0}&apos; as ResourceId..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResourceIdBatchSize">
            <summary>
              Looks up a localized string similar to Value for {0} should be greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResourceKind">
            <summary>
              Looks up a localized string similar to Resource kind {0} is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResourceType">
            <summary>
              Looks up a localized string similar to Requested ResourceType {0} passed as generic argument should be same as the one specified by ResourceType member {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResourceUrlPath">
            <summary>
              Looks up a localized string similar to Resource Url path {0} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResourceUrlQuery">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; specified  for query &apos;{1}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResponseContinuationTokenLimit">
            <summary>
              Looks up a localized string similar to The input continuation token size limit {0} is invalid. Please pass in a valid continuation token size limit which must be a positive integer..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidScriptResource">
            <summary>
              Looks up a localized string similar to Script request has invalid body..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidSessionToken">
            <summary>
              Looks up a localized string similar to The session token provided &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidSpaceEndingInResourceName">
            <summary>
              Looks up a localized string similar to The resource name can&apos;t end with space..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidStalenessPolicy">
            <summary>
              Looks up a localized string similar to Staleness Policy specified is invalid. Ensure both MaxPrefix and MaxStalenessIntervalInSeconds are both 0 or both not zero..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidTarget">
            <summary>
              Looks up a localized string similar to Target for the request is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidTokenTimeRange">
            <summary>
              Looks up a localized string similar to The authorization token is not valid at the current time. Please create another token and retry (token start time: {0}, token expiry time: {1}, current server time: {2})..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidUrl">
            <summary>
              Looks up a localized string similar to Request url is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidUseSystemKey">
            <summary>
              Looks up a localized string similar to System key can only access replica root.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidVersionFormat">
            <summary>
              Looks up a localized string similar to Invalid version format for {0}. Input Version {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.IpAddressBlockedByPolicy">
            <summary>
              Looks up a localized string similar to IpAddress {0} is blocked by Policy.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.IsForceDeleteFederationAllowed">
            <summary>
              Looks up a localized string similar to Not allowed to force delete federation in this environment..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MaximumRULimitExceeded">
            <summary>
              Looks up a localized string similar to Current maximum throughput per collection is {0}. Please contact Azure support to increase it..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MessageIdHeaderMissing">
            <summary>
              Looks up a localized string similar to Cannot find messageId header.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MethodNotAllowed">
            <summary>
              Looks up a localized string similar to The requested verb is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MismatchToken">
            <summary>
              Looks up a localized string similar to The input authorization token can&apos;t serve the request. Please check that the expected payload is built as per the protocol, and check the key being used. Server used the following payload to sign: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MissingAuthHeader">
            <summary>
              Looks up a localized string similar to Required Header authorization is missing. Ensure a valid Authorization token is passed..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MissingDateForAuthorization">
            <summary>
              Looks up a localized string similar to Authorization token mandates Date headers. Please pass in RFC 1123 style date format..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MissingPartitionKeyValue">
            <summary>
              Looks up a localized string similar to PartitionKey value must be supplied for this operation..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MissingProperty">
            <summary>
              Looks up a localized string similar to Required property {0} is not specified in the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MissingRequiredHeader">
            <summary>
              Looks up a localized string similar to Required header &apos;{0}&apos; is not specified in the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MissingRequiredQuery">
            <summary>
              Looks up a localized string similar to Required query variable &apos;{0}&apos; is not specified in the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MultipleCollectionReplaceNotAllowed">
            <summary>
              Looks up a localized string similar to Document collection cannot be replaced while a previous document collection update operation is ongoing..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MustHaveNonZeroPreferredRegionWhenAutomaticFailoverDisabled">
            <summary>
              Looks up a localized string similar to Atleast single region must be specified in PreferredLocation list when automatic failover is disabled..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.NamingPropertyNotFound">
            <summary>
              Looks up a localized string similar to NamingProperty {0} not found.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.NegativeInteger">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; integer value must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.networks_xsd">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema id=&quot;DataCenterRegions&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;
              
              &lt;xs:element name=&quot;DataCenterRegions&quot; msdata:IsDataSet=&quot;true&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:sequence&gt;
                    &lt;xs:element name=&quot;Network&quot; type=&quot;Network&quot; minOccurs=&quot;1&quot; maxOccurs=&quot;unbounded&quot; /&gt;
                    &lt;xs:element name=&quot;MeteringTier&quot; type=&quot;MeteringTier&quot; minOccurs=&quot;1&quot; maxOccurs=&quot;unbounded&quot; /&gt; [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.NoGraftPoint">
            <summary>
              Looks up a localized string similar to No graft point.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.NotFound">
            <summary>
              Looks up a localized string similar to Entity with the specified id does not exist in the system..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.OfferReplaceWithSpecifiedVersionsNotSupported">
            <summary>
              Looks up a localized string similar to Cannot replace an offer with version {0} with version {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.OfferTypeAndThroughputCannotBeSpecifiedBoth">
            <summary>
              Looks up a localized string similar to Offer type and throughput cannot both be specified..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.OperationRequestedStatusIsInvalid">
            <summary>
              Looks up a localized string similar to Requested Operation Status = {0} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PartitionIsFull">
            <summary>
              Looks up a localized string similar to Selected partition is full, please try insert in different partition..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PartitionKeyMismatch">
            <summary>
              Looks up a localized string similar to Partition key provided either doesn&apos;t correspond to definition in the collection or doesn&apos;t match partition key field values specified in the document..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PartitionKeyRangeIdAbsentInContext">
            <summary>
              Looks up a localized string similar to PartitionKeyRangeId is absent in the context..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PartitionKeyRangeIdMustBeSpecified">
            <summary>
              Looks up a localized string similar to For partitioned collection, ChangeFeedOptions.PartitionKeyRangeId must be specified..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PartitionKeyRangeNotFound">
            <summary>
              Looks up a localized string similar to PartitionKeyRange with id &apos;{0}&apos; in collection &apos;{1}&apos; doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PositiveInteger">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; integer value must be greater than zero..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PreconditionFailed">
            <summary>
              Looks up a localized string similar to Operation cannot be performed because one of the specified precondition is not met..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PrimaryNotFound">
            <summary>
              Looks up a localized string similar to Unable to resolve primary endpoint for partition {0} for service {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PropertyCannotBeNull">
            <summary>
              Looks up a localized string similar to Property {0} can not be assigned to null..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PropertyNotFound">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is not found in the document..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ProvisionLimit">
            <summary>
              Looks up a localized string similar to Reached the limit for maximum number of collections per database account. Please contact Azure support to increase this limit..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ReadQuorumNotMet">
            <summary>
              Looks up a localized string similar to Read Quorum size of {0} is not met for the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ReadSessionNotAvailable">
            <summary>
              Looks up a localized string similar to The read session is not available for the input session token..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.RemoveWriteRegionNotSupported">
            <summary>
              Looks up a localized string similar to Cannot remove write region for account {0}. Please issue delete on the account to remove write region.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ReplacesAndUpsertsForScriptswithMultiplePartitionsAreNotSupported">
            <summary>
              Looks up a localized string similar to Replaces and upserts for scripts in collections with multiple partitions are not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ReplicaAtIndexNotAvailable">
            <summary>
              Looks up a localized string similar to Replica at index &apos;{0}&apos; is currently unavailable..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.RequestConsistencyLevelNotSupported">
            <summary>
              Looks up a localized string similar to Consistency Level &apos;{0}&apos;  requested via header &apos;{1}&apos; is not supported by this service endpoint. Please contact the service administrator..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.RequestEntityTooLarge">
            <summary>
              Looks up a localized string similar to The size of the response exceeded the maximum allowed size, limit the  response size by specifying smaller value for &apos;{0}&apos; header..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.RequestTimeout">
            <summary>
              Looks up a localized string similar to Request timed out..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.RequestTooLarge">
            <summary>
              Looks up a localized string similar to The size of the request exceeded the maximum allowed size..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ResourceIdNotValid">
            <summary>
              Looks up a localized string similar to ResourceId {0} of type {1} is not a valid resource Id..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ResourceIdPolicyNotSupported">
            <summary>
              Looks up a localized string similar to ResourceIdPolicy {0} is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ResourceTypeNotSupported">
            <summary>
              Looks up a localized string similar to Resource type {0} is not supported by ResourceIdPartitioner.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.RetryWith">
            <summary>
              Looks up a localized string similar to Retry the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.SecondariesNotFound">
            <summary>
              Looks up a localized string similar to Unable to resolve secondary endpoint for partition {0} for service {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ServiceNotFound">
            <summary>
              Looks up a localized string similar to Service at index {0} not found..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ServiceReservedBitsOutOfRange">
            <summary>
              Looks up a localized string similar to Service reserved bits can not be more than 24. Otherwise it overlaps with the collection/user multiplexing bit.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ServiceUnavailable">
            <summary>
              Looks up a localized string similar to Service is currently unavailable..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ServiceWithResourceIdNotFound">
            <summary>
              Looks up a localized string similar to Could not find service hosting DocumentCollection with ResourceId {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.SpatialBoundingBoxInvalidCoordinates">
            <summary>
              Looks up a localized string similar to Bounding box must have an even number of coordinates and more than 3..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.SpatialExtensionMethodsNotImplemented">
            <summary>
              Looks up a localized string similar to Spatial operations can be used in Linq expressions only and are evaluated in DocumentDB server..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.SpatialFailedToDeserializeCrs">
            <summary>
              Looks up a localized string similar to Coordinate Reference System specified in GeoJSON is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.SpatialInvalidGeometryType">
            <summary>
              Looks up a localized string similar to Failed to deserialize Geometry object because &apos;type&apos; property is either absent or has invalid value..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.SpatialInvalidPosition">
            <summary>
              Looks up a localized string similar to Spatial position must have at least two coordinates..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.StarSlashArgumentError">
            <summary>
              Looks up a localized string similar to Star and slash should have no arguments..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.StringArgumentNullOrEmpty">
            <summary>
              Looks up a localized string similar to String agument {0} is null or empty.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.TooFewPartitionKeyComponents">
            <summary>
              Looks up a localized string similar to PartitionKey has fewer components than defined the collection resource..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.TooManyPartitionKeyComponents">
            <summary>
              Looks up a localized string similar to PartitionKey has more components than defined the collection resource..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.TooManyRequests">
            <summary>
              Looks up a localized string similar to The request rate is too large. Please retry after sometime..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnableToDeserializePartitionKeyValue">
            <summary>
              Looks up a localized string similar to Cannot deserialize PartitionKey value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnableToFindFreeConnection">
            <summary>
              Looks up a localized string similar to Unable to find free connection.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.Unauthorized">
            <summary>
              Looks up a localized string similar to Unable to authenticate the request. The request requires valid user authentication..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnexpectedConsistencyLevel">
            <summary>
              Looks up a localized string similar to Operation not permitted as consistency level is set to {0}. Expected {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnexpectedOfferVersion">
            <summary>
              Looks up a localized string similar to Unexpected offer version {0} from store..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnexpectedOperationTypeForRoutingRequest">
            <summary>
              Looks up a localized string similar to Unexpected operation type {0} for routing requests for multiple partitions..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnexpectedOperator">
            <summary>
              Looks up a localized string similar to Unexpected operator {0} ..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnexpectedResourceType">
            <summary>
              Looks up a localized string similar to ResourceType {0} is unexpected..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnknownResourceKind">
            <summary>
              Looks up a localized string similar to Resource kind {0} is unknown.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnknownResourceType">
            <summary>
              Looks up a localized string similar to Resource type {0} is unknown.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedCrossPartitionOrderByQueryOnMixedTypes">
            <summary>
              Looks up a localized string similar to Cannot execute cross partition order-by queries on mix types. Consider using IS_STRING/IS_NUMBER to get around this exception. Expect type: {0}. Actual type: {1}. Item value: {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedCrossPartitionQuery">
            <summary>
              Looks up a localized string similar to Cross partition query with TOP/ORDER BY or aggregate functions is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedCrossPartitionQueryWithAggregate">
            <summary>
              Looks up a localized string similar to Cross partition query with aggregate functions is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedEntityType">
            <summary>
              Looks up a localized string similar to Unsupported entity type {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedHints">
            <summary>
              Looks up a localized string similar to Indexing Hints are not supported in this deployment. .
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedKeyType">
            <summary>
              Looks up a localized string similar to Key type {0} is unsupported.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnSupportedOfferThroughput">
            <summary>
              Looks up a localized string similar to The value of offer throughput specified is invalid. Please specify a value between {0} and {1} inclusive in increments of {2}. Please contact https://azure.microsoft.com/support to request limit increases beyond {1} RU/s..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnSupportedOfferThroughputWithTwoRanges">
            <summary>
              Looks up a localized string similar to The value of offer throughput specified is invalid. Please specify a value between {0} and {1}, or between {2} and {3} inclusive in increments of {4}. Please contact https://azure.microsoft.com/support to request limit increases beyond {3} RU/s..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedOfferTypeWithV2Offer">
            <summary>
              Looks up a localized string similar to Offer type is not supported with Offer version &apos;V2&apos; and above..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedOfferVersion">
            <summary>
              Looks up a localized string similar to The supplied offer version {0} is not supported. Please specify either a blank version, &apos;V1&apos; or &apos;V2&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedPartitionKeyComponentValue">
            <summary>
              Looks up a localized string similar to Unsupported PartitionKey value component &apos;{0}&apos;. Numeric, string, bool, null, Undefined are the only supported types..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedProgram">
            <summary>
              Looks up a localized string similar to Program requires to run in 64 bit for elastic query feature to work. Please switch your program to 64 bit or use Gateway connectivity mode..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedProtocol">
            <summary>
              Looks up a localized string similar to Value &apos;{0}&apos; specified for protocol is unsupported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedQueryWithFullResultAggregate">
            <summary>
              Looks up a localized string similar to Query that expects full results from aggregate functions is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedRegion">
            <summary>
              Looks up a localized string similar to The requested region &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedRollbackKind">
            <summary>
              Looks up a localized string similar to The requested rollback kind &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedRootPolicyChange">
            <summary>
              Looks up a localized string similar to Changing Root Indexing Policy is not supported in this deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedSystemKeyKind">
            <summary>
              Looks up a localized string similar to Federation system key kind {0} is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedTokenType">
            <summary>
              Looks up a localized string similar to Unsupported token type {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedV1OfferVersion">
            <summary>
              Looks up a localized string similar to The Offer Version &apos;V1&apos; is not supported since the associated collection is already a partitioned collection. Please use offer version &apos;V2&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.WriteRegionAutomaticFailoverNotEnabled">
            <summary>
              Looks up a localized string similar to Cannot offline write region when automatic failover is not enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.RuntimePerfCounters.CreatePerfCounterCategory(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)">
             
             Create a perf counter category with the provided name and creates the provided list of perf counters inside
             the category.
            
        </member>
        <member name="T:Microsoft.Azure.Documents.Schema">
            <summary>
            Represents a schema in the Azure DocumentDB database service.
            </summary>
            <remarks> 
            A schema is a structured JSON document.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Schema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Document"/> class in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Schema.ResourceLink">
            <summary>
            Gets the resource link for the schema from the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.SchemaBuilderMode">
            <summary> 
            Specifies the supported schema builder modes.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.SchemaBuilderMode.Lazy">
            <summary>
            SchemaBuilder is active and running lazily.
            </summary>
            <remarks>
            Setting the SchemaBuilderMode to "Lazy" ensures the schema builder will be running in the background either 
            as it's own process (consistent indexing) or with the lazy index processor (lazy indexing)
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.SchemaBuilderMode.None">
            <summary>
            Schema builder is not active.
            </summary>
            <remarks>
            Setting SchemaBuilderMode to "None" ensures that the schema builder will be disabled and no longer functioning.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.SchemaDiscoveryPolicy">
            <summary>
            Represents the schema discovery policy configuration for a collection.
            </summary> 
            <remarks>
            The schema discovery policy is used to control the schema builder through a collection configuration.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.SchemaDiscoveryPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SchemaDiscoveryPolicy"/> class.
            </summary>
            <remarks>
            Schema mode is set to none
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.SchemaDiscoveryPolicy.Clone">
            <summary>
            Performs a deep copy of the schema discovery policy.
            </summary>
            <returns>
            A clone of the schema discovery policy.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.SchemaDiscoveryPolicy.SchemaBuilderMode">
            <summary>
            Gets or sets the indexing mode (consistent or lazy).
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.SchemaBuilderMode"/> enumeration.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.SecureStringHMACSHA256Helper">
            <summary>
            Manufactures SHA256 HMACs of byte payloads using a key. The key is a Base64-encoded SecureString.
            In keeping with the goals of SecureString, neither the original Base64 characters nor the decoded 
            bytes ever enters the managed heap, and they are kept decrypted in native memory for as short a 
            time as possible: just the duration of a single ComputeHash call.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SecureStringHMACSHA256Helper.ComputeHash(System.Byte[])">
            <summary>
            Decode the SecureString containing the Base64-encoded key into native memory, compute the
            SHA256 HMAC of the payload, and destroy the native memory containing the decoded key.
            </summary>
            <param name="bytesToHash">payload that is hashed</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.SecureStringUtility">
            <summary>
            Utility for converting string to SecureString.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SecureStringUtility.ConvertToSecureString(System.String)">
            <summary>
            Converts a unsecure string into a SecureString.
            </summary>
            <param name="unsecureStr">the string to convert.</param>
            <returns>the resulting SecureString</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.SerializationFormattingPolicy">
            <summary>
            The formatting policy associated with JSON serialization/de-serialization in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.SerializationFormattingPolicy.None">
            <summary> 
            No additional formatting required.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.SerializationFormattingPolicy.Indented">
            <summary>
            Indent the fields appropriately.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.SpatialIndex">
            <summary>
            Specifies an instance of the <see cref="T:Microsoft.Azure.Documents.SpatialIndex"/> class in the Azure DocumentDB database service.
            </summary>
            <remarks>
            Can be used to serve spatial queries.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.SpatialIndex.#ctor(Microsoft.Azure.Documents.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SpatialIndex"/> class for the Azure DocumentDB database service.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification</param>
            <seealso cref="P:Microsoft.Azure.Documents.SpatialIndex.DataType"/>
            <example>
            Here is an example to instantiate SpatialIndex class passing in the DataType
            <code language="c#">
            <![CDATA[
            SpatialIndex spatialIndex = new SpatialIndex(DataType.Point);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.SpatialIndex.Clone">
            <summary>
            Creates a copy of the spatial index for the Azure DocumentDB database service.
            </summary>
            <returns>A clone of the spatial index.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.SpatialIndex.DataType">
            <summary>
            Gets or sets the data type for which this index should be applied in the Azure DocumentDB database service.
            </summary>
            <value>
            The data type for which this index should be applied.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.SqlParameter">
            <summary>
            Represents a parameter associated with <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/> in the Azure DocumentDB database service.
            </summary> 
            <remarks>
            Azure DocumentDB SQL parameters are name-value pairs referenced in parameterized queries. 
            Unlike in relation SQL databases, they don't have types associated with them.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlParameter"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlParameter"/> class with the name of the parameter for the Azure DocumentDB database service.
            </summary>
            <param name="name">The name of the parameter.</param>
            <remarks>Names of parameters must begin with '@' and be a valid SQL identifier.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlParameter"/> class with the name and value of the parameter for the Azure DocumentDB database service.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <remarks>Names of parameters must begin with '@' and be a valid SQL identifier. The value gets serialized and passed in as JSON to the document query.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlParameter.Name">
            <summary>
            Gets or sets the name of the parameter for the Azure DocumentDB database service.
            </summary>
            <value>The name of the parameter.</value>
            <remarks>Names of parameters must begin with '@' and be a valid SQL identifier.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlParameter.Value">
            <summary>
            Gets or sets the value of the parameter for the Azure DocumentDB database service.
            </summary>
            <value>The value of the parameter.</value>
            <remarks>The value gets serialized and passed in as JSON to the document query.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.SqlParameterCollection">
            <summary>
            Represents a collection of parameters associated with <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/> for use in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.#ctor">
            <summary>
            Initialize a new instance of the SqlParameterCollection class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Documents.SqlParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlParameterCollection"/> class for the Azure DocumentDB database service.
            </summary>
            <param name="parameters">The collection of parameters.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.IndexOf(Microsoft.Azure.Documents.SqlParameter)">
            <summary>
            Determines the index of a specific item in the Azure DocumentDB collection.
            </summary> 
            <param name="item">The item to find.</param>
            <returns>The index value for the item.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.Insert(System.Int32,Microsoft.Azure.Documents.SqlParameter)">
            <summary>
            Inserts an item at the specified index in the Azure DocumentDB collection.
            </summary>
            <param name="index">The location in the index array in which to start inserting elements.</param>
            <param name="item">The item to copy into the index.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the Azure DocumentDB collection.
            </summary>
            <param name="index">The location in the index where the item will be removed from.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.Add(Microsoft.Azure.Documents.SqlParameter)">
            <summary>
            Adds an item to the Azure DocumentDB collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.Clear">
            <summary>
            Removes all items from the Azure DocumentDB collection.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.Contains(Microsoft.Azure.Documents.SqlParameter)">
            <summary>
            Determines whether the Azure DocumentDB collection contains a specific value.
            </summary>
            <param name="item">The value to search for.</param>
            <returns>true if the collection contains a specific value; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.CopyTo(Microsoft.Azure.Documents.SqlParameter[],System.Int32)">
            <summary>
            Copies the elements of the Azure DocumentDB collection to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.</summary>
            <param name="array">The array to copy into.</param>
            <param name="arrayIndex">The location in the index array in which to start adding elements.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.Remove(Microsoft.Azure.Documents.SqlParameter)">
            <summary>
            /// Removes the first occurrence of a specific object from the Azure DocumentDB collection.
            </summary>
            <param name="item">
            The item to remove from the collection.
            </param>
            <returns>true if the first item was removed; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Azure DocumentDB collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Azure DocumentDB collection.
            </summary>
            <returns>An enumerator to iterate through the collection. </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index in the Azure DocumentDB collection.
            </summary>
            <param name="index">The location in the index.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlParameterCollection.Count">
            <summary>
            Gets the number of elements contained in the Azure DocumentDB collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlParameterCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the Azure DocumentDB collection is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false.</value>
        </member>
        <member name="T:Microsoft.Azure.Documents.SqlQuerySpec">
            <summary>
            Represents a SQL query in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlQuerySpec.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/> class for the Azure DocumentDB database service.</summary>
            <remarks> 
            The default constructor initializes any fields to their default values.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlQuerySpec.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/> class for the Azure DocumentDB database service.
            </summary>
            <param name="queryText">The text of the query.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlQuerySpec.#ctor(System.String,Microsoft.Azure.Documents.SqlParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/> class for the Azure DocumentDB database service.
            </summary>
            <param name="queryText">The text of the database query.</param>
            <param name="parameters">The <see cref="T:Microsoft.Azure.Documents.SqlParameterCollection"/> instance, which represents the collection of query parameters.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlQuerySpec.ShouldSerializeParameters">
            <summary>
            Returns a value that indicates whether the Azure DocumentDB database <see cref="P:Microsoft.Azure.Documents.SqlQuerySpec.Parameters"/> property should be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlQuerySpec.QueryText">
            <summary>
            Gets or sets the text of the Azure DocumentDB database query.
            </summary>
            <value>The text of the database query.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlQuerySpec.Parameters">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Azure.Documents.SqlParameterCollection"/> instance, which represents the collection of Azure DocumentDB query parameters.
            </summary>
            <value>The <see cref="T:Microsoft.Azure.Documents.SqlParameterCollection"/> instance.</value>
        </member>
        <member name="T:Microsoft.Azure.Documents.StoreClient">
            <summary>
            Instantiated to issue direct connectivity requests to the backend on:
                - Gateway (for gateway mode clients)
                - Client (for direct mode clients)
            StoreClient uses the ReplicatedResourceClient to make requests to the backend.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.StoredProcedure">
            <summary>
            Represents a stored procedure in the Azure DocumentDB database service.
            </summary>
            <remarks> 
            DocumentDB allows application logic written entirely in JavaScript to be executed directly inside the database engine under the database transaction.
            For additional details, refer to the server-side JavaScript API documentation.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.StoredProcedure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.StoredProcedure.Body">
            <summary>
            Gets or sets the body of the Azure DocumentDB stored procedure.
            </summary>
            <value>The body of the stored procedure.</value>
            <remarks>Must be a valid JavaScript function. For e.g. "function () { getContext().getResponse().setBody('Hello World!'); }"</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1">
            <summary>
            Represents the response returned from a database stored procedure in the Azure DocumentDB database service. Wraps the response body and headers.
            </summary> 
            <typeparam name="TValue">The returned value type of the stored procedure.</typeparam>
            <remarks>
            Stored procedures can return any string output via the getContext().getResponse().setBody() method.
            This response body could be a serialized JSON object, or any other type.
            Within the .NET SDK, you can deserialize the response into a corresponding TValue type.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.#ctor">
            <summary>
            Constructor exposed for mocking purposes in Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.op_Implicit(Microsoft.Azure.Documents.Client.StoredProcedureResponse{`0})~`0">
            <summary>
            Gets the resource implicitly from Azure DocumentDB database service.
            </summary>
            <param name="source">Stored procedure response.</param>
            <returns>The returned resource.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.ActivityId">
            <summary>
            Gets the Activity ID of the request from the Azure DocumentDB database service.
            </summary>
            <value>
            The Activity ID of the request.
            </value>
            <remarks>Every request is traced with a globally unique ID. Include activity ID in tracing application failures and when contacting Azure DocumentDB support</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.SessionToken">
            <summary>
            Gets the token for use with session consistency requests from the Azure DocumentDB database service.
            </summary>
            <value>
            The token for use with session consistency requests.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.ScriptLog">
            <summary>
            Gets the output from stored procedure console.log() statements.
            </summary>
            <value>
            Output from console.log() statements in a stored procedure.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.StatusCode">
            <summary>
            Gets the request completion status code from the Azure DocumentDB database service.
            </summary>
            <value>The request completion status code</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.MaxResourceQuota">
            <summary>
            Gets the delimited string containing the quota of each resource type within the collection from the Azure DocumentDB database service.
            </summary>
            <value>The delimited string containing the number of used units per resource type within the collection.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.CurrentResourceQuotaUsage">
            <summary>
            Gets the delimited string containing the usage of each resource type within the collection from the Azure DocumentDB database service.
            </summary>
            <value>The delimited string containing the number of used units per resource type within the collection.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.RequestCharge">
            <summary>
            Gets the number of normalized Azure DocumentDB request units (RUs) charged from Azure DocumentDB database service.
            </summary>
            <value>
            The number of normalized Azure DocumentDB request units (RUs) charged.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.IsRUPerMinuteUsed">
            <summary>
            Gets the flag associated with the response from the Azure DocumentDB database service whether this stored procedure request is served from Request Units(RUs)/minute capacity or not.
            </summary>
            <value>
            True if this request is served from RUs/minute capacity. Otherwise, false.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.ResponseHeaders">
            <summary>
            Gets the headers associated with the response from the Azure DocumentDB database service.
            </summary>
            <value>
            Headers associated with the response.
            </value>
            <remarks>
            Provides access to all HTTP response headers returned from the 
            DocumentDB API.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.Response">
            <summary>
            Gets the response of a stored procedure, serialized into the given type from the Azure DocumentDB database service.
            </summary>
            <value>The response of a stored procedure, serialized into the given type.</value>
        </member>
        <member name="M:Microsoft.Azure.Documents.StoreReader.ReadMultipleReplicaAsync(Microsoft.Azure.Documents.DocumentServiceRequest,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Makes requests to multiple replicas at once and returns responses
            </summary>
            <param name="entity"> DocumentServiceRequest</param>
            <param name="includePrimary">flag to indicate whether to indicate primary replica in the reads</param>
            <param name="replicaCountToRead"> number of replicas to read from </param>
            <param name="requiresValidLsn"> flag to indicate whether a valid lsn is required to consider a response as valid </param>
            <param name="useSessionToken"> flag to indicate whether to use session token </param>
            <param name="checkMinLSN"> set minimum required session lsn </param>
            <param name="forceReadAll"> reads from all available replicas to gather result from readsToRead number of replicas </param>
            <returns> ReadReplicaResult which indicates the LSN and whether Quorum was Met / Not Met etc </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.StoreReader.ReadMultipleReplicasInternalAsync(Microsoft.Azure.Documents.DocumentServiceRequest,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Makes requests to multiple replicas at once and returns responses
            </summary>
            <param name="entity"> DocumentServiceRequest</param>
            <param name="includePrimary">flag to indicate whether to indicate primary replica in the reads</param>
            <param name="replicaCountToRead"> number of replicas to read from </param>
            <param name="requiresValidLsn"> flag to indicate whether a valid lsn is required to consider a response as valid </param>
            <param name="useSessionToken"> flag to indicate whether to use session token </param>
            <param name="checkMinLSN"> set minimum required session lsn </param>
            <param name="forceReadAll"> will read from all available replicas to put together result from readsToRead number of replicas </param>
            <returns> ReadReplicaResult which indicates the LSN and whether Quorum was Met / Not Met etc </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.TimeoutHelper">
            <summary>
            Tracks remaining timespan.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Trigger">
            <summary>
            Represents a trigger in the Azure DocumentDB database service.
            </summary>
            <remarks> 
            Azure DocumentDB supports pre and post triggers written in JavaScript to be executed on creates, updates and deletes. 
            For additional details, refer to the server-side JavaScript API documentation.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Trigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Trigger.Body">
            <summary>
            Gets or sets the body of the trigger for the Azure DocumentDB database service.
            </summary>
            <value>The body of the trigger.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Trigger.TriggerType">
            <summary>
            Get or set the type of the trigger for the Azure DocumentDB database service.
            </summary>
            <value>The body of the trigger.</value>
            <seealso cref="P:Microsoft.Azure.Documents.Trigger.TriggerType"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Trigger.TriggerOperation">
            <summary>
            Gets or sets the operation the trigger is associated with for the Azure DocumentDB database service.
            </summary>
            <value>The operation the trigger is associated with.</value>
            <seealso cref="P:Microsoft.Azure.Documents.Trigger.TriggerOperation"/>
        </member>
        <member name="T:Microsoft.Azure.Documents.TriggerOperation">
            <summary> 
            Specifies the operations on which a trigger should be executed in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerOperation.All">
            <summary>
            Specifies all operations.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerOperation.Create">
            <summary>
            Specifies create operations only.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerOperation.Update">
            <summary>
            Specifies update operations only.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerOperation.Delete">
            <summary>
            Specifies delete operations only.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerOperation.Replace">
            <summary>
            Specifies replace operations only.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.TriggerType">
            <summary>
            Specifies the type of the trigger in the Azure DocumentDB database service.
            </summary> 
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerType.Pre">
            <summary>
            Trigger should be executed before the associated operation(s).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerType.Post">
            <summary>
            Trigger should be executed after the associated operation(s).
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Undefined">
            <summary>
            Instance of the class can be supplied as part of Partition Key Value to denote a value which is absent in the Azure DocumentDB document.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Undefined.Value">
            <summary>
            <see cref="T:Microsoft.Azure.Documents.Undefined"/> singleton to help reuse the object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Undefined.Equals(Microsoft.Azure.Documents.Undefined)">
            <summary>
            Determines whether <paramref name="other"/> is <see cref="T:Microsoft.Azure.Documents.Undefined"/> from the Azure DocumentDB database service.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Undefined.Equals(System.Object)">
            <summary>
            Determines whether other is <see cref="T:Microsoft.Azure.Documents.Undefined"/> from the Azure DocumentDB database service.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Undefined.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Undefined"/> Azure DocumentDB database type.
            </summary>
            <returns>
            A hash code value.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.UniqueKey">
            <summary>
            Represents a unique key on that enforces uniqueness constraint on documents in the collection in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.UniqueKey.Paths">
            <summary>
            Gets or sets the paths, a set of which must be unique for each document in the Azure DocumentDB database service.
            </summary>
            <value>
            The paths to enforce uniqueness on.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.UniqueKeyPolicy">
            <summary>
            A holder for policy specifying uniqueness constraints on documents in the collection in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.UniqueKeyPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.UniqueKeyPolicy"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.UniqueKeyPolicy.UniqueKeys">
            <summary>
            Gets or sets collection of <see cref="T:Microsoft.Azure.Documents.UniqueKey"/> that guarantee uniqueness of documents in collection in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.UnixDateTimeConverter">
            <summary>
            Converts a DateTime object to and from JSON.
            DateTime is represented as the total number of seconds
            that have elapsed since January 1, 1970 (midnight UTC/GMT), 
            not counting leap seconds (in ISO 8601: 1970-01-01T00:00:00Z).
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.UnixDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the DateTime object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.UnixDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the DateTime object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The DateTime object value.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.UriFactory">
            <summary>
            Helper class to assist in creating the various Uris needed for use with the DocumentClient instance in the Azure DocumentDB database service.
            </summary>
            <example>
            The example below uses UriFactory to create a DocumentCollectionLink and then uses that to create a Document.
            <code language="c#">
            <![CDATA[ 
            Uri collUri = UriFactory.CreateDocumentCollectionUri("MyDb", "MyCollection");
            var doc = await client.CreateDocumentAsync(collUri, new {id = "MyDoc"});
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateDatabaseUri(System.String)">
            <summary>
            Given a database id, this creates a database link.
            </summary>
            <param name="databaseId">The database id</param>
            <returns>
            A database link in the format of /dbs/{0}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>
            </returns>
            <remarks>Would be used when creating or deleting a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> or a <see cref="T:Microsoft.Azure.Documents.User"/> in Azure DocumentDB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateCollectionUri(System.String,System.String)">
            <summary>
            Given a database and collection id, this creates a collection link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <returns>
            A collection link in the format of /dbs/{0}/colls/{1}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/> and {1} being <paramref name="collectionId"/>
            </returns>
            <remarks>Would be used when updating or deleting a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/>, creating a <see cref="T:Microsoft.Azure.Documents.Document"/>, a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/>, a <see cref="T:Microsoft.Azure.Documents.Trigger"/>, a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>, or when executing a query with CreateDocumentQuery in Azure DocumentDB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateDocumentCollectionUri(System.String,System.String)">
            <summary>
            Given a database and collection id, this creates a collection link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <returns>
            A collection link in the format of /dbs/{0}/colls/{1}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/> and {1} being <paramref name="collectionId"/>
            </returns>
            <remarks>Would be used when updating or deleting a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/>, creating a <see cref="T:Microsoft.Azure.Documents.Document"/>, a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/>, a <see cref="T:Microsoft.Azure.Documents.Trigger"/>, a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>, or when executing a query with CreateDocumentQuery in Azure DocumentDB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateUserUri(System.String,System.String)">
            <summary>
            Given a database and user id, this creates a user link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="userId">The user id</param>
            <returns>
            A user link in the format of /dbs/{0}/users/{1}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/> and {1} being <paramref name="userId"/>
            </returns>
            <remarks>Would be used when creating a <see cref="T:Microsoft.Azure.Documents.Permission"/>, or when replacing or deleting a <see cref="T:Microsoft.Azure.Documents.User"/> in Azure DocumentDB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateDocumentUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and document id, this creates a document link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="documentId">The document id</param>
            <returns>
            A document link in the format of /dbs/{0}/colls/{1}/docs/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="documentId"/>
            </returns>
            <remarks>Would be used when creating an <see cref="T:Microsoft.Azure.Documents.Attachment"/>, or when replacing or deleting a <see cref="T:Microsoft.Azure.Documents.Document"/> in Azure DocumentDB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreatePermissionUri(System.String,System.String,System.String)">
            <summary>
            Given a database and user id, this creates a permission link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="userId">The user id</param>
            <param name="permissionId">The permission id</param>
            <returns>
            A permission link in the format of /dbs/{0}/users/{1}/permissions/{2} with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="userId"/> and {2} being <paramref name="permissionId"/>
            </returns>
            <remarks>Would be used when replacing or deleting a <see cref="T:Microsoft.Azure.Documents.Permission"/> in Azure DocumentDB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateStoredProcedureUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and stored proc id, this creates a stored proc link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="storedProcedureId">The stored procedure id</param>
            <returns>
            A stored procedure link in the format of /dbs/{0}/colls/{1}/sprocs/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="storedProcedureId"/>
            </returns>
            <remarks>Would be used when replacing, executing, or deleting a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> in Azure DocumentDB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateTriggerUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and trigger id, this creates a trigger link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="triggerId">The trigger id</param>
            <returns>
            A trigger link in the format of /dbs/{0}/colls/{1}/triggers/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="triggerId"/>
            </returns>
            <remarks>Would be used when replacing, executing, or deleting a <see cref="T:Microsoft.Azure.Documents.Trigger"/> in Azure DocumentDB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateUserDefinedFunctionUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and udf id, this creates a udf link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="udfId">The udf id</param>
            <returns>
            A udf link in the format of /dbs/{0}/colls/{1}/udfs/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="udfId"/>
            </returns>
            <remarks>Would be used when replacing, executing, or deleting a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> in Azure DocumentDB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateConflictUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and conflict id, this creates a conflict link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="conflictId">The conflict id</param>
            <returns>
            A conflict link in the format of /dbs/{0}/colls/{1}/conflicts/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="conflictId"/>
            </returns>
            <remarks>Would be used when creating a <see cref="T:Microsoft.Azure.Documents.Conflict"/> in Azure DocumentDB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateAttachmentUri(System.String,System.String,System.String,System.String)">
            <summary>
            Given a database, collection, document, and attachment id, this creates an attachment link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="documentId">The document id</param>
            <param name="attachmentId">The attachment id</param>
            <returns>
            An attachment link in the format of /dbs/{0}/colls/{1}/docs/{2}/attachments/{3} with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/>, {2} being the <paramref name="documentId"/> and {3} being <paramref name="attachmentId"/>
            </returns>
            <remarks>Would be used when replacing, or deleting an <see cref="T:Microsoft.Azure.Documents.Attachment"/> in Azure DocumentDB.</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreatePartitionKeyRangesUri(System.String,System.String)">
            <summary>
            Given a database and collection, this creates a partition key ranges link in the Azure DocumentDB database service.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <returns>
            A partition key ranges link in the format of /dbs/{0}/colls/{1}/pkranges with {0} being a Uri escaped version of the <paramref name="databaseId"/> and {1} being <paramref name="collectionId"/>.
            </returns>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateSchemaUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and schema id, this creates a schema link in the Azure DocumentDB database service.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="schemaId">The schema id</param>
            <returns>
            A schema link in the format of /dbs/{0}/colls/{1}/schemas/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="schemaId"/>
            </returns>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="T:Microsoft.Azure.Documents.User">
            <summary> 
            Represents a user in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.User.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.User"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.User.PermissionsLink">
            <summary>
            Gets the self-link of the permissions associated with the user for the Azure DocumentDB database service.
            </summary>
            <value>The self-link of the permissions associated with the user.</value> 
        </member>
        <member name="T:Microsoft.Azure.Documents.UserDefinedFunction">
            <summary>
            Represents a user defined function in the Azure DocumentDB database service.
            </summary> 
            <remarks>
            Azure DocumentDB supports JavaScript user defined functions (UDFs) which are stored in the database and can be used inside queries. 
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#javascript-integration for how to use UDFs within queries.
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-programming/#udf for more details about implementing UDFs in JavaScript.
            </remarks>
            <example>
            The following examples show how to register and use UDFs.
            <code language="c#">
            <![CDATA[
            await client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction { Id = "calculateTax", Body = @"function(amt) { return amt * 0.05; }" });
            client.CreateDocumentQuery<Book>(collectionLink, "SELECT VALUE udf.calculateTax(b.price) FROM books b");
            client.CreateDocumentQuery<Book>(collectionLink, new SqlQuerySpec("SELECT VALUE udf.calculateTax(b.price) FROM books b"));
            client.CreateDocumentQuery<Book>(collectionLink).Select(b => UserDefinedFunctionProvider.Invoke("calculateTax", b.Price));
            
            await client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction { Id = "toLowerCase", Body = @"function(s) { return s.ToLowerCase(); }" });
            client.CreateDocumentQuery<Book>(collectionLink, "SELECT * FROM books b WHERE b.toLowerCase = 'war and peace'");
            client.CreateDocumentQuery<Book>(collectionLink, new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.toLowerCase = @bookNameLowerCase",
                new SqlParameterCollection(new SqlParameter[] {new SqlParameter { Name = "@bookNameLowerCase", Value = "War And Peace".ToLower()
             }})));
             client.CreateDocumentQuery<Book>(collectionLink).Where(b => UserDefinedFunctionProvider.Invoke("toLowerCase", b.Title) == "war and peace");
             ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.UserDefinedFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> class for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.UserDefinedFunction.Body">
            <summary>
            Gets or sets the body of the user defined function for the Azure DocumentDB database service.
            </summary>
            <value>The body of the user defined function.</value>
            <remarks>This must be a valid JavaScript function e.g. "function (input) { return input.toLowerCase(); }".</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Collections.Generic.PriorityQueue`1">
            <summary> 
            An implementation of <a href="https://en.wikipedia.org/wiki/Binary_heap">Binary Heap</a>
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Collections.Generic.AsyncCollection`1">
            <summary> 
            Provides awaitable and bounding capabilities for thread-safe collections that implement IProducerConsumerCollection&lt;T&gt;.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.ReplicationPolicy">
            <summary>
            Replication policy.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.ReplicationPolicy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ReplicationPolicy.MaxReplicaSetSize">
            <summary>
            Maximum number of replicas for the partition.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ReplicationPolicy.MinReplicaSetSize">
            <summary>
            Minimum number of replicas to ensure availability
            of the partition.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ReplicationPolicy.AsyncReplication">
            <summary>
            Whether or not async replication is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Query.CompositeContinuationToken">
            <summary>
            A composite continuation token that has both backend continuation token and partition range information. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IConnection.RequestAsync(Microsoft.Azure.Documents.DocumentServiceRequest,System.Uri,Microsoft.Azure.Documents.ResourceOperation,System.Guid)">
            <summary>
            Issue a request and read the response on a connection
            </summary>
            <param name="request">The request to send</param>
            <param name="physicalAddress">
                With connection pooling is used, it is assumed that host:port of the Uri used to open the connection
                matches host:port of the this parameter. However, the path of the Uri need not match the 
            </param>
            <param name="resourceOperation">Resource and Operation Type for the request</param>
            <param name="activityId">Guid activityId for the request</param>
            <returns>The response from the server</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IConnection.Close">
            <summary>
            Close the connection and Dispose underlying disposable resources.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IConnection.HasExpired">
            <summary>
            Checks whether the connection has been unused for longer than its expiration time. To be
            used as a heuristic to reduce network failures while issuing requests on pooled connections.
            </summary>
            <returns>true if connection has expired, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IConnection.ConfirmOpen">
            <summary>
            Checks whether the connection is currently readable and writable. To be used as a heuristic
            to reduce network failures while issuing requests on pooled connections.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IConnection.PoolKey">
            <summary>
            The poolKey passed in to the IConnectionDispenser which created this IConnection
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IConnectionDispenser.OpenNewConnection(System.Guid,System.Uri,System.String)">
            <summary>
            Returns an IConnection which is ready to fulfill requests.
            </summary>
            <param name="activityId">Guid used for correlation between client and service</param>
            <param name="fullUri">The URI of the target server. Only the host and port are used for establishing the connection</param>
            <param name="poolKey">A string uniquely identifying the group of connections being pooled. "host:port" is currently used</param>
            <returns>An IConnection which has had any initialization handshakes performed, so that it is ready for requests</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.RntbdConnection.RequestAsync(Microsoft.Azure.Documents.DocumentServiceRequest,System.Uri,Microsoft.Azure.Documents.ResourceOperation,System.Guid)">
            <summary>
             Async method to makes request to backend using the rntbd protocol
            </summary>
            <param name="request"> a DocumentServiceRequest object that has the state for all the headers </param>
            <param name="physicalAddress"> physical address of the replica </param>
            <param name="resourceOperation"> Resource Type + Operation Type Pair </param>
            <param name="activityId"> ActivityId of the request </param>
            <returns> StoreResponse </returns>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException"> exception that was caught while building the request byte buffer for sending over wire </exception>
            <exception cref="T:Microsoft.Azure.Documents.BadRequestException"> any other exception encountered while building the request </exception>
            <exception cref="T:Microsoft.Azure.Documents.GoneException"> All timeouts for read-only requests are converted to Gone exception </exception>
            <exception cref="T:Microsoft.Azure.Documents.RequestTimeoutException"> Request Times out (if there's no response until the timeout duration </exception>
            <exception cref="T:Microsoft.Azure.Documents.ServiceUnavailableException"> Any other exception that is not from our code (exception SocketException, or Connection Close 
            </exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.RntbdConnection.BuildRequest(Microsoft.Azure.Documents.DocumentServiceRequest,System.String,Microsoft.Azure.Documents.ResourceOperation,System.Int32@,System.Int32@,System.Guid)">
            <summary>
            Given DocumentServiceRequest object, creates a byte array of the request that is to be sent over wire to
            backend per rntbd protocol
            </summary>
            <param name="request"> DocumentService Request</param>
            <param name="replicaPath"> path to the replica, as extracted from the replica uri </param>
            <param name="resourceOperation"> ResourceType + OperationType pair </param>
            <param name="headerAndMetadataSize"></param>
            <param name="bodySize"></param>
            <param name="activityId"></param>
            <exception cref="T:Microsoft.Azure.Documents.InternalServerErrorException"> 
            This is of type DocumentClientException. Thrown 
            if there is a bug in rntbd token serialization 
            </exception>
            <returns> byte array that is the request body to be sent over wire </returns>
        </member>
        <member name="F:Microsoft.Azure.Documents.RntbdConnectionDispenser.ConnectionTimer">
            <summary>
            The delegate is populated by the assembly that desires to trace the timers for the connection establishment.
            Hence ignore the warning "CS0649: field is never assigned to, and will always have its default value null"
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.CollectionRoutingMap">
            <summary>
            Stored partition key ranges in an efficient way with some additional information and provides
            convenience methods for working with set of ranges.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Routing.CollectionRoutingMap.rangeById">
            <summary>
            Partition key range id to partition address and range.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Routing.CollectionRoutingMap.OrderedPartitionKeyRanges">
            <summary>
            Ranges in increasing order.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.DocumentAnalyzer.ExtractPartitionKeyValue(Microsoft.Azure.Documents.Document,Microsoft.Azure.Documents.PartitionKeyDefinition)">
            <summary>
            Extracts effective <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/> from document.
            </summary>
            <remarks>
            This code doesn't do any validation, as it assumes that IndexingPolicy is valid, as it is coming from the backend.
            Expected format is "/prop1/prop2/?". No array expressions are expected.
            </remarks>
            <param name="document">Document to extract partition key value from.</param>
            <param name="partitionKeyDefinition">Information about partition key.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.PartitionKeyDefinitionVersion">
            <summary>
            Partitioning version.
            </summary> 
        </member>
        <member name="F:Microsoft.Azure.Documents.PartitionKeyDefinitionVersion.V1">
            <summary>
            Original version of hash partitioning.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.PartitionKeyDefinitionVersion.V2">
            <summary>
            Enhanced version of hash partitioning - offers better distribution of long partition keys nad uses less storage.
            </summary>
            <remarks>This version should be used for any practical purpose, but it is available in newer SDKs only.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.IRoutingMapProvider">
            <summary>
            Routing map provider provides list of effective partition key ranges for a collection.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.IRoutingMapProvider.TryGetOverlappingRangesAsync(System.String,Microsoft.Azure.Documents.Routing.Range{System.String},System.Boolean)">
            <summary>
            Returns list of effective partition key ranges for a collection.
            </summary>
            <param name="collectionResourceId">Collection for which to retrieve routing map.</param>
            <param name="range">This method will return all ranges which overlap this range.</param>
            <param name="forceRefresh">Whether forcefully refreshing the routing map is necessary</param>
            <returns>List of effective partition key ranges for a collection or null if collection doesn't exist.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.LocationHelper">
            <summary>
            https://azure.microsoft.com/en-us/regions/
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.LocationHelper.GetLocationEndpoint(System.Uri,System.String)">
            <summary>
            For example, for https://contoso.documents.azure.com:443/ and "West US", this will return https://contoso-westus.documents.azure.com:443/
            NOTE: This ONLY called by client first boot when the input endpoint is not available.
            </summary>
            <param name="serviceEndpoint"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.NumberPartitionKeyComponent.FromHexEncodedBinaryString(System.Byte[],System.Int32@)">
            <summary>
            Constructs a NumberPartitionKeyComponent from byte string. This is only for testing/debugging. Please do not use in actual product code.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.PartitionKeyComponentType">
            <summary>
            Types of partition key component
            </summary> 
            <remarks>
            Some of the values might not be used, but this class to be consistent with the backend enum
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal">
            <summary>
            Schema-less Partition Key value.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.PartitionKeyInternal.FromObjectArray(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/> from enumerable of objects.
            </summary>
            <param name="values">Partition key component values.</param>
            <param name="strict">If this is false, unsupported component values will be repliaced with 'Undefined'. If this is true, exception will be thrown.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.PartitionKeyInternal.FromHexEncodedBinaryString(System.String)">
            <summary>
            Constructs a PartitionKeyInternal from hex-encoded byte string. This is only for testing/debugging. Please do not use in actual product code.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.PartitionKeyInternal.GetEffectivePartitionKeyString(Microsoft.Azure.Documents.PartitionKeyDefinition,System.Boolean)">
            <summary>
            Produces effective value. DocumentDB has global index on effective partition key values.
            
            Effective value is produced by applying is range or hash encoding to all the component values, based
            on partition key definition.
            
            String components are hashed and converted to number components.
            Number components are hashed and remain number component.
            bool, null, undefined remain unhashed, because indexing policy doesn't specify index type for these types.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.PartitionKeyRangeGoneException">
            <summary>
            This exception is thrown when DocumentServiceRequest contains x-ms-documentdb-partitionkeyrangeid
            header and such range id doesn't exist.
            No retries should be made in this case, as either split or merge might have happened and query/readfeed
            must take appropriate actions.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.PartitionKeyRangeIsSplittingException">
            <summary>
            This exception is thrown when DocumentServiceRequest reaches partition which is being split
            and was made unavailable for reads/writes.
            
            Gateway/SDK can transparently refresh routing map and retry after some delay.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.PartitionRoutingHelper.TryGetTargetRangeFromContinuationTokenRange(System.Collections.Generic.IReadOnlyList{Microsoft.Azure.Documents.Routing.Range{System.String}},Microsoft.Azure.Documents.Routing.IRoutingMapProvider,System.String,Microsoft.Azure.Documents.Routing.Range{System.String},System.Collections.Generic.List{Microsoft.Azure.Documents.Query.CompositeContinuationToken})">
            <summary>
            Gets <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/> instance which corresponds to <paramref name="rangeFromContinuationToken"/>
            </summary>
            <param name="providedPartitionKeyRanges"></param>
            <param name="routingMapProvider"></param>
            <param name="collectionRid"></param>
            <param name="rangeFromContinuationToken"></param>
            <param name="suppliedTokens"></param>
            <returns>null if collection with specified <paramref name="collectionRid"/> doesn't exist, which potentially means
            that collection was resolved to outdated Rid by name. Also null can be returned if <paramref name="rangeFromContinuationToken"/>
            is not found - this means it was split.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.PartitionRoutingHelper.TryAddPartitionKeyRangeToContinuationTokenAsync(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IReadOnlyList{Microsoft.Azure.Documents.Routing.Range{System.String}},Microsoft.Azure.Documents.Routing.IRoutingMapProvider,System.String,Microsoft.Azure.Documents.Routing.PartitionRoutingHelper.ResolvedRangeInfo)">
            <summary>
            
            </summary>
            <returns><c>false</c> if collectionRid is likely wrong because range was not found. Cache needs to be refreshed probably.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.PathParser.GetPathParts(System.String)">
            <summary>
            Extract parts from path
            </summary>
            <remarks>
            This code doesn't do as much validation as the backend, as it assumes that IndexingPolicy path coming from the backend is valid.
            </remarks>
            <param name="path">A path string</param>
            <returns>An array of parts of path</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.StringPartitionKeyComponent.FromHexEncodedBinaryString(System.Byte[],System.Int32@)">
            <summary>
            Constructs a StringPartitionKeyComponent from byte string. This is only for testing/debugging. Please do not use in actual product code.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.BoundingBox">
            <summary>
            Represents a coordinate range for geometries in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.BoundingBox.#ctor(Microsoft.Azure.Documents.Spatial.Position,Microsoft.Azure.Documents.Spatial.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> class in the Azure DocumentDB database service.
            </summary>
            <param name="min">
            Lowest values for all axes of the bounding box.
            </param>
            <param name="max">
            Highest values for all axes of the bounding box.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.BoundingBox.Equals(Microsoft.Azure.Documents.Spatial.BoundingBox)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> is equal to the <paramref name="other"/> in the Azure DocumentDB database service.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> to compare to this bounding box.</param>
            <returns><c>true</c> if bounding boxes are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> in the Azure DocumentDB database service.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.BoundingBox.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> type in the Azure DocumentDB database service.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.BoundingBox.Min">
            <summary>
            Gets lowest values for all axes of the bounding box in the Azure DocumentDB database service.
            </summary>
            <value>
            Lowest values for all axes of the bounding box.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.BoundingBox.Max">
            <summary>
            Gets highest values for all axes of the bounding box in the Azure DocumentDB database service.
            </summary>
            <value>
            Highest values for all axes of the bounding box.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Crs">
            <summary>
            Represents Coordinate Reference System in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Crs.#ctor(Microsoft.Azure.Documents.Spatial.CrsType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Crs"/> class in the Azure DocumentDB database service.
            </summary>
            <param name="type">
            CRS type.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Crs.Named(System.String)">
            <summary>
            Creates named CRS with the name specified in the Azure DocumentDB database service.
            </summary>
            <param name="name">CRS name.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Spatial.Crs"/> class.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Crs.Linked(System.String)">
            <summary>
            Creates linked CRS in the Azure DocumentDB database service.
            </summary>
            <param name="href">
            CRS link.
            </param>
            <returns>
            Instance of <see cref="T:Microsoft.Azure.Documents.Spatial.Crs"/> class.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Crs.Linked(System.String,System.String)">
            <summary>
            Creates linked CRS with the optional type specified in the Azure DocumentDB database service.
            </summary>
            <param name="href">
            CRS link.
            </param>
            <param name="type">
            CRS link type.
            </param>
            <returns>
            Instance of <see cref="T:Microsoft.Azure.Documents.Spatial.Crs"/> class.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Crs.Default">
            <summary>
            Gets default CRS in the Azure DocumentDB database service. Default CRS is named CRS with the name "urn:ogc:def:crs:OGC:1.3:CRS84".
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Crs.Unspecified">
            <summary>
            Gets "Unspecified" CRS in the Azure DocumentDB database service. No CRS can be assumed for Geometries having "Unspecified" CRS.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Crs.Type">
            <summary>
            Gets CRS type in the Azure DocumentDB database service.
            </summary>
            <value>
            Type of CRS.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.CrsType">
            <summary>
            Type of Coordinate Reference System in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.CrsType.Named">
            <summary>
            Coordinate Reference System is specified by name.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.CrsType.Linked">
            <summary>
            Coordinate Reference System is specified by link.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.CrsType.Unspecified">
            <summary>
            No Coordinate Reference System can be assumed for a geometry.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Geometry">
            <summary>
            Base class for spatial geometry objects in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Geometry.#ctor(Microsoft.Azure.Documents.Spatial.GeometryType,Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> class in the Azure DocumentDB database service.
            </summary>
            <param name="type">
            Geometry type.
            </param>
            <param name="geometryParams">
            Coordinate reference system, additional properties etc.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Geometry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> in the Azure DocumentDB database service.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Geometry.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> type in the Azure DocumentDB database service.
            </summary>
            <returns>
            A hash code for the current geometry.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Geometry.Equals(Microsoft.Azure.Documents.Spatial.Geometry)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> is equal to the <paramref name="other"/> in the Azure DocumentDB database service.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.</param>
            <returns><c>true</c> if geometries are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Geometry.Crs">
            <summary>
            Gets the Coordinate Reference System for this geometry in the Azure DocumentDB database service.
            </summary>
            <value>
            The Coordinate Reference System for this geometry.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Geometry.Type">
            <summary>
            Gets geometry type in the Azure DocumentDB database service.
            </summary>
            <value>
            Type of geometry.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Geometry.BoundingBox">
            <summary>
            Gets bounding box for this geometry in the Azure DocumentDB database service.
            </summary>
            <value>
            Bounding box of the geometry.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Geometry.AdditionalProperties">
            <summary>
            Gets additional properties in the Azure DocumentDB database service.
            </summary>
            <value>
            Additional geometry properties.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Geometry.CrsForSerialization">
            <summary>
            Gets or sets CRS value used for serialization in the Azure DocumentDB database service.
            </summary>
            <remarks>
            This is artificial property needed for serialization. If CRS is default one, we don't want
            to serialize anything.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.GeometryCollection">
            <summary>
            Represents a geometry consisting of other geometries.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryCollection.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Geometry})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> class. 
            </summary>
            <param name="geometries">
            List of geometries.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryCollection.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Geometry},Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> class.
            </summary>
            <param name="geometries">
            Child geometries.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryCollection.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryCollection.Equals(Microsoft.Azure.Documents.Spatial.GeometryCollection)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> is equal to the <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/>.</param>
            <returns><c>true</c> if geometry collections are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.GeometryCollection.Geometries">
            <summary>
            Gets child geometries.
            </summary>
            <value>
            Child geometries.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions">
            <summary>
            Operations supported on <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> type in the Azure DocumentDB database service. These operations are to be used in LINQ expressions only
            and will be evaluated on server. There's no implementation provided in the client library.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.Distance(Microsoft.Azure.Documents.Spatial.Geometry,Microsoft.Azure.Documents.Spatial.Geometry)">
            <summary>
            Distance in meters between two geometries in the Azure DocumentDB database service.
            </summary>
            <param name="from">First <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.</param>
            <param name="to">Second <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.</param>
            <returns>Returns distance in meters between two geometries.</returns>
            <remarks>
            Today this function support only geometries of <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Point"/> type.
            </remarks>
            <example>
            <code>
            <![CDATA[
            var distanceQuery = documents.Where(document => document.Location.Distance(new Point(20.1, 20)) < 20000);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.Within(Microsoft.Azure.Documents.Spatial.Geometry,Microsoft.Azure.Documents.Spatial.Geometry)">
            <summary>
            Determines if <paramref name="inner"/> <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> is fully contained inside <paramref name="outer"/> <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> in the Azure DocumentDB database service.
            </summary>
            <param name="inner">Inner <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.</param>
            <param name="outer">Outer <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.</param>
            <returns>
            <c>true</c> if <paramref name="inner"/> <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> is fully contained inside <paramref name="outer"/> <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.
            <c>false</c> otherwise.
            </returns>
            <remarks>
            Currently this function supports <paramref name="inner"/> geometry of type <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Point"/> and outer geometry of type <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Polygon"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Polygon polygon = new Polygon(
                   new[]
                   {
                        new Position(10, 10),
                        new Position(30, 10),
                        new Position(30, 30),
                        new Position(10, 30),
                        new Position(10, 10)
                   });
            var withinQuery = documents.Where(document => document.Location.Within(polygon));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.IsValid(Microsoft.Azure.Documents.Spatial.Geometry)">
            <summary>
            <para>
            Determines if the <paramref name="geometry"/> specified is valid and can be indexed
            or used in queries by Azure DocumentDB database service.
            </para>
            <para>
            If a geometry is not valid, it will not be indexed. Also during query time invalid geometries are equivalent to <c>undefined</c>.
            </para>
            </summary>
            <param name="geometry">The geometry to check for validity.</param>
            <returns><c>true</c> if geometry is valid. <c>false</c> otherwise.</returns>
            <remarks>
            Currently this function supports <paramref name="geometry"/> of type <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Point"/> and <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Polygon"/>.
            </remarks>
            <example>
            <para>
            This example select all the documents which contain invalid geometries which were not indexed.
            </para>
            <code>
            <![CDATA[
            var invalidDocuments = documents.Where(document => !document.Location.IsValid());
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.IsValidDetailed(Microsoft.Azure.Documents.Spatial.Geometry)">
            <summary>
            <para>
            Determines if the <paramref name="geometry"/> specified is valid and can be indexed
            or used in queries by Azure DocumentDB database service.
            </para>
            <para>
            If a geometry is not valid, it will not be indexed. Also during query time invalid geometries are equivalent to <c>undefined</c>.
            </para>
            </summary>
            <param name="geometry">The geometry to check for validity.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryValidationResult"/>.</returns>
            <remarks>
            Currently this function supports <paramref name="geometry"/> of type <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Point"/> and <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Polygon"/>.
            </remarks>
            <example>
            <para>
            This example select all the documents which contain invalid geometries which were not indexed.
            </para>
            <code>
            <![CDATA[
            var invalidReason = documents.Where(document => !document.Location.IsValid()).Select(document => document.Location.IsValidDetailed());
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.Intersects(Microsoft.Azure.Documents.Spatial.Geometry,Microsoft.Azure.Documents.Spatial.Geometry)">
            <summary>
            Checks if geometry1 intersects with geometry2.
            </summary>
            <param name="geometry1">First <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.</param>
            <param name="geometry2">Second <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.</param>
            <returns>Returns true if geometry1 intersects with geometry2, otherwise returns false.</returns>
            <example>
            <code>
            <![CDATA[
            var distanceQuery = documents.Where(document => document.Location.Intersects(new Point(20.1, 20)));
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.GeometryParams">
            <summary>
            Not frequently used geometry parameters in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.GeometryParams.AdditionalProperties">
            <summary>
            Gets or sets any additional properties to be stored as part of a geometry in the Azure DocumentDB database service.
            </summary>
            <value>
            Additional geometry properties.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.GeometryParams.Crs">
            <summary>
            Gets or sets Coordinate Reference System for the geometry in the Azure DocumentDB database service.
            </summary>
            <value>
            Coordinate Reference System for the geometry.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.GeometryParams.BoundingBox">
            <summary>
            Gets or sets a bounding box for the geometry in the Azure DocumentDB database service.
            </summary>
            <value>
            Bounding box for the geometry.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.GeometryType">
            <summary>
            Geometry type in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.Point">
            <summary>
            Represents single point.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.MultiPoint">
            <summary>
            Represents geometry consisting of several points.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.LineString">
            <summary>
            Sequence of connected line segments.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.MultiLineString">
            <summary>
            Geometry consisting of several LineStrings.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.Polygon">
            <summary>
            Represents a polygon with optional holes.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.MultiPolygon">
            <summary>
            Represents a geometry comprised of several polygons.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.GeometryCollection">
            <summary>
            Represents a geometry comprised of other geometries.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.GeometryValidationResult">
            <summary>
            <para>
            Return value of <see cref="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.IsValidDetailed(Microsoft.Azure.Documents.Spatial.Geometry)"/> in the Azure DocumentDB database service.
            </para>
            <para>
            Contains detailed description why a geometyr is invalid.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.GeometryValidationResult.IsValid">
            <summary>
            Returns a value indicating whether geometry for which <see cref="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.IsValidDetailed(Microsoft.Azure.Documents.Spatial.Geometry)"/>
            was called is valid or not in the Azure DocumentDB database service.
            </summary>
            <value>
            <c>true</c> if geometry for which <see cref="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.IsValidDetailed(Microsoft.Azure.Documents.Spatial.Geometry)"/> was called is valid. <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.GeometryValidationResult.Reason">
            <summary>
            If geometry is invalid, returns detailed reason in the Azure DocumentDB database service.
            </summary>
            <value>
            Description why a geometry is invalid.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.LinearRing">
            <summary>
            A <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> is closed LineString with 4 or more positions. The first and last positions are
            equivalent (they represent equivalent points).
            Though a <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> is not explicitly represented as a GeoJSON geometry type, it is referred to in
            the <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> geometry type definition in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinearRing.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> class in the Azure DocumentDB database service.
            </summary>
            <param name="coordinates">
            The coordinates. 4 or more positions. The first and last positions are equivalent (they represent equivalent
            points).
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinearRing.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> in the Azure DocumentDB database service.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinearRing.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> positions in the Azure DocumentDB database service. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinearRing.Equals(Microsoft.Azure.Documents.Spatial.LinearRing)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> is equal to the <paramref name="other"/> in the Azure DocumentDB database service.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> to compare to this one.</param>
            <returns><c>true</c> if linear rings are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.LinearRing.Positions">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> positions in the Azure DocumentDB database service.
            </summary>
            <value>
            Positions of the <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/>.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.LineString">
            <summary>
            Represents a geometry consisting of connected line segments.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineString.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/> class. 
            </summary>
            <param name="coordinates">
            List of positions through which the line string goes.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineString.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position},Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/> class.
            </summary>
            <param name="coordinates">
            The coordinates.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineString.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineString.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineString.Equals(Microsoft.Azure.Documents.Spatial.LineString)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/> is equal to the <paramref name="other"/>.
            </summary>
            <param name="other">LineString to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/>.</param>
            <returns><c>true</c> if line strings are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.LineString.Positions">
            <summary>
            Gets line string positions.
            </summary>
            <value>
            Positions of the line string.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates">
            <summary>
            Line string coordinates.
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineStringCoordinates.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> class.
            </summary>
            <param name="positions">
            Line string positions..
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineStringCoordinates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineStringCoordinates.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineStringCoordinates.Equals(Microsoft.Azure.Documents.Spatial.LineStringCoordinates)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> is equal to the <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.LineStringCoordinates.Positions">
            <summary>
            Gets line string positions.
            </summary>
            <value>
            Positions of the line string.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.LinkedCrs">
            <summary>
            Coordinate Reference System which is identified by link in the Azure DocumentDB database service. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinkedCrs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> class in the Azure DocumentDB database service. 
            </summary>
            <param name="href">
            Link which identifies the Coordinate Reference System.
            </param>
            <param name="hrefType">
            Optional string which hints at the format used to represent CRS parameters at the provided <paramref name="href"/>.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinkedCrs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> in the Azure DocumentDB database service. 
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinkedCrs.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> in the Azure DocumentDB database service. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinkedCrs.Equals(Microsoft.Azure.Documents.Spatial.LinkedCrs)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> is equal to <paramref name="other"/> in the Azure DocumentDB database service. 
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>.</param>
            <returns><c>true</c> if CRSs are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.LinkedCrs.Href">
            <summary>
            Gets the link which identifies the Coordinate Reference System in the Azure DocumentDB database service. 
            </summary>
            <value>
            Link which identifies the Coordinate Reference System.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.LinkedCrs.HrefType">
            <summary>
            Gets optional string which hints at the format used to represent CRS parameters at the provided <see cref="P:Microsoft.Azure.Documents.Spatial.LinkedCrs.Href"/> in the Azure DocumentDB database service. 
            </summary>
            <value>
            Optional string which hints at the format used to represent CRS parameters at the provided <see cref="P:Microsoft.Azure.Documents.Spatial.LinkedCrs.Href"/>.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.MultiLineString">
            <summary>
            Represents a geometry consisting of multiple <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/>.
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Spatial.LineString"/>.
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiLineString.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.LineStringCoordinates})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> class. 
            </summary>
            <param name="lineStrings">
            List of <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> instances representing individual line strings.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiLineString.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.LineStringCoordinates},Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> class.
            </summary>
            <param name="lineStrings">
            List of <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> instances representing individual line strings.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiLineString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiLineString.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiLineString.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiLineString.Equals(Microsoft.Azure.Documents.Spatial.MultiLineString)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/>.</param>
            <returns><c>true</c> if line strings are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.MultiLineString.LineStrings">
            <summary>
            Gets collection of <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> representing individual line strings.
            </summary>
            <value>
            Collection of <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> representing individual line strings.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.MultiPoint">
            <summary>
            Geometry consisting of several points.
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Spatial.Point"/>.
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPoint.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> class.
            </summary>
            <param name="points">List of <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> representing individual points.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPoint.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position},Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> class.
            </summary>
            <param name="points">
            List of <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> representing individual points.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPoint.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> type.
            </summary>
            <returns>
            A hash code for the current geometry.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPoint.Equals(Microsoft.Azure.Documents.Spatial.MultiPoint)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other"> <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.MultiPoint.Points">
            <summary>
            Gets collections of <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> representing individual points.
            </summary>
            <value>
            Collections of <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> representing individual points.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.MultiPolygon">
            <summary>
            Geometry which is comprised of multiple polygons.
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPolygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.PolygonCoordinates})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> class.
            </summary>
            <param name="polygons">
            List of <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> instances. Each <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> represents separate polygon.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPolygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.PolygonCoordinates},Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> class.
            </summary>
            <param name="polygons">
            List of <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> instances. Each <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> represents separate polygon.
            </param>
            <param name="geometryParams">Additional geometry parameters.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPolygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPolygon.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPolygon.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPolygon.Equals(Microsoft.Azure.Documents.Spatial.MultiPolygon)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.MultiPolygon.Polygons">
            <summary>
            Gets collection of <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> instances. Each <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> represents separate polygon.
            </summary>
            <value>
            Collection of <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> instances. Each <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> represents separate polygon.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.NamedCrs">
            <summary>
            Coordinate Reference System which is identified by name in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.NamedCrs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.NamedCrs"/> class in the Azure DocumentDB database service. 
            </summary>
            <param name="name">
            Name identifying a coordinate reference system.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.NamedCrs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.NamedCrs"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.NamedCrs"/> in the Azure DocumentDB database service.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.NamedCrs.GetHashCode">
            <summary>
            Serves as a hash function for the name identifying a coordinate reference system in the Azure DocumentDB database service.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.NamedCrs"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.NamedCrs.Equals(Microsoft.Azure.Documents.Spatial.NamedCrs)">
            <summary>
            Determines if this CRS is equal to <paramref name="other" /> CRS in the Azure DocumentDB database service.
            </summary>
            <param name="other">CRS to compare to this CRS.</param>
            <returns><c>true</c> if CRSs are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.NamedCrs.Name">
            <summary>
            Gets a name identifying a coordinate reference system in the Azure DocumentDB database service. For example "urn:ogc:def:crs:OGC:1.3:CRS84".
            </summary>
            <value>
            Name identifying a coordinate reference system. For example "urn:ogc:def:crs:OGC:1.3:CRS84".
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Point">
            <summary>
            Point geometry class in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> class in the Azure DocumentDB database service.
            </summary>
            <param name="longitude">
            Longitude of the point.
            </param>
            <param name="latitude">
            Latitude of the point.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.#ctor(Microsoft.Azure.Documents.Spatial.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> class in the Azure DocumentDB database service.
            </summary>
            <param name="position">
            Position of the point.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.#ctor(Microsoft.Azure.Documents.Spatial.Position,Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> class in the Azure DocumentDB database service.
            </summary>
            <param name="position">
            Point coordinates.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> class in the Azure DocumentDB database service.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.Equals(Microsoft.Azure.Documents.Spatial.Point)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> is equal to <paramref name="other"/> in the Azure DocumentDB database service.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> in the Azure DocumentDB database service.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> type in the Azure DocumentDB database service.
            </summary>
            <returns>
            A hash code for the current geometry.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Point.Position">
            <summary>
            Gets point coordinates in the Azure DocumentDB database service.
            </summary>
            <value>
            Coordinates of the point.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Polygon">
            <summary>
            <para>
            Polygon geometry class in the Azure DocumentDB database service.
            </para>
            <para>
            A polygon is represented by the set of "polygon rings". Each ring is closed line string.
            First ring defines external ring. All subsequent rings define "holes" in the external ring.
            </para>
            <para>
            Rings must be specified using Left Hand Rule: traversing the ring in the order of its points, should result
            in internal area of the polygon being to the left side.
            </para>
            </summary>
            <example>
            This example shows how to define a polygon which covers small portion of the Earth:
            <code language="c#">
            <![CDATA[
            var polygon = new Polygon(
                    new[]
                    {
                        new Position(20.0, 20.0),
                        new Position(30.0, 20.0),
                        new Position(30.0, 30.0),
                        new Position(20.0, 30.0)
                        new Position(20.0, 20.0)
                    });
            ]]>        
            </code>
            </example>
            <example>
            This example shows how to define a polygon which covers area more than one hemisphere:
            (Notice that only order of coordinates was reversed).
            <code language="c#">
            <![CDATA[
            var polygon = new Polygon(
                    new[]
                    {
                        new Position(20.0, 20.0),
                        new Position(20.0, 30.0),
                        new Position(30.0, 30.0),
                        new Position(30.0, 20.0)
                        new Position(20.0, 20.0)
                    });
            ]]>        
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> class,
            from external ring (the polygon contains no holes) in the Azure DocumentDB database service.
            </summary>
            <param name="externalRingPositions">
            External polygon ring coordinates.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.LinearRing})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> class in the Azure DocumentDB database service.
            </summary>
            <param name="rings">
            <para>
            Polygon rings.
            </para>
            <para>
            First ring is external ring. Following rings define 'holes' in the polygon.
            </para>
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.LinearRing},Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> class in the Azure DocumentDB database service.
            </summary>
            <param name="rings">
            Polygon rings.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> class in the Azure DocumentDB database service.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> in the Azure DocumentDB database service.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> type in the Azure DocumentDB database service.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.Equals(Microsoft.Azure.Documents.Spatial.Polygon)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> is equal to the <paramref name="other"/> in the Azure DocumentDB database service.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Polygon.Rings">
            <summary>
            Gets the polygon rings in the Azure DocumentDB database service.
            </summary>
            <value>
            Polygon rings.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates">
            <summary>
            Polygon coordinates.
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.PolygonCoordinates.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.LinearRing})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> class.
            </summary>
            <param name="rings">
            The rings of the polygon.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.PolygonCoordinates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.PolygonCoordinates.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/>. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.PolygonCoordinates.Equals(Microsoft.Azure.Documents.Spatial.PolygonCoordinates)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> is equal to the <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.PolygonCoordinates.Rings">
            <summary>
            Gets polygon rings.
            </summary>
            <value>
            Rings of the polygon.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Position">
            <summary>
            <para>
            A position is represented by an array of numbers in the Azure DocumentDB database service. There must be at least two elements, and may be more.
            </para>
            <para>
            The order of elements must follow longitude, latitude, altitude.
            Any number of additional elements are allowed - interpretation and meaning of additional elements is up to the application.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Position.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> class in the Azure DocumentDB database service.
            </summary>
            <param name="longitude">
            Longitude value.
            </param>
            <param name="latitude">
            Latitude value.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Position.#ctor(System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> class in the Azure DocumentDB database service.
            </summary>
            <param name="longitude">
            Longitude value.
            </param>
            <param name="latitude">
            Latitude value.
            </param>
            <param name="altitude">
            Optional altitude value.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Position.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> class in the Azure DocumentDB database service.
            </summary>
            <param name="coordinates">
            Position values.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Position.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> in the Azure DocumentDB database service.
            </summary>
            <returns>
            true if the specified <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> to compare to the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Position.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> type in the Azure DocumentDB database service.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Position.Equals(Microsoft.Azure.Documents.Spatial.Position)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> is equal to the <paramref name="other"/> in the Azure DocumentDB database service.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Position.Coordinates">
            <summary>
            Gets position coordinates in the Azure DocumentDB database service.
            </summary>
            <value>
            Coordinate values.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Position.Longitude">
            <summary>
            Gets longitude in the Azure DocumentDB database service.
            </summary>
            <value>
            Longitude value.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Position.Latitude">
            <summary>
            Gets latitude in the Azure DocumentDB database service.
            </summary>
            <value>
            Latitude value.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Position.Altitude">
            <summary>
            Gets optional altitude in the Azure DocumentDB database service.
            </summary>
            <value>
            Altitude value.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.UnspecifiedCrs">
            <summary>
            Unspecified CRS. If a geometry has this CRS, no CRS can be assumed for it according to GeoJSON spec.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.UnspecifiedCrs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.UnspecifiedCrs"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.UnspecifiedCrs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.UnspecifiedCrs.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.UnspecifiedCrs.Equals(Microsoft.Azure.Documents.Spatial.UnspecifiedCrs)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>.</param>
            <returns><c>true</c> if CRSs are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.BoundingBoxJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.BoundingBoxJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.BoundingBoxJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.BoundingBoxJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.CrsJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Documents.Spatial.Crs"/> class and all its implementations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.CrsJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.CrsJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.CrsJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.GeometryJsonConverter">
            <summary>
            Converter for <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.GeometryJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">
            The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.
            </param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.GeometryJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.GeometryJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Converters.GeometryJsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.LinearRingJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.LinearRingJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.LinearRingJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.LinearRingJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.LineStringCoordinatesJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.LineStringCoordinatesJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.LineStringCoordinatesJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.LineStringCoordinatesJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.PolygonCoordinatesJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.PolygonCoordinatesJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.PolygonCoordinatesJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.PolygonCoordinatesJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.PositionJsonConverter">
            <summary>
            Converter for <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.PositionJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">
            The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.
            </param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.PositionJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.PositionJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Common.CollectionCache">
            <summary>
            Cache to provide resource id lookup based on resource name
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Common.CollectionCache.ResolveCollectionAsync(Microsoft.Azure.Documents.DocumentServiceRequest,System.Threading.CancellationToken)">
            <summary>
            Resolves a request to a collection in a sticky manner.
            Unless request.ForceNameCacheRefresh is equal to true, it will return the same collection.
            </summary>
            <param name="request">Request to resolve.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Common.CollectionCache.Refresh(System.String)">
            <summary>
            This method is only used in client SDK in retry policy as it doesn't have request handy.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.CustomTypeExtensions">
            <summary>
            Extension class for defining methods/properties on Type class that are 
            not available on .NET Standard 1.6. This allows us to keep the same code
            we had earlier and when compiling for .NET Standard 1.6, we use these 
            extension methods that call GetTypeInfo() on the Type instance and call
            the corresponding method on it.
            
            IsGenericType, IsEnum, IsValueType, IsInterface and BaseType are properties
            on Type class but since we cannot define "extension properties", I've converted 
            them to methods and return the underlying property value from the call to
            GetTypeInfo(). For .NET Framework, these extension methods simply return 
            the underlying property value.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKeyMismatchRetryPolicy.ShouldRetryAsync(System.Exception,System.Threading.CancellationToken)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="exception">Exception that occured when the operation was tried</param>
            <param name="cancellationToken"></param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKeyMismatchRetryPolicy.OnBeforeSendRequest(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            Method that is called before a request is sent to allow the retry policy implementation
            to modify the state of the request.
            </summary>
            <param name="request">The request being sent to the service.</param>
        </member>
        <member name="T:Microsoft.Azure.Documents.SystemFunctions.TypeCheckFunctionsExtensions">
            <summary>
            Provide methods for type checking.
            These methods are to be used in LINQ expressions only and will be evaluated on server.
            There's no implementation provided in the client library.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SystemFunctions.TypeCheckFunctionsExtensions.IsDefined(System.Object)">
            <summary>
            Determines if a certain property is defined or not.
            </summary>
            <param name="obj"></param>
            <returns>Returns true if this property is defined otherwise returns false.</returns>
            <remarks>
            </remarks>
            <example>
            <code>
            <![CDATA[
            var isDefinedQuery = documents.Where(document => document.Name.IsDefined());
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.SystemFunctions.TypeCheckFunctionsExtensions.IsNull(System.Object)">
            <summary>
            Determines if a certain property is null or not.
            </summary>
            <param name="obj"></param>
            <returns>Returns true if this property is null otherwise returns false.</returns>
            <remarks>
            </remarks>
            <example>
            <code>
            <![CDATA[
            var isNullQuery = documents.Where(document => document.Name.IsNull());
            ]]>
            </code>
            </example>s>
        </member>
        <member name="M:Microsoft.Azure.Documents.SystemFunctions.TypeCheckFunctionsExtensions.IsPrimitive(System.Object)">
            <summary>
            Determines if a certain property is of premitive JSON type.
            </summary>
            <param name="obj"></param>
            <returns>Returns true if this property is null otherwise returns false.</returns>
            <remarks>
            Premitive JSON types (Double, String, Boolean and Null)
            </remarks>
            <example>
            <code>
            <![CDATA[
            var isPrimitiveQuery = documents.Where(document => document.Name.IsPrimitive());
            ]]>
            </code>
            </example>s>
        </member>
        <member name="M:Microsoft.Azure.Documents.Common.IAddressCache.TryGetAddresses(Microsoft.Azure.Documents.DocumentServiceRequest,Microsoft.Azure.Documents.PartitionKeyRangeIdentity,Microsoft.Azure.Documents.ServiceIdentity,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Resolves physical addresses by either PartitionKeyRangeIdentity or by ServiceIdentity.
            Client SDK would resolve by PartitionKeyRangeIdentity. Gateway would resolve by ServiceIdentity.
            </summary>
            <param name="request">
            Request is needed only by GatewayAddressCache in the only case when request is name based and user has name based auth token.
            Neither PartitionkeyRangeIdentity nor ServiceIdentity can be used to locate auth token in this case.
            </param>
            <param name="partitionKeyRangeIdentity">This parameter will be supplied in both client SDK and Gateway. In Gateway it will be absent only in case <see cref="P:Microsoft.Azure.Documents.DocumentServiceRequest.ServiceIdentity"/> is not <c>null</c>.</param>
            <param name="serviceIdentity">This parameter will be only supplied in Gateway. FabricAddressCache ignores <paramref name="partitionKeyRangeIdentity"/>.</param>
            <param name="forceRefreshPartitionAddresses">Whether addresses need to be refreshed as previously resolved addresses were determined to be outdated.</param>
            <param name="cancellationToken">Instance of <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>Physical addresses.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.AddressResolver">
            <summary>
            Abstracts out the logic to resolve physical replica addresses for the given <see cref="T:Microsoft.Azure.Documents.DocumentServiceRequest"/>.
            
            AddressCache internally maintains CollectionCache, CollectionRoutingMapCache and BackendAddressCache.
            Logic in this class mainly joins these 3 caches and deals with potential staleness of the caches.
            
            More details are available here:
            https://microsoft.sharepoint.com/teams/DocumentDB/Design%20Documents/Manageability/Elastic%20Collections%20Routing.docx?d=w3356bd9ad32746b280c0bcb8f9905986
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.AddressResolver.ThrowIfTargetChanged(Microsoft.Azure.Documents.DocumentServiceRequest,Microsoft.Azure.Documents.PartitionKeyRange)">
            <summary>
            Validates if the target partition to which the request is being sent has changed during retry.
            If that happens, the request is no more valid and need to be retried.
            Also has the side-effect that if the target identity is not set, we set it on the request
            </summary>
            <param name="request">Request in progress</param>
            <param name="targetRange">Target partition key range determined by address resolver</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.AddressResolver.ResolveAddressesAndIdentityAsync(Microsoft.Azure.Documents.DocumentServiceRequest,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Resolves the endpoint of the partition for the given request
            </summary>
            <param name="request">Request for which the partition endpoint resolution is to be performed</param>
            <param name="forceRefreshPartitionAddresses">Force refresh the partition's endpoint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.ClientResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.AuthTokenNotFound">
            <summary>
              Looks up a localized string similar to The client does not have any valid token for the requested resource {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_IllegalMemberAccess">
            <summary>
              Looks up a localized string similar to Query expression is invalid, member {0} of type {1} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidArrayIndexExpression">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} is unsupported in this context. Supported expressions are MemberAccess and ArrayIndex..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidArrayIndexType">
            <summary>
              Looks up a localized string similar to Type {0} for an array index parameter is invalid. Array index parameter must be int..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidComparison">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} must either have LHS or RHS as constant..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidComparisonType">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} of type {1} cannot be used in this context..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidExpression">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} is unsupported. Supported expressions are &apos;Queryable.Where&apos;, &apos;Queryable.Select&apos; &amp; &apos;Queryable.SelectMany&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidLeftExpression">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} is not allowed in this context..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidMemberAccessExpression">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} is unsupported in this context. Supported expressions are parameter reference, array index and property reference..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidMethodCall">
            <summary>
              Looks up a localized string similar to Query expression is invalid, method call {0} is not allowed at this context. Allowed methods are {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidQueryType">
            <summary>
              Looks up a localized string similar to QueryType {0} is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidReturnType">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression return type {0} is unsupported. Query must evaluate to IEnumerable..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_TooManySelectManyArguments">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} contains too many arguments. .
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_TransformQueryException">
            <summary>
              Looks up a localized string similar to An error occured while evaluating the transform expression {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadSession">
            <summary>
              Looks up a localized string similar to Session object retrieved from client with endpoint {0} cannot be used on a client initialized to endpoint {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BinaryOperatorNotSupported">
            <summary>
              Looks up a localized string similar to Binary operator &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.ConstantTypeIsNotSupported">
            <summary>
              Looks up a localized string similar to Constant of type &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.ConstructorInvocationNotSupported">
            <summary>
              Looks up a localized string similar to Constructor invocation is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.ExpectedMethodCallsMethods">
            <summary>
              Looks up a localized string similar to Expected a static IQueryable or IEnumerable extension method, received an instance method..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.ExpressionTypeIsNotSupported">
            <summary>
              Looks up a localized string similar to Expression with NodeType &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.FailedToEvaluateSpatialExpression">
            <summary>
              Looks up a localized string similar to Expression tree cannot be processed because evaluation of Spatial expression failed..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.InputIsNotIDocumentQuery">
            <summary>
              Looks up a localized string similar to Input is not of type IDocumentQuery..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.InvalidArgumentsCount">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for method &apos;{0}&apos;. Expected &apos;{1}&apos; but received &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.InvalidCallToUserDefinedFunctionProvider">
            <summary>
              Looks up a localized string similar to This method should only be called within Linq expression to Invoke a User-defined function..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.InvalidRangeError">
            <summary>
              Looks up a localized string similar to Range low value must be less than or equal the high value..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.InvalidTakeValue">
            <summary>
              Looks up a localized string similar to The count value provided for a Take expression must be an integer..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.InvalidTypesForMethod">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; can not be invoked for type &apos;{1}&apos;. Supported types are &apos;[{2}]&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.MediaLinkInvalid">
            <summary>
              Looks up a localized string similar to MediaLink is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.MemberBindingNotSupported">
            <summary>
              Looks up a localized string similar to Member binding is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.MethodNotSupported">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.NotSupported">
            <summary>
              Looks up a localized string similar to Not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.OnlyLINQMethodsAreSupported">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; is not supported. Only LINQ Methods are supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.PartitionKeyExtractError">
            <summary>
              Looks up a localized string similar to Unable to extract partition key from document. Ensure that you have provided a valid PartitionKeyValueExtractor function..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.PartitionPropertyNotFound">
            <summary>
              Looks up a localized string similar to Partition property not found in the document..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.PartitionResolver_DatabaseAlreadyExist">
            <summary>
              Looks up a localized string similar to An IPartitionResolver already exists for this database.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.PartitionResolver_DatabaseDoesntExist">
            <summary>
              Looks up a localized string similar to No IPartitionResolver available for this database.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.PathExpressionsOnly">
            <summary>
              Looks up a localized string similar to Only path expressions are supported for SelectMany..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.RangeNotFoundError">
            <summary>
              Looks up a localized string similar to A containing range for {0} doesn&apos;t exist in the partition map..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.StringCompareToInvalidConstant">
            <summary>
              Looks up a localized string similar to The right hand side of string.CompareTo() comparison must be constant &apos;0&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.StringCompareToInvalidOperator">
            <summary>
              Looks up a localized string similar to Invalid operator for string.CompareTo(). Vaid operators are (&apos;==&apos;, &apos;&lt;&apos;, &apos;&lt;=&apos;, &apos;&gt;&apos; or &apos;&gt;=&apos;).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.UdfNameIsNullOrEmpty">
            <summary>
              Looks up a localized string similar to User-defined function name can not be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.UnaryOperatorNotSupported">
            <summary>
              Looks up a localized string similar to Unary operator &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.UnexpectedAuthTokenType">
            <summary>
              Looks up a localized string similar to Unexpected authorization token type &apos;({0})&apos;. Expected &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.UnexpectedTokenType">
            <summary>
              Looks up a localized string similar to Unexpected token type: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.UnsupportedPartitionKey">
            <summary>
              Looks up a localized string similar to Unsupported type {0} for partitionKey..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.ValueAndAnonymousTypesAndGeometryOnly">
            <summary>
              Looks up a localized string similar to Instantiation of only value types, anonymous types and spatial types are supported..
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.ClientRetryPolicy">
            <summary>
            Client policy is combination of endpoint change retry + throttling retry.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.ClientRetryPolicy.ShouldRetryAsync(System.Exception,System.Threading.CancellationToken)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="exception">Exception that occured when the operation was tried</param>
            <param name="cancellationToken"></param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.ClientRetryPolicy.OnBeforeSendRequest(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            Method that is called before a request is sent to allow the retry policy implementation
            to modify the state of the request.
            </summary>
            <param name="request">The request being sent to the service.</param>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.ConnectionMode">
            <summary>
            Represents the connection mode to be used by the client when connecting to the Azure DocumentDB database service.
            </summary>
            <remarks>
            Direct and Gateway connectivity modes are supported. Gateway is the default. 
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            DocumentClient client = new DocumentClient(endpointUri, masterKey, new ConnectionPolicy { ConnectionMode = ConnectionMode.Direct });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.Protocol"/>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.ConnectionMode.Gateway">
            <summary>
            Use the DocumentDB gateway to route all requests to the Azure DocumentDB database service. The gateway proxies requests to the right data partition.
            </summary>
            <remarks>
            Use Gateway connectivity when within firewall settings do not allow Direct connectivity. All connections 
            are made to the database account's endpoint through the standard HTTPS port (443).
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.ConnectionMode.Direct">
            <summary>
            Uses direct connectivity to connect to the data nodes in the Azure DocumentDB database service. Use gateway only to initialize and cache logical addresses and refresh on updates
            </summary>
            <remarks>
            Use Direct connectivity for best performance. Connections are made to the data nodes on DocumentDB's clusters 
            on a range of port numbers either using HTTPS or TCP/SSL.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.ConnectionPolicy">
            <summary>
            Represents the connection policy associated with a DocumentClient to connect to the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ConnectionPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> class to connect to the Azure DocumentDB database service.
            </summary> 
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.MaxConcurrentFanoutRequests">
            <summary>
            Gets or sets the maximum number of concurrent fanout requests sent to the Azure DocumentDB database service.
            </summary>
            <value>Default value is 32.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.RequestTimeout">
            <summary>
            Gets or sets the request timeout in seconds when connecting to the Azure DocumentDB database service.
            The number specifies the time to wait for response to come back from network peer.
            </summary>
            <value>Default value is 60 seconds.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.MediaRequestTimeout">
            <summary>
            Gets or sets the media request timeout in seconds when connecting to the Azure DocumentDB database service.  
            The number specifies the time to wait for response to come back from network peer for attachment content (a.k.a. media) operations.
            </summary>
            <value>
            Default value is 300 seconds.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.ConnectionMode">
            <summary>
            Gets or sets the connection mode used by the client when connecting to the Azure DocumentDB database service.
            </summary>
            <value>
            Default value is <see cref="F:Microsoft.Azure.Documents.Client.ConnectionMode.Gateway"/>
            </value>
            <remarks>
            For more information, see <see href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-performance-tips#direct-connection">Connection policy: Use direct connection mode</see>.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.MediaReadMode">
            <summary>
            Gets or sets the attachment content (a.k.a. media) download mode when connecting to the Azure DocumentDB database service.
            </summary>
            <value>
            Default value is <see cref="F:Microsoft.Azure.Documents.Client.MediaReadMode.Buffered"/>.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.ConnectionProtocol">
            <summary>
            Gets or sets the connection protocol when connecting to the Azure DocumentDB database service.
            </summary>
            <value>
            Default value is <see cref="F:Microsoft.Azure.Documents.Client.Protocol.Https"/>.
            </value>
            <remarks>
            This setting is not used when <see cref="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.ConnectionMode"/> is set to <see cref="F:Microsoft.Azure.Documents.Client.ConnectionMode.Gateway"/>.
            Gateway mode only supports HTTPS.
            For more information, see <see href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-performance-tips#use-tcp">Connection policy: Use the TCP protocol</see>.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.Default">
            <summary>
            Gets the default connection policy used to connect to the Azure DocumentDB database service.
            </summary>
            <value>
            Refer to the default values for the individual properties of <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> that determine the default connection policy. 
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.UserAgentSuffix">
            <summary>
            A suffix to be added to the default user-agent for the Azure DocumentDB database service.
            </summary>
            <remarks>
            Setting this property after sending any request won't have any effect.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.PreferredLocations">
            <summary>
            Gets and sets the preferred locations (regions) for geo-replicated database accounts in the Azure DocumentDB database service. 
            For example, "East US" as the preferred location.
            </summary>
            <remarks>
            <para>
            When <see cref="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.EnableEndpointDiscovery"/> is true and the value of this property is non-empty, 
            the SDK uses the locations in the collection in the order they are specified to perform operations,
            otherwise if the value of this property is not specified, 
            the SDK uses the write region as the preferred location for all operations.
            </para>
            <para>
            If <see cref="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.EnableEndpointDiscovery"/> is set to false, the value of this property is ignored. 
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.EnableEndpointDiscovery">
            <summary>
            Gets or sets the flag to enable endpoint discovery for geo-replicated database accounts in the Azure DocumentDB database service.
            </summary>
            <remarks>
            When the value of this property is true, the SDK will automatically discover the
            current write and read regions to ensure requests are sent to the correct region
            based on the regions specified in the <see cref="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.PreferredLocations"/> property.
            <value>Default value is true indicating endpoint discovery is enabled.</value>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.MaxConnectionLimit">
            <summary>
            Gets or sets the maximum number of concurrent connections allowed for the target
            service endpoint in the Azure DocumentDB database service.
            </summary>
            <remarks>
            This setting is only applicable in Gateway mode.
            </remarks>
            <value>Default value is 50.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.RetryOptions">
             <summary>
             Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.RetryOptions"/> associated
             with the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> in the Azure DocumentDB database service.
             </summary>
             <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>
             <seealso cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/>
             <seealso cref="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.RetryOptions"/>
             <example>
             The example below creates a new <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> and sets the <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> 
             using the <see cref="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.RetryOptions"/> property. 
             <para>
             <see cref="P:Microsoft.Azure.Documents.Client.RetryOptions.MaxRetryAttemptsOnThrottledRequests"/> is set to 3, so in this case, if a request operation is rate limited by exceeding the reserved 
             throughput for the collection, the request operation retries 3 times before throwing the exception to the application.
             <see cref="P:Microsoft.Azure.Documents.Client.RetryOptions.MaxRetryWaitTimeInSeconds"/> is set to 60, so in this case if the cumulative retry 
             wait time in seconds since the first request exceeds 60 seconds, the exception is thrown.
             </para>
             <code language="c#">
             <![CDATA[
             ConnectionPolicy connectionPolicy = new ConnectionPolicy();
             connectionPolicy.RetryOptions.MaxRetryAttemptsOnThrottledRequests = 3;
             connectionPolicy.RetryOptions.MaxRetryWaitTimeInSeconds = 60;
            
             DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key", connectionPolicy);
             ]]>
             </code>
             </example>
             <value>
             If this property is not set, the SDK uses the default retry policy that has <see cref="P:Microsoft.Azure.Documents.Client.RetryOptions.MaxRetryAttemptsOnThrottledRequests"/>
             set to 9 and <see cref="P:Microsoft.Azure.Documents.Client.RetryOptions.MaxRetryWaitTimeInSeconds"/> set to 30 seconds.
             </value>
             <remarks>
             For more information, see <see href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-performance-tips#429">Handle rate limiting/request rate too large</see>.
             </remarks>
        </member>
        <member name="E:Microsoft.Azure.Documents.Client.ConnectionPolicy.PreferenceChanged">
            <summary>
            GlobalEndpointManager will subscribe to this event if user updates the preferredLocations list in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.DocumentClient">
            <summary>
            Provides a client-side logical representation for the Azure DocumentDB database service. 
            This client is used to configure and execute requests against the service.
            </summary>
            <threadSafety>
            This type is thread safe.
            </threadSafety>
            <remarks>
            The service client that encapsulates the endpoint and credentials and connection policy used to access the DocumentDB service.
            It is recommended to cache and reuse this instance within your application rather than creating a new instance for every operation.  
            
            <para>
            When your app uses DocumentClient, you should call its IDisposable.Dispose implementation when you are finished using it.  
            Depending on your programming technique, you can do this in one of two ways: 
            </para>
            
            <para>
            1. By using a language construct such as the using statement in C#. 
            The using statement is actually a syntactic convenience. 
            At compile time, the language compiler implements the intermediate language (IL) for a try/catch block.
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("endpoint"), "authKey"))
            {
                ...
            }
            ]]>
            </code>
            </para>
            
            <para>
            2. By wrapping the call to the IDisposable.Dispose implementation in a try/catch block. 
            The following example replaces the using block in the previous example with a try/catch/finally block.
            <code language="c#">
            <![CDATA[
            DocumentClient client = new DocumentClient(new Uri("endpoint"), "authKey"))
            try{
                ...               
            }
            finally{
                if (client != null) client.Dispose();
            }
            ]]>
            </code>
            </para>
            
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Security.SecureString,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class using the 
            specified DocumentDB service endpoint, key, and connection policy for the Azure DocumentDB database service.
            </summary>
            <param name="serviceEndpoint">
            The service endpoint to use to create the client.
            </param>
            <param name="authKey">
            The list of Permission objects to use to create the client.
            </param>
            <param name="connectionPolicy">
            (Optional) The connection policy for the client. If none is passed, the default is used <see cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            </param>
            <param name="desiredConsistencyLevel">
            (Optional) This can be used to weaken the database account consistency level for read operations. 
            If this is not set the database account consistency level will be used for all requests.
            </param>
            <remarks>
            The service endpoint and the authorization key can be obtained from the Azure Management Portal. 
            The authKey used here is encrypted for privacy when being used, and deleted from computer memory when no longer needed
            <para>
            Using Direct connectivity, wherever possible, is recommended
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:System.Security.SecureString"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Security.SecureString,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class using the 
            specified DocumentDB service endpoint, key, connection policy and a custom JsonSerializerSettings
            for the Azure DocumentDB database service.
            </summary>
            <param name="serviceEndpoint">
            The service endpoint to use to create the client.
            </param>
            <param name="authKey">
            The list of Permission objects to use to create the client.
            </param>
            <param name="connectionPolicy">
            The connection policy for the client.
            </param>
            <param name="desiredConsistencyLevel">
            This can be used to weaken the database account consistency level for read operations. 
            If this is not set the database account consistency level will be used for all requests.
            </param>
            <param name="serializerSettings">
            The custom JsonSerializer settings to be used for serialization/derialization.
            </param>
            <remarks>
            The service endpoint and the authorization key can be obtained from the Azure Management Portal. 
            The authKey used here is encrypted for privacy when being used, and deleted from computer memory when no longer needed
            <para>
            Using Direct connectivity, wherever possible, is recommended
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:System.Security.SecureString"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
            <seealso cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Security.SecureString,Newtonsoft.Json.JsonSerializerSettings,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class using the 
            specified DocumentDB service endpoint, key, connection policy and a custom JsonSerializerSettings
            for the Azure DocumentDB database service.
            </summary>
            <param name="serviceEndpoint">
            The service endpoint to use to create the client.
            </param>
            <param name="authKey">
            The list of Permission objects to use to create the client.
            </param>
            <param name="serializerSettings">
            The custom JsonSerializer settings to be used for serialization/derialization.
            </param>
            <param name="connectionPolicy">
            (Optional) The connection policy for the client. If none is passed, the default is used <see cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            </param>
            <param name="desiredConsistencyLevel">
            (Optional) This can be used to weaken the database account consistency level for read operations. 
            If this is not set the database account consistency level will be used for all requests.
            </param>
            <remarks>
            The service endpoint and the authorization key can be obtained from the Azure Management Portal. 
            The authKey used here is encrypted for privacy when being used, and deleted from computer memory when no longer needed
            <para>
            Using Direct connectivity, wherever possible, is recommended
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:System.Security.SecureString"/>
            <seealso cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.String,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class using the 
            specified service endpoint, an authorization key (or resource token) and a connection policy
            for the Azure DocumentDB database service.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="authKeyOrResourceToken">The authorization key or resource token to use to create the client.</param>
            <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <remarks>
            The service endpoint can be obtained from the Azure Management Portal. 
            If you are connecting using one of the Master Keys, these can be obtained along with the endpoint from the Azure Management Portal
            If however you are connecting as a specific DocumentDB User, the value passed to <paramref name="authKeyOrResourceToken"/> is the ResourceToken obtained from the permission feed for the user.
            <para>
            Using Direct connectivity, wherever possible, is recommended.
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.String,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class using the 
            specified service endpoint, an authorization key (or resource token), a connection policy
            and a custom JsonSerializerSettings for the Azure DocumentDB database service.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="authKeyOrResourceToken">The authorization key or resource token to use to create the client.</param>
            <param name="connectionPolicy">The connection policy for the client.</param>
            <param name="desiredConsistencyLevel">The default consistency policy for client operations.</param>
            <param name="serializerSettings">The custom JsonSerializer settings to be used for serialization/derialization.</param>
            <remarks>
            The service endpoint can be obtained from the Azure Management Portal. 
            If you are connecting using one of the Master Keys, these can be obtained along with the endpoint from the Azure Management Portal
            If however you are connecting as a specific DocumentDB User, the value passed to <paramref name="authKeyOrResourceToken"/> is the ResourceToken obtained from the permission feed for the user.
            <para>
            Using Direct connectivity, wherever possible, is recommended.
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
            <seealso cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.String,Newtonsoft.Json.JsonSerializerSettings,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class using the 
            specified service endpoint, an authorization key (or resource token), a connection policy
            and a custom JsonSerializerSettings for the Azure DocumentDB database service.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="authKeyOrResourceToken">The authorization key or resource token to use to create the client.</param>
            <param name="serializerSettings">The custom JsonSerializer settings to be used for serialization/derialization.</param>
            <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <remarks>
            The service endpoint can be obtained from the Azure Management Portal. 
            If you are connecting using one of the Master Keys, these can be obtained along with the endpoint from the Azure Management Portal
            If however you are connecting as a specific DocumentDB User, the value passed to <paramref name="authKeyOrResourceToken"/> is the ResourceToken obtained from the permission feed for the user.
            <para>
            Using Direct connectivity, wherever possible, is recommended.
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Collections.Generic.IList{Microsoft.Azure.Documents.Permission},Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class using the 
            specified DocumentDB service endpoint for the Azure DocumentDB database service, a list of permission objects and a connection policy.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="permissionFeed">A list of Permission objects to use to create the client.</param>
            <param name="connectionPolicy">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> to use for this connection.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permissionFeed"/> is not supplied.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="permissionFeed"/> is not a valid permission link.</exception>
            <remarks>
            If no <paramref name="connectionPolicy"/> is provided, then the default <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> will be used.
            Using Direct connectivity, wherever possible, is recommended.
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Collections.Generic.IList{Microsoft.Azure.Documents.ResourceToken},Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class using the 
            specified DocumentDB service endpoint, a list of <see cref="T:Microsoft.Azure.Documents.ResourceToken"/> objects and a connection policy.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="resourceTokens">A list of <see cref="T:Microsoft.Azure.Documents.ResourceToken"/> objects to use to create the client.</param>
            <param name="connectionPolicy">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> to use for this connection.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="resourceTokens"/> is not supplied.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="resourceTokens"/> is not a valid permission link.</exception>
            <remarks>
            If no <paramref name="connectionPolicy"/> is provided, then the default <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> will be used.
            Using Direct connectivity, wherever possible, is recommended.
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the Microsoft.Azure.Documents.Client.DocumentClient class using the 
            specified Azure DocumentDB database service endpoint, a dictionary of resource tokens and a connection policy.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="resourceTokens">A dictionary of resource ids and resource tokens.</param>
            <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <remarks>Using Direct connectivity, wherever possible, is recommended</remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Open the connection to validate that the client initialization is successful in the Azure DocumentDB database service.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> object.
            </returns>
            <remarks>
            This method is recommended to be called, after the constructor, but before calling any other methods on the DocumentClient instance.
            If there are any initialization exceptions, this method will throw them (set on the task). 
            Alternately, calling any API will throw initialization exception at the first call.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                await client.OpenAsync();
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.GetSessionToken(System.String)">
            <summary>
            Gets or sets the session object used for session consistency version tracking for a specific collection in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">Collection for which session token must be retrieved.</param>
            <value>
            The session token used for version tracking when the consistency level is set to Session.
            </value>
            <remarks>
            The session token can be saved and supplied to a request via <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.SessionToken"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.Dispose">
            <summary>
            Disposes the client for the Azure DocumentDB database service.
            </summary>
            <example>
            <code language="c#">
            <![CDATA[
            DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"); 
            if (client != null) client.Dispose();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.Dispose(System.Boolean)">
            <summary>
            Disposes the resources.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.Finalize">
            <summary>
            Class destructor.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates an attachment as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentLink">The link of the parent document for this new attachment. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="attachment">The attachment object.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.
            </returns>
            <remarks>
            
            </remarks>
            <example>
            The example below creates a new document, and then creates a new attachment for that document
            <code language="c#">
            <![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Create an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.CreateAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            //Because Attachment is a Dynamic object you can use SetPropertyValue method to any property you like
            //Even if that property doesn't exist. Here we are creating two new properties on the Attachment we created above.
            a.SetPropertyValue("Foo", "some value");
            a.SetPropertyValue("Bar", "some value");
            
            //Now update the Attachment object in the database to persist the new properties on the object
            client.ReplaceAttachmentAsync(a);
            
            //Let's now create another Attachment except this time we're going to use a Dynamic object instead 
            //of a <see cref="Microsoft.Azure.Documents.Attachment"/> as we did above.
            var b = await client.CreateAttachmentAsync(doc.SelfLink, new { id = "foo", contentType = "text/plain", media="link to your media", a = 5, b = 6 });
            
            //Now you will have a Document in your database with two attachments.
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDatabaseAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a database resource as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="database">The specification for the <see cref="T:Microsoft.Azure.Documents.Database"/> to create.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.Database"/> that was created within a task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="database"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Database are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the database object supplied. It is likely that an id was not supplied for the new Database.</description>
                </item>
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Database"/> with an id matching the id field of <paramref name="database"/> already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database"/> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            </example>
            <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database"/> from within a synchronous method then you need to use the following code
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDatabaseIfNotExistsAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates(if doesn't exist) or gets(if already exists) a database resource as an asychronous operation in the Azure DocumentDB database service.
            You can check the status code from the response to determine whether the database was newly created(201) or existing database was returned(200)
            </summary>
            <param name="database">The specification for the <see cref="T:Microsoft.Azure.Documents.Database"/> to create.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.Database"/> that was created within a task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="database"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property.</exception>
            <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database"/> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            </example>
            <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database"/> from within a synchronous method then you need to use the following code
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)">
            <summary>
            Creates a Document as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentsFeedOrDatabaseLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the document in. E.g. dbs/db_rid/colls/coll_rid/ </param>
            <param name="document">The document object to create.</param>
            <param name="options">(Optional) Any request options you wish to set. E.g. Specifying a Trigger to execute when creating the document. <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/></param>
            <param name="disableAutomaticIdGeneration">(Optional) Disables the automatic id generation, If this is True the system will throw an exception if the id property is missing from the Document.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.Document"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="documentsFeedOrDatabaseLink"/> or <paramref name="document"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the document supplied. It is likely that <paramref name="disableAutomaticIdGeneration"/> was true and an id was not supplied</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - This likely means the collection in to which you were trying to create the document is full.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Document"/> with an id matching the id field of <paramref name="document"/> already existed</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the <see cref="T:Microsoft.Azure.Documents.Document"/> exceeds the current max entity size. Consult documentation for limits and quotas.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource"/>
            <code language="c#">
            <![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]>
            </code>
            </example>
            <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource"/> 
            <code language="c#">
            <![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]>
            </code>
            </example>
            <example>
            Finally, a Document can also be a dynamic object
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]>
            </code>
            </example>
            <example>
            Create a Document and execute a Pre and Post Trigger
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a collection as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseLink">The link of the database to create the collection in. E.g. dbs/db_rid/.</param>
            <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="documentCollection"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a collection are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new collection.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - This means you attempted to exceed your quota for collections. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> with an id matching the id you supplied already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.OfferV2"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionIfNotExistsAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates(if doesn't exist) or gets(if already exists) a collection as an asychronous operation in the Azure DocumentDB database service.
            You can check the status code from the response to determine whether the collection was newly created(201) or existing collection was returned(200).
            </summary>
            <param name="databaseLink">The link of the database to create the collection in. E.g. dbs/db_rid/.</param>
            <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="documentCollection"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a DocumentCollection are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new collection.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - This means you attempted to exceed your quota for collections. Contact support to have this quota increased.</description>
                </item>     
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionIfNotExistsAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.OfferV2"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureAsync(System.String,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a stored procedure as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the collection to create the stored procedure in. E.g. dbs/db_rid/colls/col_rid/</param>
            <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object to create.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="storedProcedure"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> with an id matching the id you supplied already existed.</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> you tried to create was too large.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Create a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.CreateStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerAsync(System.String,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a trigger as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the trigger in. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object to create.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="trigger"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new trigger or that the Body was malformed.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of triggers for the collection supplied. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Trigger"/> with an id matching the id you supplied already existed.</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> you tried to create was too large.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Create a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.CreateTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user defined function as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the user defined function in. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object to create.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="function"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new user defined function or that the Body was malformed.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of user defined functions for the collection supplied. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> with an id matching the id you supplied already existed.</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> you tried to create was too large.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Create a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionAsync(System.String,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a permission on a user object as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userLink">The link of the user to create the permission for. E.g. dbs/db_rid/users/user_rid/ </param>
            <param name="permission">The <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A task object representing the service response for the asynchronous operation which contains the created <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="userLink"/> or <paramref name="permission"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of permission objects. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Permission"/> with an id matching the id you supplied already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Create a read-only permission object for a specific user
            Permission p = await client.CreatePermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserAsync(System.String,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user object as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseLink">The link of the database to create the user in. E.g. dbs/db_rid/ </param>
            <param name="user">The <see cref="T:Microsoft.Azure.Documents.User"/> object to create.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A task object representing the service response for the asynchronous operation which contains the created <see cref="T:Microsoft.Azure.Documents.User"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="user"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of user objects for this database. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.User"/> with an id matching the id you supplied already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Create a new user called joeBloggs in the specified database
            User user = await client.CreateUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.User"/>   
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteAttachmentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <returns></returns>
            <summary>
            Delete an <see cref="T:Microsoft.Azure.Documents.Attachment"/> from the the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="attachmentLink">The link of the <see cref="T:Microsoft.Azure.Documents.Attachment"/> to delete. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/attachments/attachment_rid/ </param>
            <param name="options">(Optional) Any options you wish to set for this request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="attachmentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete an attachment using its selfLink property
            //To get the attachmentLink you would have to query for the Attachment, using CreateAttachmentQuery(),  and then refer to its .SelfLink property
            await client.DeleteAttachmentAsync(attachmentLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>  
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDatabaseAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Database"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="databaseLink">The link of the <see cref="T:Microsoft.Azure.Documents.Database"/> to delete. E.g. dbs/db_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="databaseLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a database using its selfLink property
            //To get the databaseLink you would have to query for the Database, using CreateDatabaseQuery(),  and then refer to its .SelfLink property
            await client.DeleteDatabaseAsync(databaseLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>  
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> 
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Document"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="documentLink">The link of the <see cref="T:Microsoft.Azure.Documents.Document"/> to delete. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a document using its selfLink property
            //To get the documentLink you would have to query for the Document, using CreateDocumentQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentAsync(documentLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>  
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="documentCollectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.Document"/> to delete. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a collection using its selfLink property
            //To get the collectionLink you would have to query for the Collection, using CreateDocumentCollectionQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentCollectionAsync(collectionLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteStoredProcedureAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="storedProcedureLink">The link of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> to delete. E.g. dbs/db_rid/colls/col_rid/sprocs/sproc_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a stored procedure using its selfLink property.
            //To get the sprocLink you would have to query for the Stored Procedure, using CreateStoredProcedureQuery(),  and then refer to its .SelfLink property
            await client.DeleteStoredProcedureAsync(sprocLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteTriggerAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Trigger"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="triggerLink">The link of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> to delete. E.g. dbs/db_rid/colls/col_rid/triggers/trigger_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggerLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a trigger using its selfLink property.
            //To get the triggerLink you would have to query for the Trigger, using CreateTriggerQuery(),  and then refer to its .SelfLink property
            await client.DeleteTriggerAsync(triggerLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="functionLink">The link of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> to delete. E.g. dbs/db_rid/colls/col_rid/udfs/udf_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="functionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a user defined function using its selfLink property.
            //To get the functionLink you would have to query for the User Defined Function, using CreateUserDefinedFunctionQuery(),  and then refer to its .SelfLink property
            await client.DeleteUserDefinedFunctionAsync(functionLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeletePermissionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Permission"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="permissionLink">The link of the <see cref="T:Microsoft.Azure.Documents.Permission"/> to delete. E.g. dbs/db_rid/users/user_rid/permissions/permission_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permissionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a permission using its selfLink property.
            //To get the permissionLink you would have to query for the Permission object, using CreateStoredProcedureQuery(), and then refer to its .SelfLink property
            await client.DeletePermissionAsync(permissionLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteUserAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.User"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="userLink">The link of the <see cref="T:Microsoft.Azure.Documents.User"/> to delete. E.g. dbs/db_rid/users/user_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="userLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a user using its selfLink property.
            //To get the userLink you would have to query for the User object, using CreateUserQuery(), and then refer to its .SelfLink property
            await client.DeleteUserAsync(userLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteConflictAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Conflict"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="conflictLink">The link of the <see cref="T:Microsoft.Azure.Documents.Conflict"/> to delete. E.g. dbs/db_rid/colls/coll_rid/conflicts/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a conflict using its selfLink property.
            //To get the conflictLink you would have to query for the Conflict object, using CreateConflictQuery(), and then refer to its .SelfLink property
            await client.DeleteConflictAsync(conflictLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceAttachmentAsync(Microsoft.Azure.Documents.Attachment,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Attachment"/> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="attachment">The updated <see cref="T:Microsoft.Azure.Documents.Attachment"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Attachment"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="attachment"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the item to be updated
            Attachment attachment = client.CreateAttachmentQuery(attachmentLink)
                                        .Where(r => r.Id == "attachment id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            attachment.MediaLink = "updated value";
            
            //Now persist these changes to the database by replacing the original resource
            Attachment updated = await client.ReplaceAttachmentAsync(attachment);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentCollectionAsync(Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document collection in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="documentCollection">the updated document collection.</param>
            <param name="options">the request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Document"/> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="documentLink">The link of the document to be updated. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="document">The updated <see cref="T:Microsoft.Azure.Documents.Document"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="documentLink"/> or <paramref name="document"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            In this example, instead of using a strongly typed <see cref="T:Microsoft.Azure.Documents.Document"/>, we will work with our own POCO object and not rely on the dynamic nature of the Document class.
            <code language="c#">
            <![CDATA[
            public class MyPoco
            {
                public string Id {get; set;}
                public string MyProperty {get; set;}
            }
            
            //Get the doc back as a Document so you have access to doc.SelfLink
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                   .Where(r => r.Id == "doc id")    
                                   .AsEnumerable()
                                   .SingleOrDefault();
                   
            //Now dynamically cast doc back to your MyPoco
            MyPoco poco = (dynamic)doc;
            
            //Update some properties of the poco object
            poco.MyProperty = "updated value";
                   
            //Now persist these changes to the database using doc.SelLink and the update poco object
            Document updated = await client.ReplaceDocumentAsync(doc.SelfLink, poco);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(Microsoft.Azure.Documents.Document,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Document"/> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="document">The updated <see cref="T:Microsoft.Azure.Documents.Document"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="document"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            This example uses <see cref="T:Microsoft.Azure.Documents.Document"/> and takes advantage of the fact that it is a dynamic object and uses SetProperty to dynamically update properties on the document
            <code language="c#">
            <![CDATA[
            //Fetch the Document to be updated
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                        .Where(r => r.Id == "doc id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            doc.SetPropertyValue("MyProperty", "updated value");
            
            //Now persist these changes to the database by replacing the original resource
            Document updated = await client.ReplaceDocumentAsync(doc);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceStoredProcedureAsync(Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="storedProcedure">The updated <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedure"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the resource to be updated
            StoredProcedure sproc = client.CreateStoredProcedureQuery(sprocsLink)
                                             .Where(r => r.Id == "sproc id")    
                                             .AsEnumerable()
                                             .SingleOrDefault();
                          
            //Update some properties on the found resource
            sproc.Body = "function () {new javascript body for sproc}";
                    
            //Now persist these changes to the database by replacing the original resource
            StoredProcedure updated = await client.ReplaceStoredProcedureAsync(sproc);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceTriggerAsync(Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Trigger"/> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="trigger">The updated <see cref="T:Microsoft.Azure.Documents.Trigger"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="trigger"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the resource to be updated
            Trigger trigger = client.CreateTriggerQuery(sprocsLink)
                                          .Where(r => r.Id == "trigger id")    
                                          .AsEnumerable()
                                          .SingleOrDefault();
                          
            //Update some properties on the found resource
            trigger.Body = "function () {new javascript body for trigger}";
                    
            //Now persist these changes to the database by replacing the original resource
            Trigger updated = await client.ReplaceTriggerAsync(sproc);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceUserDefinedFunctionAsync(Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="function">The updated <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="function"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the resource to be updated
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(functionsLink)
                                                .Where(r => r.Id == "udf id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Update some properties on the found resource
            udf.Body = "function () {new javascript body for udf}";
                    
            //Now persist these changes to the database by replacing the original resource
            UserDefinedFunction updated = await client.ReplaceUserDefinedFunctionAsync(udf);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplacePermissionAsync(Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Permission"/> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="permission">The updated <see cref="T:Microsoft.Azure.Documents.Permission"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permission"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the resource to be updated
            Permission permission = client.CreatePermissionQuery(permissionsLink)
                                                .Where(r => r.Id == "permission id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Change the permission mode to All
            permission.PermissionMode = PermissionMode.All;
                    
            //Now persist these changes to the database by replacing the original resource
            Permission updated = await client.ReplacePermissionAsync(permission);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceUserAsync(Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.User"/> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="user">The updated <see cref="T:Microsoft.Azure.Documents.User"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.User"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="user"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the resource to be updated
            User user = client.CreateUserQuery(usersLink)
                                     .Where(r => r.Id == "user id")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            user.Id = "some new method";
                    
            //Now persist these changes to the database by replacing the original resource
            User updated = await client.ReplaceUserAsync(user);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.User"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceOfferAsync(Microsoft.Azure.Documents.Offer)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Offer"/> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="offer">The updated <see cref="T:Microsoft.Azure.Documents.Offer"/> to replace the existing resource with.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="offer"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the resource to be updated
            Offer offer = client.CreateOfferQuery()
                                     .Where(r => r.ResourceLink == "collection selfLink")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            offer.OfferType = "S3";
                    
            //Now persist these changes to the database by replacing the original resource
            Offer updated = await client.ReplaceOfferAsync(offer);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Attachment"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="attachmentLink">The link to the attachment to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Attachment"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="attachmentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads an Attachment resource where 
            // - sample_db is the ID property of the Database
            // - sample_coll is the ID property of the DocumentCollection
            // - sample_doc is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = "/dbs/sample_db/colls/sample_coll/docs/sample_doc/attachments/attachment_id/";
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Database if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="attachmentLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/docs/{doc identifier}/attachments/{attachment identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDatabaseAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Database"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="databaseLink">The link of the Database resource to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="databaseLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Database resource where 
            // - database_id is the ID property of the Database resource you wish to read. 
            var dbLink = "/dbs/database_id";
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Database if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="databaseLink"/> is always "/dbs/{db identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="documentLink">The link for the document to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Document doc = await client.ReadDocumentAsync(docLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Document if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentLink"/> is always "dbs/{db identifier}/colls/{coll identifier}/docs/{doc identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentAsync``1(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as a generic type T from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="documentLink">The link for the document to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Customer customer = await client.ReadDocumentAsync<Customer>(docLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Document if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentLink"/> is always "dbs/{db identifier}/colls/{coll identifier}/docs/{doc identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="documentCollectionLink">The link for the DocumentCollection to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a DocumentCollection record from a database where 
            // - sample_database is the ID of the database
            // - collection_id is the ID of the collection resource to be read
            var collLink = "/dbs/sample_database/colls/collection_id";
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the DocumentCollection if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentCollectionLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadStoredProcedureAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="storedProcedureLink">The link of the stored procedure to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a StoredProcedure from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - sproc_id is the ID of the stored procedure to be read
            var sprocLink = "/dbs/sample_database/colls/sample_collection/sprocs/sproc_id";
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Stored Procedure if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="storedProcedureLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/sprocs/{sproc identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadTriggerAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Trigger"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="triggerLink">The link to the Trigger to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggerLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Trigger from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - trigger_id is the ID of the trigger to be read
            var triggerLink = "/dbs/sample_database/colls/sample_collection/triggers/trigger_id";
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Trigger if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="triggerLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/triggers/{trigger identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="functionLink">The link to the User Defined Function to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="functionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a User Defined Function from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - udf_id is the ID of the user-defined function to be read
            var udfLink = "/dbs/sample_database/colls/sample_collection/udfs/udf_id";
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the User Defined Function if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="functionLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/udfs/{udf identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPermissionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Permission"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="permissionLink">The link for the Permission resource to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permissionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Permission resource from a Database and User where 
            // - sample_database is the ID of the database
            // - sample_user is the ID of the user
            // - permission_id is the ID of the permission to be read
            var permissionLink = "/dbs/sample_database/users/sample_user/permissions/permission_id";
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Permission if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="permissionLink"/> is always "/dbs/{db identifier}/users/{user identifier}/permissions/{permission identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.User"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="userLink">The link to the User resource to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.User"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="userLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a User resource from a Database
            // - sample_database is the ID of the database
            // - user_id is the ID of the user to be read
            var userLink = "/dbs/sample_database/users/user_id";
            User user = await client.ReadUserAsync(userLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the User if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="userLink"/> is always "/dbs/{db identifier}/users/{user identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.User"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Conflict"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="conflictLink">The link to the Conflict to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Conflict resource from a Database
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - conflict_id is the ID of the conflict to be read
            var conflictLink = "/dbs/sample_database/colls/sample_collection/conflicts/conflict_id";
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Conflict if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="conflictLink"/> is always "/dbs/{db identifier}/colls/{collectioon identifier}/conflicts/{conflict identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadOfferAsync(System.String)">
            <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Offer"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="offerLink">The link to the Offer to be read.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="offerLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads an Offer resource from a Database
            // - offer_id is the ID of the conflict to be read
            var offerLink = "/offers/offer_id";
            Offer offer = await client.ReadOfferAsync(offerLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            For an Offer, id is always generated internally by the system when the linked resource is created. id and _rid are always the same for Offer.
            </para>
            <para>
            The format for <paramref name="offerLink"/> is always "/offers/{offer identifier}" 
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadSchemaAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Schema"/> as an asynchronous operation.
            </summary>
            <param name="documentSchemaLink">The link for the schema to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentSchemaLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when reading a Schema are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a schema record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - schema_id is the ID of the document resource
            var docLink = "/dbs/sample_database/colls/sample_collection/schemas/schemas_id";
            Schema schema = await client.ReadSchemaAsync(docLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Document if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentSchemaLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/schema/{schema identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Schema"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Attachment"/> for a document from the Azure DocumentDB database service 
            as an asynchronous operation.
            </summary>
            <param name="attachmentsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Attachment"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="attachmentsLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read Attachment feed 10 items at a time until there are no more to read
                FeedResponse<Attachment> response = await client.ReadAttachmentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/ ", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDatabaseFeedAsync(Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Database"/> for a database account from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Database> response = await client.ReadDatabaseFeedAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPartitionKeyRangeFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/> for a database account from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="options">(Optional) The request options for the request.</param>
            <param name="partitionKeyRangesOrCollectionLink">The link of the resources to be read, or owner collection link, SelfLink or AltLink. E.g. /dbs/db_rid/colls/coll_rid/pkranges</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(collection.SelfLink, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.FeedResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentCollectionFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> for a database from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="collectionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="collectionsLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<DocumentCollection> response = await client.ReadDocumentCollectionFeedAsync("/dbs/db_rid/colls/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadStoredProcedureFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> for a collection from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="storedProceduresLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/sprocs/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProceduresLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<StoredProcedure> response = await client.ReadStoredProcedureFeedAsync("/dbs/db_rid/colls/col_rid/sprocs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadTriggerFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Trigger"/> for a collection from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="triggersLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/triggers/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggersLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Trigger> response = await client.ReadTriggerFeedAsync("/dbs/db_rid/colls/col_rid/triggers/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserDefinedFunctionFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> for a collection from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="userDefinedFunctionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/udfs/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="userDefinedFunctionsLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<UserDefinedFunction> response = await client.ReadUserDefinedFunctionFeedAsync("/dbs/db_rid/colls/col_rid/udfs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPermissionFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Permission"/> for a user from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="permissionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/users/user_rid/permissions/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permissionsLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Permission> response = await client.ReadPermissionFeedAsync("/dbs/db_rid/users/user_rid/permissions/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of documents for a specified collection from the Azure DocumentDB database service.
            This takes returns a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain an enumerable list of dynamic objects.
            </summary>
            <param name="documentsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/docs/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> containing dynamic objects representing the items in the feed.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentsLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<dynamic> response = await client.ReadDocumentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <remarks>
            Instead of FeedResponse{Document} this method takes advantage of dynamic objects in .NET. This way a single feed result can contain any kind of Document, or POCO object. 
            This is important becuse a DocumentCollection can contain different kinds of documents.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.User"/> for a database from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="usersLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/users/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.User"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="usersLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<User> response = await client.ReadUserFeedAsync("/dbs/db_rid/users/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.User"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Conflict"/> for a collection from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="conflictsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/conflicts/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictsLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Conflict> response = await client.ReadConflictAsync("/dbs/db_rid/colls/coll_rid/conflicts/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadOffersFeedAsync(Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Offer"/> for a database account from the Azure DocumentDB database service 
            as an asynchronous operation. 
            </summary>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Offer> response = await client.ReadOfferAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadSchemaFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Schema"/> for a collection as an asynchronous operation.
            </summary>
            <param name="documentCollectionSchemaLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/schemas </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Schema"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<User> response = await client.ReadUserFeedAsync("/dbs/db_rid/colls/coll_rid/schemas", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Schema"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ExecuteStoredProcedureAsync``1(System.String,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureLink">The link to the stored procedure to execute.</param>
            <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ExecuteStoredProcedureAsync``1(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Object[])">
            <summary>
            Executes a stored procedure against a partitioned collection in the Azure DocumentDB database service as an asynchronous operation, specifiying a target partition.
            </summary>
            <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureLink">The link to the stored procedure to execute.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/", 
                                                                    new RequestOptions { PartitionKey = new PartitionKey(1) },
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertAttachmentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts an attachment as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentLink">The link of the parent document for this new attachment. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="attachment">The attachment object.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.
            </returns>
            <remarks>
            
            </remarks>
            <example>
            The example below creates a new document, and then upserts a new attachment for that document
            <code language="c#">
            <![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Upsert an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.UpsertAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertDatabaseAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a database resource as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="database">The specification for the <see cref="T:Microsoft.Azure.Documents.Database"/> to upsert.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.Database"/> that was upserted within a task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="database"/> is not set</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Database are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the database object supplied. It is likely that an id was not supplied for the new Database.</description>
                </item>
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Database"/> with an id matching the id field of <paramref name="database"/> already existed</description>
                </item>
            </list>
            </exception>
            <example>
            The example below upserts a new <see cref="T:Microsoft.Azure.Documents.Database"/> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an Asynchronous method as it uses the await keyword
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.UpsertDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)">
            <summary>
            Upserts a Document as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentsFeedOrDatabaseLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the document in. E.g. dbs/db_rid/colls/coll_rid/ </param>
            <param name="document">The document object to upsert.</param>
            <param name="options">(Optional) Any request options you wish to set. E.g. Specifying a Trigger to execute when creating the document. <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/></param>
            <param name="disableAutomaticIdGeneration">(Optional) Disables the automatic id generation, If this is True the system will throw an exception if the id property is missing from the Document.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.Document"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="documentsFeedOrDatabaseLink"/> or <paramref name="document"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the document supplied. It is likely that <paramref name="disableAutomaticIdGeneration"/> was true and an id was not supplied</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - This likely means the collection in to which you were trying to upsert the document is full.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Document"/> with an id matching the id field of <paramref name="document"/> already existed</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the <see cref="T:Microsoft.Azure.Documents.Document"/> exceeds the current max entity size. Consult documentation for limits and quotas.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource"/>        
            <code language="c#">
            <![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]>
            </code>
            </example>
            <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource"/> 
            <code language="c#">
            <![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]>
            </code>
            </example>
            <example>
            A Document can also be a dynamic object
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]>
            </code>
            </example>
            <example>
            Upsert a Document and execute a Pre and Post Trigger
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a collection as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseLink">The link of the database to upsert the collection in. E.g. dbs/db_rid/</param>
            <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="documentCollection"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new collection.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - This means you attempted to exceed your quota for collections. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> with an id matching the id you supplied already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Upsert a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.UpsertDocumentCollectionAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertStoredProcedureAsync(System.String,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a stored procedure as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the collection to upsert the stored procedure in. E.g. dbs/db_rid/colls/col_rid/</param>
            <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object to upsert.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="storedProcedure"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> with an id matching the id you supplied already existed.</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> you tried to upsert was too large.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Upsert a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.UpsertStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertTriggerAsync(System.String,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a trigger as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the trigger in. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object to upsert.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="trigger"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new trigger or that the Body was malformed.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of triggers for the collection supplied. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Trigger"/> with an id matching the id you supplied already existed.</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> you tried to upsert was too large.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Upsert a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.UpsertTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a user defined function as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the user defined function in. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object to upsert.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="function"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new user defined function or that the Body was malformed.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of user defined functions for the collection supplied. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> with an id matching the id you supplied already existed.</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> you tried to upsert was too large.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Upsert a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.UpsertUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertPermissionAsync(System.String,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a permission on a user object in the Azure DocumentDB database service as an asychronous operation.
            </summary>
            <param name="userLink">The link of the user to Upsert the permission for. E.g. dbs/db_rid/users/user_rid/ </param>
            <param name="permission">The <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A task object representing the service response for the asynchronous operation which contains the upserted <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="userLink"/> or <paramref name="permission"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of permission objects. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Permission"/> with an id matching the id you supplied already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Upsert a read-only permission object for a specific user
            Permission p = await client.UpsertPermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertUserAsync(System.String,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a permission on a user object in the Azure DocumentDB database service as an asychronous operation.
            </summary>
            <param name="databaseLink">The link of the database to upsert the user in. E.g. dbs/db_rid/ </param>
            <param name="user">The <see cref="T:Microsoft.Azure.Documents.User"/> object to upsert.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A task object representing the service response for the asynchronous operation which contains the upserted <see cref="T:Microsoft.Azure.Documents.User"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="user"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of user objects for this database. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.User"/> with an id matching the id you supplied already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Upsert a new user called joeBloggs in the specified database
            User user = await client.UpsertUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.User"/>   
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentAsync(System.String,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.Azure.Documents.Attachment"/> with the contents of the provided <paramref name="mediaStream"/> as an asynchronous operation
             in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentsLink">The attachments link for the document. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/attachments/ </param>
            <param name="mediaStream">the <see cref="T:System.IO.Stream"/> of the attachment media.</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions"/> for the request.</param>
            <param name="requestOptions">Request options.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="attachmentsLink"/> or <paramref name="mediaStream"/> is not set.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Create the attachment
                Attachment attachment = await client.CreateAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> 
            <seealso cref="T:System.IO.Stream"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertAttachmentAsync(System.String,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts an <see cref="T:Microsoft.Azure.Documents.Attachment"/> with the contents of the provided <paramref name="mediaStream"/> as an asynchronous operation
             in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentsLink">The attachments link for the document. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/attachments/ </param>
            <param name="mediaStream">the <see cref="T:System.IO.Stream"/> of the attachment media.</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions"/> for the request.</param>
            <param name="requestOptions">the <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="attachmentsLink"/> or <paramref name="mediaStream"/> is not set.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Upsert the attachment
                Attachment attachment = await client.UpsertAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> 
            <seealso cref="T:System.IO.Stream"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpdateMediaAsync(System.String,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions)">
            <summary>
            Replaces the specified media's content as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="mediaLink">The link for the media to be updated. /medias/media_rid </param>
            <param name="mediaStream">The <see cref="T:System.IO.Stream"/> of the attachment media.</param>
            <param name="options">The <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions"/> for the request.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="mediaLink"/> or <paramref name="mediaStream"/> is not set.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="mediaLink"/> is not in the form of /medias/{mediaId}.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Update the attachment media
                await client.UpdateMediaAsync("/medias/media_rid", fileStream, 
                                new MediaOptions 
                                { 
                                    ContentType = "application/pdf", 
                                    Slug = "something.pdf" 
                                });
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Client.MediaOptions"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.MediaResponse"/> 
            <seealso cref="T:System.IO.Stream"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadMediaMetadataAsync(System.String)">
            <summary>
            Retrieves the metadata associated with the specified attachment content (aka media) as an asynchronous operation
             from the Azure DocumentDB database service.
            </summary>
            <param name="mediaLink">The link for the media to read metadata for. E.g. /medias/media_rid </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="mediaLink"/> is not set.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="mediaLink"/> is not in the form of /medias/{mediaId}.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.Client.MediaResponse"/> 
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadMediaAsync(System.String)">
            <summary>
            Retrieves the specified attachment content (aka media) from the Azure DocumentDB database service.
            </summary>
            <param name="mediaLink">The link for the media to read. E.g. /medias/media_rid</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="mediaLink"/> is not set.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="mediaLink"/> is not in the form of /medias/{mediaId}.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.Client.MediaResponse"/> 
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.Microsoft#Azure#Documents#IAuthorizationTokenProvider#GetUserAuthorizationToken(System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,Microsoft.Azure.Documents.AuthorizationTokenType)">
            <summary>
            </summary>
            <param name="resourceAddress"></param>
            <param name="resourceType"></param>
            <param name="requestVerb"></param>
            <param name="headers"></param>
            <param name="tokenType">unused, use token based upon what is passed in constructor</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.GetDatabaseAccountAsync">
            <summary>
            Read the <see cref="T:Microsoft.Azure.Documents.DatabaseAccount"/> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Azure.Documents.DatabaseAccount"/> wrapped in a <see cref="T:System.Threading.Tasks.Task"/> object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.Microsoft#Azure#Documents#IDocumentClientInternal#GetDatabaseAccountInternalAsync(System.Uri)">
            <summary>
            Read the <see cref="T:Microsoft.Azure.Documents.DatabaseAccount"/> as an asynchronous operation
            given a specific reginal endpoint url.
            </summary>
            <param name="serviceEndpoint">The reginal url of the serice endpoint.</param>
            <returns>
            A <see cref="T:Microsoft.Azure.Documents.DatabaseAccount"/> wrapped in a <see cref="T:System.Threading.Tasks.Task"/> object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.GetStoreProxy(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            Certain requests must be routed through gateway even when the client connectivity mode is direct.
            For e.g., DocumentCollection creation. This method returns the <see cref="T:Microsoft.Azure.Documents.IBackendProxy"/> based
            on the input <paramref name="request"/>.
            </summary>
            <param name="request"></param>
            <returns>Returns <see cref="T:Microsoft.Azure.Documents.IBackendProxy"/> to which the request must be sent</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.GetLinkForRouting(Microsoft.Azure.Documents.Resource)">
            <summary>
            The preferred link used in replace operation in SDK.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates an attachment as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">the URI of the document to create an attachment for.</param>
            <param name="attachment">the attachment object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentAsync(System.Uri,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates an attachment as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">the URI of the document to create an attachment for.</param>
            <param name="mediaStream">the stream of the attachment media.</param>
            <param name="options">the media options for the request.</param>
            <param name="requestOptions">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)">
            <summary>
            Creates a document as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to create the document in.</param>
            <param name="document">the document object.</param>
            <param name="options">The request options for the request.</param>
            <param name="disableAutomaticIdGeneration">Disables the automatic id generation, will throw an exception if id is missing.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a collection as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">the URI of the database to create the collection in.</param>
            <param name="documentCollection">the Microsoft.Azure.Documents.DocumentCollection object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionIfNotExistsAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates(if doesn't exist) or gets(if already exists) a collection as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">the URI of the database to create the collection in.</param>
            <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a stored procedure as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to create the stored procedure in.</param>
            <param name="storedProcedure">the Microsoft.Azure.Documents.StoredProcedure object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a trigger as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to create the trigger in.</param>
            <param name="trigger">the Microsoft.Azure.Documents.Trigger object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user defined function as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to create the user defined function in.</param>
            <param name="function">the Microsoft.Azure.Documents.UserDefinedFunction object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionAsync(System.Uri,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a permission as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userUri">the URI of the user to create the permission for.</param>
            <param name="permission">the Microsoft.Azure.Documents.Permission object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserAsync(System.Uri,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">the URI of the database to create the user in.</param>
            <param name="user">the Microsoft.Azure.Documents.User object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertAttachmentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts an attachment as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">the URI of the document to upsert an attachment for.</param>
            <param name="attachment">the attachment object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertAttachmentAsync(System.Uri,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts an attachment as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">the URI of the document to upsert an attachment for.</param>
            <param name="mediaStream">the stream of the attachment media.</param>
            <param name="options">the media options for the request.</param>
            <param name="requestOptions">Request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)">
            <summary>
            Upserts a document as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to upsert the document in.</param>
            <param name="document">the document object.</param>
            <param name="options">The request options for the request.</param>
            <param name="disableAutomaticIdGeneration">Disables the automatic id generation, will throw an exception if id is missing.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a stored procedure as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to upsert the stored procedure in.</param>
            <param name="storedProcedure">the Microsoft.Azure.Documents.StoredProcedure object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a trigger as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to upsert the trigger in.</param>
            <param name="trigger">the Microsoft.Azure.Documents.Trigger object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a user defined function as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to upsert the user defined function in.</param>
            <param name="function">the Microsoft.Azure.Documents.UserDefinedFunction object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertPermissionAsync(System.Uri,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a permission as an asychronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userUri">the URI of the user to upsert the permission for.</param>
            <param name="permission">the Microsoft.Azure.Documents.Permission object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertUserAsync(System.Uri,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a user as an asychronous operation  in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">the URI of the database to upsert the user in.</param>
            <param name="user">the Microsoft.Azure.Documents.User object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteAttachmentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete an attachment as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="attachmentUri">the URI of the attachment to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDatabaseAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a database as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">the URI of the database to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDocumentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a document as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">the URI of the document to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a stored procedure as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="storedProcedureUri">the URI of the stored procedure to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteTriggerAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a trigger as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="triggerUri">the URI of the trigger to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a user defined function as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="functionUri">the URI of the user defined function to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeletePermissionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a permission as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="permissionUri">the URI of the permission to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteUserAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a user as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="userUri">the URI of the user to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteConflictAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a conflict as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="conflictUri">the URI of the conflict to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceAttachmentAsync(System.Uri,Microsoft.Azure.Documents.Attachment,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces an attachment as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentUri">the URI of the attachment to be updated.</param>
            <param name="attachment">the attachment resource.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">the URI of the document to be updated.</param>
            <param name="document">the updated document.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">the URI of the document collection to be updated.</param>
            <param name="documentCollection">the updated document collection.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replace the specified stored procedure in the Azure DocumentDB database service.
            </summary>
            <param name="storedProcedureUri">the URI for the stored procedure to be updated.</param>
            <param name="storedProcedure">the updated stored procedure.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a trigger as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="triggerUri">the URI for the trigger to be updated.</param>
            <param name="trigger">the updated trigger.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a user defined function as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userDefinedFunctionUri">the URI for the user defined function to be updated.</param>
            <param name="function">the updated user defined function.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplacePermissionAsync(System.Uri,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a permission as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="permissionUri">the URI for the permission to be updated.</param>
            <param name="permission">the updated permission.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceUserAsync(System.Uri,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a user as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
            <param name="userUri">the URI for the user to be updated.</param>
            <param name="user">the updated user.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Attachment"/> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="attachmentUri">A URI to the Attachment resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps an <see cref="T:Microsoft.Azure.Documents.Attachment"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="attachmentUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads an Attachment resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = UriFactory.CreateAttachmentUri("db_id", "coll_id", "doc_id", "attachment_id");
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDatabaseAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Database"/> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">A URI to the Database resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="databaseUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Database resource where 
            // - db_id is the ID property of the Database you wish to read. 
            var dbLink = UriFactory.CreateDatabaseUri("db_id");
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="documentUri">A URI to the Document resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when reading a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Document document = await client.ReadDocumentAsync(docUri);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentAsync``1(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as a generic type T from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="documentUri">A URI to the Document resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when reading a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Customer customer = await client.ReadDocumentAsync<Customer>(docUri);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionUri">A URI to the DocumentCollection resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection you wish to read. 
            var collLink = UriFactory.CreateCollectionUri("db_id", "coll_id");
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="storedProcedureUri">A URI to the StoredProcedure resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a StoredProcedure resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - sproc_id is the ID property of the StoredProcedure you wish to read. 
            var sprocLink = UriFactory.CreateStoredProcedureUri("db_id", "coll_id", "sproc_id");
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadTriggerAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Trigger"/> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="triggerUri">A URI to the Trigger resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggerUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Trigger resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - trigger_id is the ID property of the Trigger you wish to read. 
            var triggerLink = UriFactory.CreateTriggerUri("db_id", "coll_id", "trigger_id");
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="functionUri">A URI to the User Defined Function resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="functionUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a UserDefinedFunction resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - udf_id is the ID property of the UserDefinedFunction you wish to read. 
            var udfLink = UriFactory.CreateUserDefinedFunctionUri("db_id", "coll_id", "udf_id");
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPermissionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Permission"/> resource as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="permissionUri">A URI to the Permission resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permissionUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Permission resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User 
            // - permission_id is the ID property of the Permission you wish to read. 
            var permissionLink = UriFactory.CreatePermissionUri("db_id", "coll_id", "user_id");
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.User"/> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="userUri">A URI to the User resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.User"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="userUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a User resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User you wish to read. 
            var userLink = UriFactory.CreateUserUri("db_id", "user_id");
            User user = await client.ReadUserAsync(userLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.User"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Conflict"/> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="conflictUri">A URI to the Conflict resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Conflict resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - conflict_id is the ID property of the Conflict you wish to read. 
            var conflictLink = UriFactory.CreateConflictUri("db_id", "coll_id", "conflict_id");
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadSchemaAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Schema"/> as an asynchronous operation.
            </summary>
            <param name="schemaUri">A URI to the Schema resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Schema"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="schemaUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when reading a Schema are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - schema_id is the ID property of the Document you wish to read. 
            var docLink = UriFactory.CreateDocumentUri("db_id", "coll_id", "schema_id");
            Schema schema = await client.ReadSchemaAsync(schemaLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Schema"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of attachments for a document as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="attachmentsUri">the URI for the attachments.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentCollectionFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of collections for a database as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionsUri">the URI for the document collections.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadStoredProcedureFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of stored procedures for a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="storedProceduresUri">the URI for the stored procedures.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadTriggerFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of triggers for a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="triggersUri">the URI for the triggers.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserDefinedFunctionFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of user defined functions for a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="userDefinedFunctionsUri">the URI for the user defined functions.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPermissionFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of permissions for a user as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="permissionsUri">the URI for the permissions.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of documents for a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="documentsUri">the URI for the documents.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of users for a database as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="usersUri">the URI for the users.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of conflicts for a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <param name="conflictsUri">the URI for the conflicts.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPartitionKeyRangeFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/> for a database account from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
            <param name="partitionKeyRangesOrCollectionUri">The Uri for partition key ranges, or owner collection.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/> containing the read resource record.
            </returns>
            <example>
            <code language="c#">
            <![CDATA[
            Uri partitionKeyRangesUri = UriFactory.CreatePartitionKeyRangesUri(database.Id, collection.Id);
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(partitionKeyRangesUri, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.FeedResponse`1"/>
            <seealso cref="M:Microsoft.Azure.Documents.Client.UriFactory.CreatePartitionKeyRangesUri(System.String,System.String)"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <typeparam name="TValue">the type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureUri">the URI of the stored procedure to be executed.</param>
            <param name="procedureParams">the parameters for the stored procedure execution.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
            <typeparam name="TValue">the type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureUri">the URI of the stored procedure to be executed.</param>
            <param name="options">The request options for the request.</param>
            <param name="procedureParams">the parameters for the stored procedure execution.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadSchemaFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of schemas for a collection as an asynchronous operation.
            </summary>
            <param name="schemasUri">the link for the schemas.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="attachmentsUri">the URI to the attachments.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentsUri">the URI to the attachments.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentsUri">the URI to the attachments.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentsUri">the URI to the attachments.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentsUri">the URI to the attachments.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
            <param name="attachmentsUri">the URI to the attachments.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for document collections in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">the URI to the database.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for document collections in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">the URI to the database.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for document collections in the Azure DocumentDB database service.
            </summary>
            <param name="databaseUri">the URI to the database.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create query for stored procedures in the Azure DocumentDB database service.
            </summary>
            <param name="storedProceduresUri">the URI to the stored procedures.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create query for stored procedures in the Azure DocumentDB database service.
            </summary>
            <param name="storedProceduresUri">the URI to the stored procedures.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create query for stored procedures in the Azure DocumentDB database service.
            </summary>
            <param name="storedProceduresUri">the URI to the stored procedures.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create query for triggers in the Azure DocumentDB database service.
            </summary>
            <param name="triggersUri">the URI to the triggers.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create query for triggers in the Azure DocumentDB database service.
            </summary>
            <param name="triggersUri">the URI to the triggers.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create query for triggers in the Azure DocumentDB database service.
            </summary>
            <param name="triggersUri">the URI to the triggers.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for user-defined functions in the Azure DocumentDB database service.
            </summary>
            <param name="userDefinedFunctionsUri">the URI to the user-defined functions.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for user-defined functions in the Azure DocumentDB database service.
            </summary>
            <param name="userDefinedFunctionsUri">the URI to the user-defined functions.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for user-defined functions in the Azure DocumentDB database service.
            </summary>
            <param name="userDefinedFunctionsUri">the URI to the user-defined functions.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for conflicts in the Azure DocumentDB database service.
            </summary>
            <param name="conflictsUri">the URI to the conflicts.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for conflicts in the Azure DocumentDB database service.
            </summary>
            <param name="conflictsUri">the URI to the conflicts.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for conflicts in the Azure DocumentDB database service.
            </summary>
            <param name="conflictsUri">the URI to the conflicts.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="documentCollectionUri">The URI of the document collection.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>The query result set.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>The query result set.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents for the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>The query result set.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>The query result set.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>The query result set.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>The query result set.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentChangeFeedQuery(System.Uri,Microsoft.Azure.Documents.Client.ChangeFeedOptions)">
            <summary>
            Extension method to create a change feed query for documents in the Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">Specifies the collection to read documents from.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for users in the Azure DocumentDB database service.
            </summary>
            <param name="usersUri">the URI to the users.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for users in the Azure DocumentDB database service.
            </summary>
            <param name="usersUri">the URI to the users.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for users in the Azure DocumentDB database service.
            </summary>
            <param name="usersUri">the URI to the users.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for permissions in the Azure DocumentDB database service.
            </summary>
            <param name="permissionsUri">the URI to the permissions.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for permissions in the Azure DocumentDB database service.
            </summary>
            <param name="permissionsUri">the URI to the permissions.</param>
            <param name="sqlExpression">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for permissions in the Azure DocumentDB database service.
            </summary>
            <param name="permissionsUri">the URI to the permissions.</param>
            <param name="querySpec">The sql query.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>The query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for attachments in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentLink">The link of the parent document.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries against attachments of custom types.
            <code language="c#">
            <![CDATA[
            public class PriorityAttachment : Attachment
            {
                [JsonProperty("priority")]
                public int Priority;
            }
            
            foreach (PriorityAttachment attachment in 
                client.CreateAttachmentQuery<PriorityAttachment>(document.SelfLink).Where(a => a.Priority == 0))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for attachments in the Azure DocumentDB database service by using a SQL statement. 
            </summary>
            <param name="documentLink">The link of the parent document.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{T} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for plain text attachments using a SQL query string.
            <code language="c#">
            <![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.contentType = 'text/plain'"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
             <summary>
              Overloaded. This method creates a query for attachments in the Azure DocumentDB database service by using a SQL statement with parameterized values.
              For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
             </summary>
             <param name="documentLink">The link of the parent document.</param>
             <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
             <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
             <returns>An IQueryable{T} that can evaluate the query with the provided SQL statement.</returns>
             <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#">
             <![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.contentType = @contentType", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@contentType", Value = "text/plain" } }));
            
             foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
             }
             ]]>
             </code>
             </example>
             <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
             <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
             <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for attachments in the Azure DocumentDB database service. It returns an IOrderedQueryable{Attachment}.
            </summary>
            <param name="documentLink">The link to the parent document</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Attachments} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for plain text attachments using LINQ.
            <code language="c#">
            <![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink).Where(a => a.ContentType == "text/plain"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for attachments in the Azure DocumentDB database service by using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="documentLink">The link to the parent document.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery<dynamic>(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.priority = 0"))
            {
                Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
            }
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
             <summary>
              Overloaded. This method creates a query for attachments in the Azure DocumentDB database service by using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
              For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
             </summary>
             <param name="documentLink">The link to the parent document resource.</param>
             <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
             <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
             <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
             <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#">
             <![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.priority = @priority", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@priority", Value = 0 } }));
            
             foreach (dynamic attachment in client.CreateAttachmentQuery<dynamic>(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
             }
             ]]>
             </code>
             </example>
             <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
             <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
             <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDatabaseQuery(Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an account in the Azure DocumentDB database service. It returns An IOrderedQueryable{Database}.
            </summary>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Database} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for databases by id.
            <code language="c#">
            <![CDATA[
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "mydb").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDatabaseQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an Azure DocumentDB database account by using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for databases by id.
            <code language="c#">
            <![CDATA[
            Database database = client.CreateDatabaseQuery("SELECT * FROM dbs d WHERE d.id = 'mydb'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDatabaseQuery(Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an Azure DocumentDB database account by using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for databases by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM dbs d WHERE d.id = @id",
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mydb" }}));
            dynamic database = client.CreateDatabaseQuery<dynamic>(query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for collections under an Azure DocumentDB database database. It returns An IOrderedQueryable{DocumentCollection}.
            </summary>
            <param name="databaseLink">The link to the parent database resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{DocumentCollection} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for collections by id.
            <code language="c#">
            <![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink).Where(c => c.Id == "myColl").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for collections under an Azure DocumentDB database using a SQL statement.   It returns an IQueryable{DocumentCollection}.
            </summary>
            <param name="databaseLink">The link to the parent database resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for collections by id.
            <code language="c#">
            <![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, "SELECT * FROM colls c WHERE c.id = 'mycoll'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for collections under an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="databaseLink">The link to the parent database resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for collections by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM colls c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mycoll" }}));
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for stored procedures under a collection in an Azure DocumentDB database service. It returns An IOrderedQueryable{StoredProcedure}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{StoredProcedure} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for stored procedures by id.
            <code language="c#">
            <![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink).Where(c => c.Id == "helloWorld").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for stored procedures under a collection in an Azure DocumentDB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for stored procedures by id.
            <code language="c#">
            <![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, "SELECT * FROM sprocs s WHERE s.id = 'HelloWorld'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for stored procedures under a collection in an Azure DocumentDB database using a SQL statement using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for stored procedures by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM sprocs s WHERE s.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for triggers under a collection in an Azure DocumentDB database service. It returns An IOrderedQueryable{Trigger}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Trigger} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for triggers by id.
            <code language="c#">
            <![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink).Where(t => t.Id == "validate").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for triggers under a collection in an Azure DocumentDB database service. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for triggers by id.
            <code language="c#">
            <![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink, "SELECT * FROM triggers t WHERE t.id = 'validate'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for triggers under a collection in an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{Trigger} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for triggers by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM triggers t WHERE t.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            Trigger trigger = client.CreateTriggerQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for udfs under a collection in an Azure DocumentDB database service. It returns An IOrderedQueryable{UserDefinedFunction}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{UserDefinedFunction} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink).Where(u => u.Id == "sqrt").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for udfs under a collection in an Azure DocumentDB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, "SELECT * FROM udfs u WHERE u.id = 'sqrt'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for udfs under a collection in an Azure DocumentDB database with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM udfs u WHERE u.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "sqrt" }}));
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for conflicts under a collection in an Azure DocumentDB database service. It returns An IOrderedQueryable{Conflict}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Conflict} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for conflicts by id.
            <code language="c#">
            <![CDATA[
            Conflict conflict = client.CreateConflictQuery(collectionLink).Where(c => c.Id == "summary").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for conflicts under a collection in an Azure DocumentDB database service. It returns an IQueryable{Conflict}.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the the provided SQL statement.</returns>
            <example>
            This example below queries for conflicts by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            Conflict conflict = client.CreateConflictQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for conflicts under a collection in an Azure DocumentDB database with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for conflicts by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            dynamic conflict = client.CreateConflictQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent collection resource.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries for some book documents.
            <code language="c#">
            <![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
             
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Title == "War and Peace").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Author.FirstName == "Leo").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Price > 100))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]>
            </code>
            </example>
            <remarks>
            The DocumentDB LINQ provider compiles LINQ to SQL statements. Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#linq-to-documentdb-sql for the list of expressions supported by the DocumentDB LINQ provider. ToString() on the generated IQueryable returns the translated SQL statement. The DocumentDB provider translates JSON.NET and DataContract serialization attributes for members to their JSON property names.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database service.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="documentsFeedOrDatabaseLink">The path link for the documents under a collection, e.g. dbs/db_rid/colls/coll_rid/docs/. 
            Alternatively, this can be a path link to the database when using an IPartitionResolver, e.g. dbs/db_rid/</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement. It returns an IQueryable{T}.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent collection.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries for some book documents.
            <code language="c#">
            <![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink,
                "SELECT * FROM books b WHERE b.Author.FirstName = 'Leo'").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(
                collectionLink, "SELECT * FROM books b where b.Price > 1000"))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'", 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement. It returns an IQueryable{T}.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The path link for the documents under a collection, e.g. dbs/db_rid/colls/coll_rid/docs/. 
            Alternatively, this can be a path link to the database when using an IPartitionResolver, e.g. dbs/db_rid/</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{T}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries for some book documents.
            <code language="c#">
            <![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query using Title
            Book book, otherBook;
            
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
            book = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Author.FirstName = @firstName", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@firstName", Value = "Leo" }}));
            otherBook = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Price > @minPrice", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@minPrice", Value = 1000 }}));
            foreach (Book b in client.CreateDocumentQuery<Book>(
                collectionLink, query))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, query, 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{T}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="collectionLink">The link to the parent document collection.
            Alternatively, this can be a path link to the database when using an IPartitionResolver.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
             <summary>
             Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database service. It returns IOrderedQueryable{Document}.
             </summary>
             <param name="collectionLink">The link to the parent document collection.</param>
             <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
             <returns>An IOrderedQueryable{Document} that can evaluate the query.</returns>
             <example>
             This example below queries for documents by id.
             <code language="c#">
             <![CDATA[
             Document document = client.CreateDocumentQuery<Document>(collectionLink)
                 .Where(d => d.Id == "War and Peace").AsEnumerable().FirstOrDefault();
            
             ]]>
             </code>
             </example>
             <remarks>
             This overload should be used when the schema of the queried documents is unknown or when querying by ID and replacing/deleting documents.
             Since Document is a DynamicObject, it can be dynamically cast back to the original C# object.
             </remarks>
             <seealso cref="T:Microsoft.Azure.Documents.Document"/>
             <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database service. It returns IOrderedQueryable{Document}.
            </summary>
            <param name="collectionLink">The link to the parent document collection.
            Alternatively, this can be a path link to the database when using an IPartitionResolver.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">Optional partition key that can be used with an IPartitionResolver.</param>
            <returns>An IOrderedQueryable{Document} that can evaluate the query.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
            <example>
            This example below queries for book documents.
            <code language="c#">
            <![CDATA[
            // SQL querying allows dynamic property access
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink,
                "SELECT * FROM books b WHERE b.title == 'War and Peace'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="collectionLink">The link of the parent document collection.
            Alternatively, this can be a path link to the database when using an IPartitionResolver, e.g. dbs/db_rid/</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>an IQueryable{dynamic> that can evaluate the query.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent document collection.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
            <example>
            This example below queries for book documents.
            <code language="c#">
            <![CDATA[
            // SQL querying allows dynamic property access
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="collectionLink">The link to the parent document collection.
            Alternatively, this can be a path link to the database when using an IPartitionResolver, e.g. dbs/db_rid/</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
            <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
            <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentChangeFeedQuery(System.String,Microsoft.Azure.Documents.Client.ChangeFeedOptions)">
            <summary>
            Overloaded. This method creates a change feed query for documents under a collection in an Azure DocumentDB database service.
            </summary>
            <param name="collectionLink">Specifies the collection to read documents from.</param>
            <param name="feedOptions">The options for processing the query results feed.</param>
            <returns>the query result set.</returns>
            <remarks>ChangeFeedOptions.PartitionKeyRangeId must be provided.</remarks>
            <example>
            <code language="c#">
            <![CDATA[
            string partitionKeyRangeId = "0";   // Use client.ReadPartitionKeyRangeFeedAsync() to obtain the ranges.
            string checkpointContinuation = null;
            ChangeFeedOptions options = new ChangeFeedOptions
            {
                PartitionKeyRangeId = partitionKeyRangeId,
                RequestContinuation = checkpointContinuation,
                StartFromBeginning = true,
            };
            using(var query = client.CreateDocumentChangeFeedQuery(collection.SelfLink, options))
            {
                while (true)
                {
                    do
                    {
                        var response = await query.ExecuteNextAsync<Document>();
                        if (response.Count > 0)
                        {
                            var docs = new List<Document>();
                            docs.AddRange(response);
                            // Process the documents.
                            // Checkpoint response.ResponseContinuation.
                        }
                    }
                    while (query.HasMoreResults);
                    Task.Delay(TimeSpan.FromMilliseconds(500)); // Or break here and use checkpointed continuation token later.
                }       
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery`1"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ChangeFeedOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyRange"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for users under an Azure DocumentDB database service. It returns IOrderedQueryable{User}.
            </summary>
            <param name="usersLink">The path link for the users under a database, e.g. dbs/db_rid/users/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{User} that can evaluate the query.</returns>
            <example>
            This example below queries for users by id.
            <code language="c#">
            <![CDATA[
            User user = client.CreateUserQuery(usersLink).Where(u => u.Id == "userid5").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.User"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for users under an Azure DocumentDB database service. It returns IQueryable{dyanamic}.
            </summary>
            <param name="usersLink">The path link for the users under a database, e.g. dbs/db_rid/users/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for users by id.
            <code language="c#">
            <![CDATA[
            User user = client.CreateUserQuery(usersLink, "SELECT * FROM users u WHERE u.id = 'userid5'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.User"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for users under an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="usersLink">The path link for the users under a database, e.g. dbs/db_rid/users/.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
            <example>
            This example below queries for users by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM users u WHERE u.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "userid5" }}));
                
            User user = client.CreateUserQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.User"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for permissions under a user in an Azure DocumentDB database service. It returns IOrderedQueryable{Permission}.
            </summary>
            <param name="permissionsLink">The path link for the persmissions under a user, e.g. dbs/db_rid/users/user_rid/permissions/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Permission} that can evaluate the query.</returns>
            <example>
            This example below queries for permissions by id.
            <code language="c#">
            <![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink).Where(p => p.id == "readonly").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for permissions under a user in an Azure DocumentDB database using a SQL statement. It returns IQueryable{dynamic}.
            </summary>
            <param name="permissionsLink">The path link for the persmissions under a user, e.g. dbs/db_rid/users/user_rid/permissions/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for permissions by id.
            <code language="c#">
            <![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink, 
                "SELECT * FROM perms p WHERE p.id = 'readonly'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for permissions under a user in an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="permissionsLink">The path link for the persmissions under a user, e.g. dbs/db_rid/users/user_rid/permissions/.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for permissions by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM perms p WHERE p.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "readonly" }}));
                
            Permission perm = client.CreatePermissionQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateOfferQuery(Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an Azure DocumentDB database account. It returns IOrderedQueryable{Offer}.
            </summary>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Offer} that can evaluate the query.</returns>
            <example>
            This example below queries for offers
            <code language="c#">
            <![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery().Where(o => o.OfferType == "S3").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery().Where(o => o.Resource == collectionSelfLink).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateOfferQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an Azure DocumentDB database account using a SQL statement. It returns IQueryable{dynamic}.
            </summary>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for offers
            <code language="c#">
            <![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = 'S3'").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery(
                string.Format("SELECT * FROM offers o WHERE o.resource = '{0}'", collectionSelfLink)).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateOfferQuery(Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an Azure DocumentDB database account using a SQL statement with parameterized values. It returns IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for offers
            <code language="c#">
            <![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = @offerType",
            new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@offerType", Value = "S3" }}))
            .AsEnumerable().FirstOrDefault();
            
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.PartitionResolvers">
            <summary>
            Partition resolvers are a dictionary of database links to IPartitionResolver to be used in partitioning for the Azure DocumentDB database service.
            </summary>
            <remarks>
            Support for IPartitionResolver is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.Session">
            <summary>
            Gets or sets the session object used for session consistency version tracking in the Azure DocumentDB database service.
            </summary>
            <remarks>
            <value>
            The session object used for version tracking when the consistency level is set to Session.
            </value>
            The session object can be saved and shared between two DocumentClient instances within the same AppDomain.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.ServiceEndpoint">
            <summary>
            Gets the endpoint Uri for the service endpoint from the Azure DocumentDB database service.
            </summary>
            <value>
            The Uri for the service endpoint.
            </value>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.WriteEndpoint">
            <summary>
            Gets the current write endpoint chosen based on availability and preference from the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.ReadEndpoint">
            <summary>
            Gets the current read endpoint chosen based on availability and preference from the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy">
            <summary>
            Gets the Connection policy used by the client from the Azure DocumentDB database service.
            </summary>
            <value>
            The Connection policy used by the client.
            </value>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.ResourceTokens">
            <summary>
            Gets a dictionary of resource tokens used by the client from the Azure DocumentDB database service.
            </summary>
            <value>
            A dictionary of resource tokens used by the client.
            </value>
            <seealso cref="T:System.Collections.Generic.IDictionary`2"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.AuthKey">
            <summary>
            Gets the AuthKey used by the client from the Azure DocumentDB database service.
            </summary>
            <value>
            The AuthKey used by the client.
            </value>
            <seealso cref="T:System.Security.SecureString"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel">
            <summary>
            Gets the configured consistency level of the client from the Azure DocumentDB database service. 
            </summary>
            <value>
            The configured <see cref="T:Microsoft.Azure.Documents.ConsistencyLevel"/> of the client.
            </value>
            <seealso cref="T:Microsoft.Azure.Documents.ConsistencyLevel"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.RetryPolicy">
            <summary>
            Gets and Sets the retry policy on the client. 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.StoreModel">
            <summary>
            Gets and sets the IStoreModel object.
            </summary>
            <remarks>
            Test hook to enable unit test of DocumentClient.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.GatewayStoreModel">
            <summary>
            Gets and sets the gateway IStoreModel object.
            </summary>
            <remarks>
            Test hook to enable unit test of DocumentClient.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.IPartitionResolver">
            <summary>
            This represents a partition resolver for a database. Given a partition key, return the collection link(s) matching the partition key
            in the Azure DocumentDB database service.
            </summary>
            <remarks>
            <para>
            Support for IPartitionResolver is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </para>
            <para>
            DocumentClient allows you to create and register IPartitionResolvers implementations for each database. Once registered, you can perform 
            document operations directly against a database instead of a collection. IPartitionResolvers has just three methods 
            ExtractPartitionKey, ResolveForCreate and ResolveForRead.
            </para>
            <para>
            LINQ queries and ReadFeed iterators use the ResolveForRead internally to iterate over all the collections that match the partition key for 
            the request. Similarly, create operations use the ResolveForCreate to route creates to the right partition. There are no changes required for Replace,
            Delete and Read since they use the Document, which already contains the reference to the collection that holds the document.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.IPartitionResolver.GetPartitionKey(System.Object)">
            <summary>
            Extracts the partition key from a document in the Azure DocumentDB database service.
            </summary>
            <param name="document">A document object.</param>
            <returns>The partition key for the document.</returns>
            <remarks>
            Typical implementations will get the value of a single property from the document (e.g., user ID) or 
            extract a compound property, for e.g., version ID, device #) or implement custom logic based on the 
            type of the document, for e.g., extract value of id for users but extract userId for userMessages.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.IPartitionResolver.ResolveForCreate(System.Object)">
            <summary>
            Given a partition key, this returns the collection self-link for creating a document
            in the Azure DocumentDB database service.
            </summary>
            <param name="partitionKey">The partition key used to determine the target collection for create operations.</param>
            <returns>A self-link for the collection to create documents in for the specified partition key.</returns>
            <remarks>
            The return value must be a valid collection self-link string in the format dbs/db_rid/colls/col_rid.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.IPartitionResolver.ResolveForRead(System.Object)">
            <summary>
            Given a partition key, this returns a list of collection self-links to read from.
            </summary>
            <param name="partitionKey">The partition key used to determine the target collections for reads, i.e., query or read-feed.</param>
            <returns>The self-links for the collections to perform read requests for the specified partition key.</returns>
            <remarks>
            The return value must be an IEnumerable of collection self-link strings in the format dbs/db_rid/colls/col_rid.
            Unlike ResolveForCreate, this is a 1:N as a single partition key might be created in different collections over 
            time or because you are performing data migration of partition key between collections 
            in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.ChangeFeedQuery`1">
            <summary>
            Provides interface for historical change feed.
            </summary>
            <typeparam name="TResource">Source Resource Type (e.g. Document)</typeparam>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.IDocumentQuery`1">
            <summary>
            Provides methods to support query pagination and asynchronous execution in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">Source Query Type</typeparam>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.IDocumentQuery">
            <summary>
            Provides methods to support query pagination and asynchronous execution in the Azure DocumentDB database service.
            </summary> 
            <remarks>
            Untyped interface with no methods.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.IDocumentQuery`1.ExecuteNextAsync``1(System.Threading.CancellationToken)">
            <summary>
            Executes the query and retrieves the next page of results in the Azure DocumentDB database service.
            </summary>
            <typeparam name="TResult">The type of the object returned in the query result.</typeparam>
            <param name="token">(Optional) The <see cref="T:System.Threading.CancellationToken"/> allows for notification that operations should be cancelled.</param>
            <returns>The Task object for the asynchronous response from query execution.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.IDocumentQuery`1.ExecuteNextAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the query and retrieves the next page of results as dynamic objects in the Azure DocumentDB database service.
            </summary>
            <param name="token">(Optional) The <see cref="T:System.Threading.CancellationToken"/> allows for notification that operations should be cancelled.</param>
            <returns>The Task object for the asynchronous response from query execution.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Linq.IDocumentQuery`1.HasMoreResults">
            <summary>
            Gets a value indicating whether there are potentially additional results that can be 
            returned from the query in the Azure DocumentDB database service.
            </summary>
            <value>Boolean value representing if there are potentially additional results that can be 
            returned from the query.</value>
            <remarks>Initially returns true. This value is set based on whether the last execution returned a continuation token.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ChangeFeedQuery`1.ExecuteNextAsync``1(System.Threading.CancellationToken)">
            <summary>
            Read feed and retrieves the next page of results in the Azure DocumentDB database service.
            </summary>
            <typeparam name="TResult">The type of the object returned in the query result.</typeparam>
            <returns>The Task object for the asynchronous response from query execution.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ChangeFeedQuery`1.ExecuteNextAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the query and retrieves the next page of results as dynamic objects in the Azure DocumentDB database service.
            </summary>
            <param name="token">(Optional) The <see cref="T:System.Threading.CancellationToken"/> allows for notification that operations should be cancelled.</param>
            <returns>The Task object for the asynchronous response from query execution.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Linq.ChangeFeedQuery`1.HasMoreResults">
            <summary>
            Gets a value indicating whether there are potentially additional results that can be retrieved.
            </summary>
            <value>Boolean value representing if whether there are potentially additional results that can be retrieved.</value>
            <remarks>Initially returns true. This value is set based on whether the last execution returned a continuation token.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.MediaReadMode">
            <summary> 
            Represents the mode for use with downloading attachment content (a.k.a. media) in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.MediaReadMode.Buffered">
            <summary>
            Content is buffered at the client and not directly streamed from the content store. Use Buffered to reduce the time taken to read and write media files.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.MediaReadMode.Streamed">
            <summary>
            Content is directly streamed from the content store without any buffering at the client. Use Streamed to reduce the client memory overhead of reading and writing media files.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Query.ParallelDocumentQueryExecutionContextBase`1.FindTargetRangeAndExtractContinuationTokens``1(System.Collections.Generic.List{Microsoft.Azure.Documents.PartitionKeyRange},System.Collections.Generic.IEnumerable{System.Tuple{``0,Microsoft.Azure.Documents.Routing.Range{System.String}}},System.Collections.Generic.Dictionary{System.String,``0}@)">
            <summary>
            If a query encounters split up resuming using continuation, we need to regenerate the continuation tokens. 
            Specifically, since after split we will have new set of ranges, we need to remove continuation token for the 
            parent partition and introduce continuation token for the child partitions. 
            
            This function does that. Also in that process, we also check validity of the input continuation tokens. For example, 
            even after split the boundary ranges of the child partitions should match with the parent partitions. If the Min and Max
            range of a target partition in the continuation token was Min1 and Max1. Then the Min and Max range info for the two 
            corresponding child partitions C1Min, C1Max, C2Min, and C2Max should follow the constrain below:
             PMax = C2Max > C2Min > C1Max > C1Min = PMin. 
            
            Note that, 
            this is assuming the fact that the target partition was split once. But, in reality, the target partition might be split 
            multiple times  
            </summary>
            <Remarks>
            The code assumes that merge doesn't happen
            </Remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Query.ParallelDocumentQueryExecutionContextBase`1.GetCurrentMaximumAllowedConcurrentTasks(System.Int32)">
            <summary>
            This function decides the maximum number of concurrent operations.
             1. (feedOptions.MaximumDegreeOfParallelism == -1 or less) => Automatic
             2. (feedOptions.MaximumDegreeOfParallelism == 0 ) => No parallel execution, serial (current implementation). 
             The code should not come here. DefaultExecutor instead of Parallel executor will be executed. 
             3. (feedOptions.MaximumDegreeOfParallelism > 0 ) => Parallel with a max of specified number of tasks
            </summary>
            <param name="currentRunningTaskCount">
                Current number of running tasks 
            </param>
            <returns>
                Returns the number of tasks to run
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Query.OrderByDocumentQueryExecutionContext.ContinuationToken">
            <summary>
            Returns an serialized array of OrderByContinuationToken, if the query didn't finish producing all results. 
            </summary>
            <example>
            Order by continuation token example.
            <![CDATA[
             [{"compositeToken":{"token":"+RID:OpY0AN-mFAACAAAAAAAABA==#RT:1#TRC:1#RTD:qdTAEA==","range":{"min":"05C1D9CD673398","max":"05C1E399CD6732"}},"orderByItems"[{"item":2}],"rid":"OpY0AN-mFAACAAAAAAAABA==","skipCount":0,"filter":"r.key > 1"}]
            ]]>
            </example>
        </member>
        <member name="T:Microsoft.Azure.Documents.Query.RangeFilterInitializationInfo">
            <summary>
            InitializationInfo is a data structure to capture how the DocumentProducers are initialized
            once we start a cross-partition OrderBy query execution from a continutaion token.
            
            Specifically, the data-structure captures the "filter" condition for all the partitions that
            need to be visited as a part of the query. Please see the description of "filters" in the 
            OrderByContinuationToken class. 
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Query.RangeFilterInitializationInfo.Filter">
            <summary>
            Specifies the filter itself. 
            </summary>
            <example>
            For an order by query "select * from root order by root.key ASC", a filter string could be "root.key > 2",
            cosindering "key" is an integer field. 
            
            The filter simply indicates that the order by query have already delivered all the root.key with "less than equal to 2". 
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Query.RangeFilterInitializationInfo.StartIndex">
            <summary>
            Assuming that, at the begining of the query execution, all the partitions, that needs to be visited, are ordered from 0 to n, 
            startIndex referes to the starting point of the contiguous block of partitions that requires the "filter" to be applied.
            
            Typically, there would three such blocks, one before the target range (Please study the OrderByContinuationToken class 
            to understand what a target range is), one the target range itself, and one after the target range. Each of these block 
            may have different filter conditions. For example, if (1) the target range has filter codition "root.key >= 2", then (2) preceeding
            block will have condition "root.key > 2" and (3) the succeeding block will have filter condition "root.key >= 2". 
            
            However, there could be more than one target ranges, in case of query execution across split, each leading to one more 
            blocks (typically containg one partition).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Query.RangeFilterInitializationInfo.EndIndex">
            <summary>
            Assuming that, at the bigining of the query execution, all the partitions, that needs to be visited, are ordered from 0 to n, 
            EndIndex referes to the end point of the contiguous block of partitions that requires the "filter" to be applied.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Query.OrderByContinuationToken">
            <summary>
            Execuing an OrderBy query for a partitioned collection, say, "select * from root order by root.key ASC", 
            boils down to solving a version of k-way merge sort, where, each of the k paratitions produces a sorted stream of values. 
            
            Now if a query requires multiple ExecuteNextAsync, we return a serialized version of OrderByContinuationToken, to the users
            so that they can resume the query from where they left off at a later point in time. Below we describe the components of
            OrderByContinutaion in deatils. 
            
            A key notion of a OrderByContinutaion is that of the "Target Partition", which is effectively 
            the partition from whose stream the last value was consumed during the execution of the query. 
            We construct our continutaion token composing the information of the target partition and 
            the metadata related to the last value seen from the target partition.  
            
            One key difference in our version of the k-way merge sort from the classical version of the k-way merge sort is that, in 
            our case there is a partial order on the 2-tuple consisting of {partition, value seen from that partition}. 
            For example, (P1, 2) less than (P2, 2) if P1 is less than P2 (i.e., P1.MinRange is less than P2.MinRange). This difference allowed 
            us to shorten the continuation token (i.e., we only need to know the state of the target range), 
            but at the cost of performance penalties in pathological cases (e.g., Partition 0 is heavily throttled 
            but still servering value "2", while partition 1 has a large number of "2"s which can't be served
            to the user).
            
            Considering the above fact, three important points to note here are:
                1. If the latest value seen at the target partition is X, then we have exhaused all value less than X (for ASC order),
                all partitions that have smaller Range.Min than that of the target partition. 
                2. All partitions, that have greater Range.Min than that of the target partition, have exhausted all values less than or equal to X 
                
            Given this background, below is an exmple of order by continutaion token. The class members below explains the diffrent 
            component/states of the continuation token.
            </summary>
            <example>
            Order by continuation token example.
            <![CDATA[
             {"compositeToken":{"token":"+RID:OpY0AN-mFAACAAAAAAAABA==#RT:1#TRC:1#RTD:qdTAEA==","range":{"min":"05C1D9CD673398","max":"05C1E399CD6732"}},"orderByItems"[{"item":2}],"rid":"OpY0AN-mFAACAAAAAAAABA==","skipCount":0,"filter":"r.key > 1"}
            ]]>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Query.OrderByContinuationToken.CompositeToken">
            <summary>
            Target partition states, including backend continuation and partition key range information. 
            </summary>
            <example>
            <![CDATA[
             {"compositeToken":{"token":"+RID:OpY0AN-mFAACAAAAAAAABA==#RT:1#TRC:1#RTD:qdTAEA==","range":{"min":"05C1D9CD673398","max":"05C1E399CD6732"}}
            ]]>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Query.OrderByContinuationToken.OrderByItems">
            <summary>
            Values in the top most OrderByQueryResult from the target partition.
            orderByItems is used for filtering after we resume.
            </summary>
            <example>
            Here, the item 2 means that, it was an ordeBy by integer field, and when the query paused,
            the lastest value seen from the corresponding partition was 2. 
            <![CDATA[
             "orderByItems"[{"item":2}]
            ]]>
            </example>
            <remarks>
            Right now, we don't support orderBy by multiple fileds, so orderByItems is an array of one element. 
            </remarks>>
        </member>
        <member name="P:Microsoft.Azure.Documents.Query.OrderByContinuationToken.Rid">
            <summary>
            Rid in the top most OrderByQueryResult from the target partition.
            Rid is used for filtering after we resume, when orderByItems have the same value.
            
            Note that, Rid is just a marker from the backend's point of view, and the
            doccument with the Rid might not exist upon resuming a query (due to deletion or
            other reasons). The backend will just return the next available result logically 
            succeeding the marker. 
            </summary>
            <example>
            <![CDATA[
             "rid":"OpY0AN-mFAACAAAAAAAABA=="
            ]]>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Query.OrderByContinuationToken.SkipCount">
            <summary>
            Skip count is necessary for JOIN queries to resume. DocumentDB's joins are much diffrent from standard 
            SQL joins. While standard SQL joins happen across two tables, DocumentDB joins happens over a single collection 
            (think single table with each row having dynamic number of columns). While executing a join query, 
            each DocumentDB documnent (i.e, each row), though, can generate multiple result iteams. You can look up the documentation 
            online to understand this better. 
            
            This behavor has implications on how pagination work for documnetDB queries, especially for order by queries across
            multiple partition. 
            
            To understand complexity, let's take an example. Let's say that there is only 1 partition in a collection, and the collection
            has 2 documents. And each document generate 6 results on a hypothetical join query. Now, if someone issues the query with a page size
            of 10, while fetching the second page of the query (as it has already exhausted the results produced by the join on the first document) 
            needs to resume from the second document and skip the first 6 - ((2 * 6) - 10) = 4 results. 
            
            The skip count keeps track of that information. 
            </summary> 
        </member>
        <member name="P:Microsoft.Azure.Documents.Query.OrderByContinuationToken.Filter">
            <summary>
            We use the filter to rewrite the OrderBy query when resuming from a continuation token. 
            </summary>
            <example>
            In this example snippet below the filter string indicates that the query was an OrderBy query 
            and when the query was paused it had already output all the values value greater than 1. 
            And when the query resumes it only needs to fetch value greater than 1. 
            
            Note that, if any value less than 1 that was inserted after the query started won't be delivered as a 
            part of the result. 
            <![CDATA[
             "filter":"r.key > 1"
            ]]>
            </example>
        </member>
        <member name="T:Microsoft.Azure.Documents.Query.ProxyDocumentQueryExecutionContext">
            <summary>
            This class is used as a proxy to wrap the DefaultDocumentQueryExecutionContext which is needed 
            for sending the query to Gateway first and then uses PipelinedDocumentQueryExecutionContext after
            it gets the necessary info. This has been added since we
            haven't produced Linux/Mac version of the ServiceInterop native binary which holds the logic for
            parsing the query without having this extra hop to Gateway
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKeyRangeGoneRetryPolicy.ShouldRetryAsync(System.Exception,System.Threading.CancellationToken)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="exception">Exception that occured when the operation was tried</param>
            <param name="cancellationToken"></param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1">
            <summary>
            The Azure DocumentDB ResourceFeedReader class can be used to iterate through the resources of the specified type under a 
            feed, e.g., collections under a database or documents under a collection. Supports paginated read of results.
            </summary>
            <typeparam name="T">Resource type</typeparam>
            <remarks>
            <para>
            The database entities that DocumentDB manages like databases, collections and documents are referred to as resources, and each set 
            of resources is referred to as a feed. For example, a collection has a feed of documents, as well as a feed of stored procedures.
            <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> objects can be used to perform a "read feed", i.e, enumerate the specified resources under the 
            specified Azure DocumentDB feed link. For more details, refer to <a href="http://azure.microsoft.com/documentation/articles/documentdb-resources/">
            Azure DocumentDB resource model and concepts</a>.
            </para>
            </remarks>
            <example>
            The following example shows how to create a ResourceFeedReader to read all documents in a collection using the default page size.
            <code style="c#">
            <![CDATA[
            var feedReader = client.CreateDocumentFeedReader(collection1.SelfLink);
            var count = 0;
            while (feedReader.HasMoreResults)
            {
                count += feedReader.ExecuteNextAsync().Result.Count;
            }
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to create a ResourceFeedReader for documents against a partitioned database using a Range partition key, and 
            a custom page size.
            <code style="c#">
            <![CDATA[
            feedCount = 0;
            ResourceFeedReader<Document> feedReader = client.CreateDocumentFeedReader(
                databaseLink, 
                new FeedOptions() { MaxItemCount = 1 }, 
                new Range<long>(0, 800));
            
            while (feedReader.HasMoreResults)
            {
                var feed = feedReader.ExecuteNextAsync().Result;
                feedCount += feed.Count;
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Resource"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReader`1.GetEnumerator">
            <summary>
            Retrieves an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate over the resources from the Azure DocumentDB database service.
            </summary>
            <remarks>
            This call results in all pages for the feed being fetched synchronously.
            </remarks>
            <returns>An enumerator for the feed.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReader`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate over the resources from the Azure DocumentDB database service.
            </summary>
            <returns>An enumerator for the feed.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReader`1.ExecuteNextAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves the next page of results from the Azure DocumentDB database service.
            </summary>
            <param name="token">(Optional) The <see cref="T:System.Threading.CancellationToken"/> allows for notification that operations should be cancelled.</param>
            <returns>The response from a single call to ReadFeed for the specified resource.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceFeedReader`1.HasMoreResults">
            <summary>
            Gets a value indicating whether there are additional results to retrieve from the Azure DocumentDB database service.
            </summary>
            <returns>Returns true if there are additional results to retrieve. Returns false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions">
            <summary>
            Client extensions for creating <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> objects in the Azure DocumentDB database service.
            </summary>
            <remarks>
            For additional details and examples, please refer to <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/>.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/>
            <seealso cref="T:Microsoft.Azure.Documents.Resource"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateDatabaseFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for databases in the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateDocumentFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Creates a Feed Reader for Documents in the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="documentsFeedOrDatabaseLink">The link for documents or self-link for database in case a partition resolver is used with the client</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <param name="partitionKey">The key used to determine the target collection</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreatePartitionKeyRangeFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for PartitionKeyRanges in the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="partitionKeyRangesLink">The link for partition key ranges</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateDocumentCollectionFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for DocumentCollections in the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="collectionsLink">The link for collections</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateUserFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Users from the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="usersLink">The link for users</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreatePermissionFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Permissions from the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="permissionsLink"></param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateStoredProcedureFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for StoredProcedures from the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="storedProceduresLink">The link for stored procedures</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateTriggerFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Triggers from the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="triggersLink">The link for triggers</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateUserDefinedFunctionFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for UserDefinedFunctions from the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="userDefinedFunctionsLink">The link for userDefinedFunctions</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateAttachmentFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Attachments from the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="attachmentsLink">The link for attachments</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateConflictFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Conflicts from the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="conflictsLink">The link for conflicts</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateSchemaFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Schemas from the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="schemasLink">The link for schemas</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateOfferFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Offers in the Azure DocumentDB database service.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.ResourceToken">
            <summary>
            Resource token to be used to access resources.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ResourceToken.ResourceLink">
            <summary> 
            Gets or sets the self-link of resource to which the token applies.
            </summary>
            <value>
            The self-link of the resource to which the token applies.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.ResourceToken.ResourcePartitionKey">
            <summary>
            Gets or sets optional partition key value for the token.
            A permission applies to resources when two conditions are met:
                  1. <see cref="P:Microsoft.Azure.Documents.ResourceToken.ResourceLink"/> is prefix of resource's link.
                        For example "/dbs/mydatabase/colls/mycollection" applies to "/dbs/mydatabase/colls/mycollection" and "/dbs/mydatabase/colls/mycollection/docs/mydocument"
                  2. <see cref="P:Microsoft.Azure.Documents.ResourceToken.ResourcePartitionKey"/> is superset of resource's partition key.
                        For example absent/empty partition key is superset of all partition keys.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ResourceToken.Token">
            <summary>
            Gets the access token granting the defined permission.
            </summary>
            <value>
            The access token granting the defined permission.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.RetryOptions">
            <summary>
            RetryOptions class defines the parameters an application can set to customize the
            built-in retry policies in the Azure DocumentDB database service.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class supports retry
            on certain types of exceptions. This class provides options for applications to control the
            retry behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.RetryOptions.#ctor">
            <summary>
            Creates a new instance of the RetryOptions class and intialize all properties
            to default values for the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RetryOptions.MaxRetryAttemptsOnThrottledRequests">
            <summary>
            Gets or sets the maximum number of retries in the case where the request fails
            because the Azure DocumentDB database service has applied rate limiting on the client.
            </summary>
            <value>
            The default value is 9. This means in the case where the request is rate limited,
            the same request will be issued for a maximum of 10 times to the server before 
            an error is returned to the application. If the value of this property is set to 0, 
            there will be no automatic retry on rate limiting requests from the client and the exception
            needs to handled at the application level. 
            For an example on how to set this value, please refer to <see cref="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.RetryOptions"/>.
            </value>
            <remarks>
            <para>
            When a client is sending requests faster than the allowed rate,
            the service will return HttpStatusCode 429 (Too Many Request) to rate limit the client. The current
            implementation in the SDK will then wait for the amount of time the service tells it to wait and
            retry after the time has elapsed.  
            </para>
            <para>
            For more information, see <see href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-performance-tips#429">Handle rate limiting/request rate too large</see>.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RetryOptions.MaxRetryWaitTimeInSeconds">
            <summary>
            Gets or sets the maximum retry time in seconds for the Azure DocumentDB database service.
            </summary>
            <value>
            The default value is 30 seconds. For an example on how to set this value, please refer to <see cref="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.RetryOptions"/>.
            </value>
            <remarks>
            <para>
            When a request fails due to a rate limiting error, the service sends back a response that
            contains a value indicating the client should not retry before the <see cref="P:Microsoft.Azure.Documents.DocumentClientException.RetryAfter"/> time period has
            elapsed. This property allows the application to set a maximum wait time for all retry attempts.
            If the cumulative wait time exceeds the this value, the client will stop retrying and return the error to the application.
            </para>
            <para>
            For more information, see <see href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-performance-tips#429">Handle rate limiting/request rate too large</see>.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.RetryPolicy">
            <summary>
            Represents the retry policy configuration assocated with a DocumentClient instance.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.RetryPolicy.#ctor(Microsoft.Azure.Documents.Routing.GlobalEndpointManager,Microsoft.Azure.Documents.Client.ConnectionPolicy)">
            <summary>
            Initialize the instance of the RetryPolicy class
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.RetryPolicy.GetRequestPolicy">
            <summary>
            Creates a new instance of the ClientRetryPolicy class retrying request failures.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.ClientCollectionCache">
            <summary>
            Caches collection information.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.TaskHelper">
            <summary>
            The helper function relates to the async Task.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ConstantEvaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary> 
            Performs evaluation and replacement of independent sub-trees 
            </summary> 
            <param name="expression">The root of the expression tree.</param>
            <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ConstantEvaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary> 
            Performs evaluation and replacement of independent sub-trees 
            </summary> 
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns> 
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.ConstantFolding">
            <summary>
            Simplifies an Expression tree evaluating everything that can be evaluated 
            at the current time.  Could be more efficient by evaluating a complete constant subtree at once.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQuery`1.ExecuteNextAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the query to retrieve the next page of results.
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQuery`1.ExecuteNextAsync``1(System.Threading.CancellationToken)">
            <summary>
            Executes the query to retrieve the next page of results.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQuery`1.GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual results of the query.
            </summary>
            <remarks>
            This triggers a synchronous multi-page load.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Synchronous Multi-Page load
            </summary>
            <returns></returns>        
        </member>
        <member name="P:Microsoft.Azure.Documents.Linq.DocumentQuery`1.HasMoreResults">
            <summary>
            Gets a value indicating whether there are additional results to retrieve. 
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.DocumentQueryable">
            <summary>
            This class provides extension methods for converting a <see cref="T:System.Linq.IQueryable`1"/> object to a <see cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery`1"/> object.
            </summary>
            <remarks>
             The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class provides implementation of standard query methods for querying resources in DocumentDB. 
             These methods enable you to express traversal, filter, and projection operations over data persisted in the Azure DocumentDB database service.  They are defined as methods that 
             extend IQueryable, and do not perform any querying directly.  Instead, their functionality is to create queries 
             based the resource and query expression provided.  The actual query execution occurs when enumeration forces the expression tree associated with an IQueryable object to be executed.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.IDocumentClient"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AsDocumentQuery``1(System.Linq.IQueryable{``0})">
            <summary>
            Converts an IQueryable to IDocumentQuery which supports pagination and asynchronous execution in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="query">the IQueryable{T} to be converted.</param>
            <returns>An IDocumentQuery{T} that can evaluate the query.</returns>
            <example>
            This example shows how to run a query asynchronously using the AsDocumentQuery() interface.
            
            <code language="c#">
            <![CDATA[
            using (var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum value in a generic <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the maximum of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum value in a generic <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Nullable`1"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Nullable`1"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Single"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Nullable`1"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Nullable`1"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Nullable`1"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Single"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1"/> values.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The average value in the sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence that contains the elements to be counted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of elements in the input sequence.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryEvaluator.HandleEmptyQuery(System.Linq.Expressions.ConstantExpression)">
            <summary>
            This is to handle the case, where user just executes code like this.
            foreach(Database db in client.CreateDatabaseQuery()) {}        
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryEvaluator.HandleAsSqlTransformExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            foreach(string record in client.CreateDocumentQuery().Navigate("Raw JQuery"))
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.DocumentQueryException">
            <summary> 
            Represents an exception from the Azure DocumentDB database service queries.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Linq.DocumentQueryException"/> class in the Azure DocumentDB database service.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Linq.DocumentQueryException"/> class in the Azure DocumentDB database service.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Linq.DocumentQueryException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.ExpressionToSql">
            <summary>
            Core Linq to DocDBSQL translator.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ExpressionToSql.TranslateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Toplevel entry point.
            </summary>
            <param name="inputExpression">An Expression representing a Query on a IDocumentQuery object.</param>
            <returns>The corresponding SQL query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ExpressionToSql.Translate(System.Linq.Expressions.Expression,Microsoft.Azure.Documents.Linq.TranslationContext)">
            <summary>
            Translate an expression into a query.
            Query is constructed as a side-effect in context.currentQuery.
            </summary>
            <param name="inputExpression">Expression to translate.</param>
            <param name="context">Context for translation.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ExpressionToSql.VisitScalarExpression(System.Linq.Expressions.Expression,Microsoft.Azure.Documents.Linq.TranslationContext)">
            <summary>
            Visitor which produces a SqlScalarExpression.
            </summary>
            <param name="inputExpression">Expression to visit.</param>
            <param name="context">Context information.</param>
            <returns>The translation as a ScalarExpression.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ExpressionToSql.VisitCollectionLambda(System.Linq.Expressions.Expression,Microsoft.Azure.Documents.Linq.TranslationContext)">
            <summary>
            Visit a lambda which is supposed to return a collection.
            </summary>
            <param name="inputExpression">LambdaExpression with a result which is a collection.</param>
            <param name="context">Translation context.</param>
            <returns>The collection computed by the lambda.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ExpressionToSql.VisitMethodCall(System.Linq.Expressions.MethodCallExpression,Microsoft.Azure.Documents.Linq.TranslationContext)">
            <summary>
            Visit a method call, construct the corresponding query in context.currentQuery.
            At ExpressionToSql point only LINQ method calls are allowed.
            These methods are static extension methods of IQueryable or IEnumerable.
            </summary>
            <param name="inputExpression">Method to translate.</param>
            <param name="context">Query translation context.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ExpressionToSql.ConvertPropertyRefToPath(Microsoft.Azure.Documents.Sql.SqlPropertyRefScalarExpression)">
            <summary>
            Property references that refer to array-valued properties are converted to collection references.
            </summary>
            <param name="propRef">Property reference object.</param>
            <returns>An inputPathCollection which contains the same property path as the propRef.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.GeometrySqlExpressionFactory">
            <summary>
            Constructs <see cref="T:Microsoft.Azure.Documents.Sql.SqlScalarExpression"/> from a geometry <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.GeometrySqlExpressionFactory.Construct(System.Linq.Expressions.Expression)">
            <summary>
            Constructs <see cref="T:Microsoft.Azure.Documents.Sql.SqlScalarExpression"/> from a geometry <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="geometryExpression">
            Expression of type <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.
            </param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Sql.SqlScalarExpression"/> representing geometry <paramref name="geometryExpression"/>.</returns>.
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.GeometrySqlExpressionFactory.FromJToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Constructs <see cref="T:Microsoft.Azure.Documents.Sql.SqlScalarExpression"/> from a geometry <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="jToken">Json token.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Sql.SqlScalarExpression"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.Nominator">
            <summary> 
            Performs bottom-up analysis to determine which nodes can possibly 
            be part of an evaluated sub-tree. 
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.QueryUnderConstruction">
            <summary>
            Query that is being constructed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.inputQuery">
            <summary>
            Input subquery.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.CreateFrom">
            <summary>
            Create a FROM clause from a set of FROM parameter bindings.
            </summary>
            <returns>The created FROM clause.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.GetSqlQuery">
            <summary>
            Convert the entire query to a SQL Query.
            </summary>
            <returns>The corresponding SQL Query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.Flatten">
            <summary>
            Flatten subqueries into a single query by substituting their expressions in the current query.
            </summary>
            <returns>A flattened query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.AddSelectClause(Microsoft.Azure.Documents.Sql.SqlSelectClause,System.Type,System.Type,System.Collections.Generic.HashSet{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Add a Select clause to a query; may need to create a new subquery.
            </summary>
            <param name="select">Select clause to add.</param>
            <param name="inputElementType">Type of element in the input collection.</param>
            <param name="outputElementType">Type of element in output collection.</param>
            <param name="inScope">Set of parameter names in scope.</param>
            <returns>A new query containing a select clause.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.AddWhereClause(Microsoft.Azure.Documents.Sql.SqlWhereClause,System.Type,System.Collections.Generic.HashSet{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Add a Where clause to a query; may need to create a new query.
            </summary>
            <param name="whereClause">Clause to add.</param>
            <param name="elementType">Type of element in input collection.</param>
            <param name="inScope">Set of parameter names in scope.</param>
            <returns>A new query containing the specified Where clause.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.ToString">
            <summary>
            Debugging string.
            </summary>
            <returns>Query representation as a string (not legal SQL).</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.fromParameters">
            <summary>
            Binding for the FROM parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.SqlTranslator">
            <summary>
            Wrapper class for translating LINQ to DocDB SQL.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.SqlTranslator.TranslateExpression(System.Linq.Expressions.Expression)">
            <summary>
            This function exists for testing only.
            </summary>
            <param name="inputExpression">Expression to translate.</param>
            <returns>A string describing the expression translation.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.SubtreeEvaluator">
            <summary> 
            Evaluates and replaces sub-trees when first candidate is reached (top-down) 
            </summary> 
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.ParameterSubstitution">
            <summary>
            Maintains a map from parameters to expressions.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.FromParameterBindings">
            <summary>
            Bindings for a set of parameters used in a FROM expression.
            Each parameter is bound to a collection.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.FromParameterBindings.ParameterDefinitions">
            <summary>
            The list of parameter definitions.  This will generate a FROM clause of the shape:
            FROM ParameterDefinitions[0] JOIN ParameterDefinitions[1] ... ParameterDefinitions[n]
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.FromParameterBindings.#ctor">
            <summary>
            Create empty parameter bindings.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.FromParameterBindings.SetInputParameter(System.Type,System.String,System.Collections.Generic.HashSet{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Sets the parameter which iterates over the outer collection.
            </summary> 
            <param name="parameterName">Hint for name.</param>
            <param name="parameterType">Parameter type.</param>
            <param name="inScope">List of parameter names currently in scope.</param>
            <returns>The name of the parameter which iterates over the outer collection.  
            If the name is already set it will return the existing name.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.FromParameterBindings.GetInputParameter">
            <summary>
            Get the input parameter.
            </summary>
            <returns>The input parameter.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.FromParameterBindings.Binding">
            <summary>
            Binding for a single parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.FromParameterBindings.Binding.Parameter">
            <summary>
            Parameter defined by FROM clause
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.FromParameterBindings.Binding.ParameterDefinition">
            <summary>
            How parameter is defined (may be null).  
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.FromParameterBindings.Binding.IsInCollection">
            <summary>
            If true this corresponds to the clause `Parameter IN ParameterDefinition'
            else this corresponds to the clause `ParameterDefinition Parameter'
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.TranslationContext">
            <summary>
            Used by the Expression tree visitor.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.TranslationContext.InScope">
            <summary>
            Set of parameters in scope at any point; used to generate fresh parameter names if necessary.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.TranslationContext.substitutions">
            <summary>
            If the FROM clause uses a parameter name, it will be substituted for the parameter used in 
            the lambda expressions for the WHERE and SELECT clauses.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.TranslationContext.methodStack">
            <summary>
            We are currently visiting these methods.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.TranslationContext.lambdaParametersStack">
            <summary>
            Stack of parameters from lambdas currently in scope.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.TranslationContext.collectionStack">
            <summary>
            Stack of collection-valued inputs.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.TranslationContext.currentQuery">
            <summary>
            Query that is being assembled.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.PushParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Called when visiting a lambda with one parameter.
            Binds this parameter with the last collection visited.
            </summary>
            <param name="parameter">New parameter.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.PopParameter">
            <summary>
            Remove a parameter from the stack.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.PushMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Called when visiting a new MethodCall.
            </summary>
            <param name="method">Method that is being visited.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.PopMethod">
            <summary>
            Called when finished visiting a MethodCall.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.PushCollection(Microsoft.Azure.Documents.Linq.Collection)">
            <summary>
            Called when visiting a LINQ Method call with the input collection of the method.
            </summary>
            <param name="collection">Collection that is the input to a LINQ method.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.SetInputParameter(System.Type,System.String)">
            <summary>
            Sets the parameter used to scan the input.
            </summary>
            <param name="name">Suggested name for the input parameter.</param>
            <param name="type">Type of the input parameter.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.SetFromParameter(System.Linq.Expressions.ParameterExpression,Microsoft.Azure.Documents.Sql.SqlCollection)">
            <summary>
            Sets the parameter used by the this.fromClause if it is not already set.
            </summary>
            <param name="parameter">Parameter to set for the FROM clause.</param>
            <param name="collection">Collection to bind parameter to.</param>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.Collection">
            <summary>
            There are two types of collections: outer and inner.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.Collection.#ctor(System.String)">
            <summary>
            Creates an outer collection.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TypeSystem.IsAnonymousType(System.Type)">
            <summary>
            True if type is anonymous.
            </summary>
            <param name="type">Type to check.</param>
            <returns>Trye if the type is anonymous.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.UserDefinedFunctionProvider">
            <summary>
            Helper class to invoke User Defined Functions via Linq queries in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.UserDefinedFunctionProvider.Invoke(System.String,System.Object[])">
            <summary>
            Helper method to invoke User Defined Functions via Linq queries in the Azure DocumentDB database service.
            </summary>
            <param name="udfName">the UserDefinedFunction name</param>
            <param name="arguments">the arguments of the UserDefinedFunction</param>
            <returns></returns>
            <remarks>
            This is a stub helper method for use within LINQ expressions. Cannot be called directly. 
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#linq-to-documentdb-sql for more details about the LINQ provider.
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#javascript-integration for more details about user defined functions.
            </remarks>
            <example> 
            <code language="c#">
            <![CDATA[
             await client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction { Id = "calculateTax", Body = @"function(amt) { return amt * 0.05; }" });
             var queryable = client.CreateDocumentQuery<Book>(collectionLink).Select(b => UserDefinedFunctionProvider.Invoke("calculateTax", b.Price));
             
            // Equivalent to SELECT * FROM books b WHERE udf.toLowerCase(b.title) = 'war and peace'" 
            await client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction { Id = "toLowerCase", Body = @"function(s) { return s.ToLowerCase(); }" });
            queryable = client.CreateDocumentQuery<Book>(collectionLink).Where(b => UserDefinedFunctionProvider.Invoke("toLowerCase", b.Title) == "war and peace");
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.Utilities.SqlQuoteString(System.String)">
            <summary>
            Add quotation signs to a string.
            </summary>
            <param name="toQuote">String to quote.</param>
            <returns>A string properly quoted for embedding into SQL.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.Utilities.GetLambda(System.Linq.Expressions.Expression)">
            <summary>
            Get a lambda expression; may unpeel quotes.
            </summary> 
            <param name="expr">Expression to convert to a lambda.</param>
            <returns>The contained lambda expression, or an exception.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.Utilities.NewParameter(System.String,System.Type,System.Collections.Generic.HashSet{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Generate a new parameter.
            </summary>
            <param name="prefix">Prefix for the parameter name.</param>
            <param name="type">Parameter type.</param>
            <param name="inScope">Names to avoid.</param>
            <returns>The new parameter.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.#ctor(Microsoft.Azure.Documents.Partitioning.IHashGenerator,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>  
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing"/> class.
            </summary>  
            <param name="hashGenerator">A hash generation algorithm specified as an <see cref="T:Microsoft.Azure.Documents.Partitioning.IHashGenerator"/> implementation. </param>
            <param name="nodes">Collection of nodes. The node type (T) must have a stable implementation of <see cref="M:System.Object.GetHashCode"/></param>
            <param name="totalPartitions">Total number of desired partitions; must be greater than the number of nodes</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.ConstructPartitions(Microsoft.Azure.Documents.Partitioning.IHashGenerator,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>  
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing"/> class.
            </summary>  
            <param name="hashGenerator">A hash generation algorithm specified as an <see cref="T:Microsoft.Azure.Documents.Partitioning.IHashGenerator"/> implementation. </param>
            <param name="nodes">The nodes to use for the ring.</param>
            <param name="totalPartitions">Total number of partitions; must be &gt;= number of nodes</param>  
            <returns>Sorted array of Partition objects</returns>  
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.ComputePartition(System.String)">
            <summary>  
            Consistently hash the string key, and return the primary partition  
            </summary>  
            <param name="key">Key</param>  
            <returns>Primary partition index</returns>  
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.GetNode(System.Int32,System.Int32)">
            <summary>  
            Given a partition index, return the node hosting the Nth replica  
            </summary>  
            <param name="partition">Partition index</param>  
            <param name="replica">Desired replica (primary is 0)</param>  
            <returns>Node</returns>  
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.LowerBound(Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.Partition[],System.Byte[])">
            <summary>  
            Return the partition with the lowest hash value that is equal  
            or greater to the hashValue parameter (lower bound)  
            </summary>  
            <param name="partitions">Array of partitions; must be sorted by their hash value</param>  
            <param name="hashValue">Hash value to lookup</param>  
            <returns>Index into the partition array, or partitions.Length if value is greater than last partition</returns>  
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.SkipRelicas(Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.Partition[],System.Int32,System.Int32)">
            <summary>  
            Given a particular partition, skip "around" the circle until we find  
            the Nth partition, only counting unique nodes.  
            </summary>  
            <param name="partitions">Array of partitions</param>  
            <param name="partition">Starting index into the partition array</param>  
            <param name="replica">Nth partition requested (primary == 0)</param>  
            <returns>Index into the partition array</returns>  
        </member>
        <member name="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver">
            <summary>
            HashPartitionResolver implements partitioning based on the value of a hash function, allowing you to evenly 
            distribute requests and data across a number of partitions in the Azure DocumentDB database service. 
            </summary>
            <remarks>
            <para>
            Support for IPartitionResolver based classes is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </para>
            <para>
            The HashPartitionResolver class internally implements a consistent hash ring over the hash function specified in the 
            <see cref="T:Microsoft.Azure.Documents.Partitioning.IHashGenerator"/> interface. By default, the HashPartitionResolver provides an MD5 hash function, but this can be 
            swapped out with a different hashing implementation. The consistent hash ring creates 16 replicas for each collection in order 
            to achieve a more uniform distribution of documents across collections.
            </para>
            <para>
            The hash partitioning is most suitable for partitioning when the partition key has a high cardinality because it will distribute 
            the data evenly across collections. Typically hash partitioning uses the id property. A common use cases for hash partitioning is data 
            produced or consumed from a large number of distinct clients or for storing user profiles, catalog items, and telemetry data.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,Microsoft.Azure.Documents.Partitioning.IHashGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver"/> in the Azure DocumentDB database service using the specified <paramref name="partitionKeyPropertyName"/> value.
            </summary>
            <param name="partitionKeyPropertyName">The name of the property in the document to execute the hashing on.</param>
            <param name="collectionLinks">The list of collection links used for hashing.</param>
            <param name="numberOfVirtualNodesPerCollection">The number of virtual nodes per collection in the conisistent hash ring.</param>
            <param name="hashGenerator">The <see cref="T:Microsoft.Azure.Documents.Partitioning.IHashGenerator"/> to use in consistent hashing. If null, the default MD5 hash generator is used.</param>
            <remarks>
            Use when you want to partition based on a single property name. For other partitioning schemes, use the constructor 
            with partitionKeyExtractor instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.#ctor(System.Func{System.Object,System.String},System.Collections.Generic.IEnumerable{System.String},System.Int32,Microsoft.Azure.Documents.Partitioning.IHashGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver"/> in the Azure DocumentDB database service using the specified <paramref name="partitionKeyExtractor"/> value.
            </summary>
            <param name="partitionKeyExtractor">A function to extract the partitionKey from the document</param>
            <param name="collectionLinks">The list of collection links used for hashing.</param>
            <param name="numberOfVirtualNodesPerCollection">The number of virtual nodes per collection in the conisistent hash ring.</param>
            <param name="hashGenerator">The <see cref="T:Microsoft.Azure.Documents.Partitioning.IHashGenerator"/> to use in consistent hashing. If null, the default MD5 hash generator is used.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.Finalize">
            <summary>
            Class destructor.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.GetPartitionKey(System.Object)">
            <summary>
            Extracts the partition key from the specified document using the specified <see cref="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.PartitionKeyPropertyName"/> 
            property or <see cref="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.PartitionKeyExtractor"/> function in order of preference in the Azure DocumentDB database service.
            </summary>
            <param name="document">A document object</param>
            <returns>object used as the partition key.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if unable to extract the partition key.</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.ResolveForCreate(System.Object)">
            <summary>
            Given a partition key, returns the collection self-link for creating a document in the Azure DocumentDB database service.
            </summary>
            <param name="partitionKey">The partition key used to determine the target collection for creates.</param>
            <returns>The target collection link that will be used for document creation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the specified <paramref name="partitionKey"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.ResolveForRead(System.Object)">
            <summary>
            Given a partition key, returns a list of collection links to read from using its hash in the Azure DocumentDB database service.
            </summary>
            <param name="partitionKey">The partition key used to determine the target collections for reading. Must be a string.</param>
            <returns>The list of target collection links.</returns>
            <remarks>
            If partitionKey is null, then all collections are returned. The HashPartitionResolver supports only strings as partitionKeys.
            For other types, use ToString() or JsonConvert.SerializeObject() to convert to string.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the partition key is not a string.</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.Dispose">
            <summary>
            Disposes the resolver in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.Dispose(System.Boolean)">
            <summary>
            Disposes the resources.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.HashGenerator">
            <summary>
            Gets the HashGenerator used in consistent hashing.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.PartitionKeyPropertyName">
            <summary>
            Gets the name of the property in the document to execute the hashing on in the Azure DocumentDB database service.
            </summary>
            <value>The name of the property in the document to execute the hashing on.</value>
            <remarks>
            HashPartitionResolver supports two modes - one using PartitionKeyPropertyName and the other using PartitionKeyExtractor.
            PartitionKeyPropertyName is extracted using Reflection, so use the C# property name, not the JSON representation.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.CollectionLinks">
            <summary>
            Gets the IEnumerable of collection links used for hashing in the Azure DocumentDB database service.
            </summary>
            <value>The IEnumerable of collection links used for hashing.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.PartitionKeyExtractor">
            <summary>
            Gets the function to extract the partition key from an object in the Azure DocumentDB database service.
            </summary>
            <value>The function to extract the partition key from an object.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.NumberOfVirtualNodesPerCollection">
            <summary>
            The number of virtual nodes per collection in the conisistent hash ring in the Azure DocumentDB database service. This controls the compromise of skewness of documents accross collections vs the consistent hashing latency.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Partitioning.IHashGenerator">
            <summary>
            An interface used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver"/> to partition data using consistent hashing in the Azure DocumentDB database service.
            </summary>
            <remarks>
            <para>
            Support for interfaces used with IPartitionResolver is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.IHashGenerator.ComputeHash(System.Byte[])">
            <summary>
            Hashes an array of bytes into a new array of bytes that represents the output hash in the Azure DocumentDB database service.
            </summary>
            <param name="key">A key represented by an array of bytes</param>
            <returns>An array of bytes that represents the output hash.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Partitioning.Range`1">
            <summary>
            A class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service.
            </summary>
            <typeparam name="T">Any type that can be used for range comparison.</typeparam>
            <remarks>
            Support for classes used with IPartitionResolver is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/> class using the specified low and high values.
            </summary>
            <param name="low">The low value in the range.</param>
            <param name="high">The high value in the range.</param>
            <exception cref="T:System.ArgumentException">Throws an exception if the range is invalid (low is greater than high).</exception>
            <remarks>
            The Range class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/> class for a single value.
            </summary>
            <param name="point">A value that is used to create the range.</param>
            <remarks>
            Use this constructor for building a partitioning scheme for discrete/single values.
            The Range class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.Equals(Microsoft.Azure.Documents.Partitioning.Range{`0})">
            <summary>
            Checks if two ranges are equal.
            </summary>
            <param name="other">the input range to be compared with this range.</param>
            <returns>Returns true if the input range is equal to this range.</returns>
            <remarks>
            The Range class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.CompareTo(Microsoft.Azure.Documents.Partitioning.Range{`0})">
            <summary>
            Compares two ranges.
            </summary>
            <param name="other">The other range to compare to.</param>
            <returns>Returns -1 if the range is smaller than the passed range, 1 if bigger and 0 if equal.</returns>
            <remarks>
            The Range class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.Contains(`0)">
            <summary>
            Checks if the range contains a key.
            </summary>
            <param name="point">The key to be checked if in the range.</param>
            <returns>Returns true if the key is in the range.</returns>
            <remarks>
            The Range class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.Contains(Microsoft.Azure.Documents.Partitioning.Range{`0})">
            <summary>
            Checks if the range contains another range..
            </summary>
            <param name="other">The input range to be checked if it's contained in this range.</param>
            <returns>Returns true if the input range is contained in the range.</returns>
            <remarks>
            The Range class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.GetHashCode">
            <summary>
            Creates the hashcode for the range.
            </summary>
            <returns>Returns the hashcode for the range.</returns>
            <remarks>
            The Range class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.Intersect(Microsoft.Azure.Documents.Partitioning.Range{`0})">
            <summary>
            Checks if the range <paramref name="other"/> intersects with this range.
            </summary>
            <param name="other">the input <see cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/> to be compared with this range.</param>
            <returns>Returns true if the two ranges intersect with each other.</returns>
            <remarks>
            The Range class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.ToString">
            <summary>
            Converts the range to a string in the form of "low,high"
            </summary>
            <returns>Returns A string representation of the range.</returns>
            <remarks>
            The Range class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.Range`1.Low">
            <summary>
            Gets the low value in the range.
            </summary>
            <value>
            The low value in the range.
            </value>
            <remarks>
            The Range class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.Range`1.High">
            <summary>
            Gets the high value in the range.
            </summary>
            <value>
            The high value in the range.
            </value>
            <remarks>
            The Range class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1">
            <summary>
            RangePartitionResolver implements partitioning in Azure DocumentDB database service by using a partition map of ranges of values to a collection self-link.
            This works well when the data is naturally ordered and commonly queried upon using ranges of values, e.g., for 
            time series data or alphabetical ranges of strings.
            </summary>
            <typeparam name="T">The type of value to use for range partitioning.</typeparam>
            <remarks>
            <para>
            Support for IPartitionResolver based classes is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </para>
            <para>
            In range partitioning, partitions are assigned based on whether the partition key is within a certain range. The 
            RangePartitionResolver class helps you maintain a mapping between a <see cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/> and collection self-link.
            </para>
            <para>
            <see cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/> is a simple class for specifying ranges of any types that implement <see cref="T:System.IComparable`1"/> and <see cref="T:System.IEquatable`1"/> 
            like strings or numbers. For reads and creates, you can pass in any arbitrary range, and the resolver identifies all the candidate collections by 
            identifying the ranges of the partitions that intersect twith the requested range.
            </para>
            <para>
            A special case of range partitioning is when the range is just a single discrete value, sometimes called Lookup Partitioning. This is commonly used 
            for partitioning by discrete values like Region or Type or for partitioning tenants in a multi-tenant application.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.#ctor(System.String,System.Collections.Generic.IDictionary{Microsoft.Azure.Documents.Partitioning.Range{`0},System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class in the Azure DocumentDB database service using the specified <paramref name="partitionKeyPropertyName"/> value.
            </summary>
            <param name="partitionKeyPropertyName">The name of the property in the document to execute the hashing on.</param>
            <param name="partitionMap">A map from range to collection-link that is used for partitioning requests.</param>
            <remarks>
            Use when you want to partition based on a single property name. For other partitioning schemes, use the constructor 
            with partitionKeyExtractor instead.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the parameters is null.</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.#ctor(System.Func{System.Object,System.Object},System.Collections.Generic.IDictionary{Microsoft.Azure.Documents.Partitioning.Range{`0},System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver"/> in the Azure DocumentDB database service using the specified <paramref name="partitionKeyExtractor"/> value.
            </summary>
            <param name="partitionKeyExtractor">The name of the property in the document to execute the hashing on.</param>
            <param name="partitionMap">A map from range to collection-link that is used for partitioning requests.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the parameters is null.</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.GetPartitionKey(System.Object)">
            <summary>
            Extracts the partition key from the specified document using the specified <see cref="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.PartitionKeyPropertyName"/> 
            property or <see cref="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.PartitionKeyExtractor"/> function in order of preference in the Azure DocumentDB database service.
            </summary>
            <param name="document">A document object</param>
            <returns>object used as the partition key.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if unable to extract the partition key.</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.ResolveForCreate(System.Object)">
            <summary>
            Given a partition key, returns the correct collection self-link for creating a document using the range partition map in the Azure DocumentDB database service.
            </summary>
            <param name="partitionKey">The partition key used to determine the target collection for create</param>
            <returns>The target collection link that will be used for document creation.</returns>
            <remarks>
            If multiple ranges match the specified partitionKey, then the resolver returns one of the matching ranges. If none of the
            ranges match, then the method throws a <see cref="T:System.InvalidOperationException"/>. If partitionKey is null, then all collections
            are returned.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="partitionKey"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <paramref name="partitionKey"/> is an invalid type or if none of the ranges match the specified partition key.
            </exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.ResolveForRead(System.Object)">
            <summary>
            Given a partition key, returns a list of collection links to read from using the range partition map in the Azure DocumentDB database service.
            </summary>
            <param name="partitionKey">The partition key used to determine the target collections for query</param>
            <returns>The list of target collection links.</returns>
            <remarks>
            The <paramref name="partitionKey"/> must be an instance of <typeparamref name="T"/>, <see cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/> or an <see cref="T:System.Collections.Generic.IEnumerable`1"/>."/&gt;. 
            This method returns all the collections corresponding to the ranges that intersect with the specified <paramref name="partitionKey"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <paramref name="partitionKey"/> is an invalid type.
            </exception>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.PartitionKeyPropertyName">
            <summary>
            The name of the property in the document to execute the hashing on in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.PartitionMap">
            <summary>
            Gets the map from range to collection-link that is used for partitioning requests in the Azure DocumentDB database service.
            </summary>
            <value>
            The map from range to collection-link that is used for partitioning requests.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.PartitionKeyExtractor">
            <summary>
            Gets the function to extract the partition key from any object in the Azure DocumentDB database service.
            </summary>
            <value>
            The function to extract the partition key from any object.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Query.QueryCompatibilityMode">
            <summary>
            A client query compatibility mode when making query request.
            Can be used to force a specific query request format.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Query.QueryCompatibilityMode.Default">
            <summary>
            Default (latest) query format.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Query.QueryCompatibilityMode.Query">
            <summary>
            Query (application/query+json).
            Default.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Query.QueryCompatibilityMode.SqlQuery">
            <summary>
            SqlQuery (application/sql).
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Query.ParallelQuery.DocumentProducer`1.MoveNextAsync(System.Threading.CancellationToken)">
            <summary>
                Advances to the next element in the sequence, returning the result asynchronously.
            </summary>
            <param name="token">Cancellation token that can be used to cancel the operation.</param>
            <returns>
                Task containing the result of the operation: true if the DocumentProducer was successfully advanced
                to the next element; false if the DocumentProducer has passed the end of the sequence.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Query.ParallelQuery.DocumentProducer`1.Current">
            <summary>
                Gets the current element in the iteration.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Query.ParallelQuery.ParallelQueryConfig.ClientInternalPageSize">
            <summary>
            If the client specifies a MaxItemCount as -1, we return documents in batches of 100
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Query.ParallelQuery.ParallelQueryConfig.DefaultMaximumBufferSize">
            <summary>
            Default maximum number of documents cached at the client side, if it is not specified in the feedOptions.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Query.ParallelQuery.ParallelQueryConfig.AutoModeTasksIncrementFactor">
            <summary>
            We adaptively increase the number of threads as we see partitions are continuing to return results. 2 => we double the number of threads.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Query.ParallelQuery.ParallelQueryConfig.ClientInternalMaxItemCount">
            <summary>
            This is the value we overwrite with in the above case. -1 => the server returns dynamic number of results. Overwriting -1 by very high number doesn't have any significant impact in performance. -1, tries to return maximum number of documents possible per roundtrip
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Query.ParallelQuery.ParallelQueryConfig.NumberOfNetworkCallsPerProcessor">
            <summary>
            Making a backend call is equivalent to a Network Call. Here 1 indicates that if the client machine has 4 processor, we would allow at max (4*1) = 4 parallel calls to the backend. Of course, the number of parallel call won't exceed the number of partitions that needs to be visited for the query under consideration.
            </summary> 
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.GlobalAddressResolver">
            <summary>
            AddressCache implementation for client SDK. Supports cross region address routing based on 
            avaialbility and preference list.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.GlobalAddressResolver.GetAddressResolver(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            ReplicatedResourceClient will use this API to get the direct connectivity AddressCache for given request.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.GlobalEndpointManager">
            <summary>
            AddressCache implementation for client SDK. Supports cross region address routing based on 
            avaialbility and preference list.
            </summary>
            Marking it as non-sealed in order to unit test it using Moq framework
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.GlobalEndpointManager.ResolveServiceEndpoint(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            For Moq test, make it virtual
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.LocationCache">
            <summary>
            Abstraction to resolve the target location(region) for given request.
            It relies on two set of routing policy.
            1) List of available regions(writable and readable).
            2) List of region preferences.
            Based on the two list it picks the current write location and read location.
            Both the list can be changed dynamically and this type reacts to it dynamically by picking new write and read endpoint.
            In future, we can extend this type to support resource specific routing by invoking 
            ILocationResolver.ResolveLocation(Request) which can maintain resource specific routing policy.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.LocationCache.HandleAvailableLocationsChange(Microsoft.Azure.Documents.DatabaseAccount)">
            <summary>
            Use this API to refresh location cache, when available region(s) list is updated/refreshed.
            </summary>
            <param name="databaseAccount"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.LocationCache.CheckAndUpdateIfReadEndpointUnavailable(System.Uri)">
            <summary>
            Checks if the given readEndpoint is present in the unavailable endpoints list. It 
            also removes the endpoint entry if it has expired.
            </summary>
            <param name="readEndpoint"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.LocationCache.MarkReadEndpointUnavailable(System.Uri)">
            <summary>
            Use this API to mark a read endpoint as unavailable when endpoint failure is encountered
            </summary>
            <param name="unavailableReadEndpoint"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.LocationCache.IsReadLocationAvailable(System.String)">
            <summary>
            Use this API to check if a read location is available
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.LocationCache.HandleLocationPreferenceChange(System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Use this API to refresh location cache, when user preference list is changed.
            </summary>
            <param name="preferenceList"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.LocationCache.GetServiceEndpoint(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            GatewayStoreModel.GetEntityUri/GetFeedUri will use this API to get the location of GW to send given request.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.LocationNames">
            <summary>
            The LocationNames class contains the names of Azure regions that
            are currently supported by the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.WestUS">
            <summary>
            Name of the Azure West US region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.WestUS2">
            <summary>
            Name of the Azure West US 2 region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.WestCentralUS">
            <summary>
            Name of the Azure West Central US region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.EastUS">
            <summary>
            Name of the Azure East US region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.EastUS2">
            <summary>
            Name of the Azure East US 2 region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.CentralUS">
            <summary>
            Name of the Azure Central US region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.SouthCentralUS">
            <summary>
            Name of the Azure Sourth Central US region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.NorthCentralUS">
            <summary>
            Name of the Azure North Central US region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.WestEurope">
            <summary>
            Name of the Azure West Europe region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.NorthEurope">
            <summary>
            Name of the Azure North Europe region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.EastAsia">
            <summary>
            Name of the Azure East Asia region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.SoutheastAsia">
            <summary>
            Name of the Azure Southeast Asia region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.JapanEast">
            <summary>
            Name of the Azure Japan East region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.JapanWest">
            <summary>
            Name of the Azure Japan West region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.AustraliaEast">
            <summary>
            Name of the Azure Australia East region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.AustraliaSoutheast">
            <summary>
            Name of the Azure Australia Southeast region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.CentralIndia">
            <summary>
            Name of the Azure Central India region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.SouthIndia">
            <summary>
            Name of the Azure South India region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.WestIndia">
            <summary>
            Name of the Azure West India region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.CanadaEast">
            <summary>
            Name of the Azure Canada East region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.CanadaCentral">
            <summary>
            Name of the Azure Canada Central region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.GermanyCentral">
            <summary>
            Name of the Azure Germany Central region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.GermanyNortheast">
            <summary>
            Name of the Azure Germany Northeast region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.ChinaNorth">
            <summary>
            Name of the Azure China North region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.ChinaEast">
            <summary>
            Name of the Azure China East region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.KoreaSouth">
            <summary>
            Name of the Azure Korea South region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.KoreaCentral">
            <summary>
            Name of the Azure Korea Central region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.UKWest">
            <summary>
            Name of the Azure UK West region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.UKSouth">
            <summary>
            Name of the Azure UK South region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.BrazilSouth">
            <summary>
            Name of the Azure Brazil South region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.USGovArizona">
            <summary>
            Name of the Azure USGov Arizona region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.LocationNames.USGovTexas">
            <summary>
            Name of the Azure USGov Texas region in the Azure DocumentDB database service.
            </summary>
        </member>
        <member name="T:AssemblyRef">
            <summary>
            Sets public key string for friend assemblies.
            </summary>
        </member>
        <member name="F:AssemblyRef.ProductPublicKey">
            <summary>ProductPublicKey is an official MS supported public key for external releases. TestPublicKey is an unsupported strong key for testing and internal use only</summary>
        </member>
    </members>
</doc>
